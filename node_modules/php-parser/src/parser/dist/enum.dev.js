/**
 * Copyright (C) 2018 Glayzzle (BSD3 License)
 * @authors https://github.com/glayzzle/php-parser/graphs/contributors
 * @url http://glayzzle.com
 */
"use strict";

module.exports = {
  /*
   * reading an enum
   * ```ebnf
   * enum ::= enum_scope? T_ENUM T_STRING (':' NAMESPACE_NAME)? (T_IMPLEMENTS (NAMESPACE_NAME ',')* NAMESPACE_NAME)? '{' ENUM_BODY '}'
   * ```
   */
  read_enum_declaration_statement: function read_enum_declaration_statement(attrs) {
    var result = this.node("enum"); // graceful mode : ignore token & go next

    if (!this.expect(this.tok.T_ENUM)) {
      return null;
    }

    this.next().expect(this.tok.T_STRING);
    var propName = this.node("identifier");
    var name = this.text();
    this.next();
    propName = propName(name);
    var valueType = this.read_enum_value_type();
    var propImplements = this.read_implements_list();
    this.expect("{");
    var body = this.next().read_class_body(false, true);
    var node = result(propName, valueType, propImplements, body);
    if (attrs) node.attrGroups = attrs;
    return node;
  },
  read_enum_value_type: function read_enum_value_type() {
    if (this.token === ":") {
      return this.next().read_namespace_name();
    }

    return null;
  },
  read_enum_case: function read_enum_case() {
    this.expect(this.tok.T_CASE);
    var result = this.node("enumcase");
    var caseName = this.node("identifier");
    var name = this.next().text();
    this.next();
    caseName = caseName(name);
    var value = this.token === "=" ? this.next().read_expr() : null;
    this.expect(";");
    return result(caseName, value);
  }
};