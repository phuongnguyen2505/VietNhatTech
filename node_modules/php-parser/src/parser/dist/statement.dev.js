/**
 * Copyright (C) 2018 Glayzzle (BSD3 License)
 * @authors https://github.com/glayzzle/php-parser/graphs/contributors
 * @url http://glayzzle.com
 */
"use strict";

module.exports = {
  /*
   * reading a list of top statements (helper for top_statement*)
   * ```ebnf
   *  top_statements ::= top_statement*
   * ```
   */
  read_top_statements: function read_top_statements() {
    var result = [];

    while (this.token !== this.EOF && this.token !== "}") {
      var statement = this.read_top_statement();

      if (statement) {
        if (Array.isArray(statement)) {
          result = result.concat(statement);
        } else {
          result.push(statement);
        }
      }
    }

    return result;
  },

  /*
   * reading a top statement
   * ```ebnf
   *  top_statement ::=
   *       namespace | function | class
   *       | interface | trait
   *       | use_statements | const_list
   *       | statement
   * ```
   */
  read_top_statement: function read_top_statement() {
    var attrs = [];

    if (this.token === this.tok.T_ATTRIBUTE) {
      attrs = this.read_attr_list();
    }

    switch (this.token) {
      case this.tok.T_FUNCTION:
        return this.read_function(false, false, attrs);
      // optional flags

      case this.tok.T_ABSTRACT:
      case this.tok.T_FINAL:
      case this.tok.T_READ_ONLY:
      case this.tok.T_CLASS:
        return this.read_class_declaration_statement(attrs);

      case this.tok.T_INTERFACE:
        return this.read_interface_declaration_statement(attrs);

      case this.tok.T_TRAIT:
        return this.read_trait_declaration_statement();

      case this.tok.T_ENUM:
        return this.read_enum_declaration_statement(attrs);

      case this.tok.T_USE:
        return this.read_use_statement();

      case this.tok.T_CONST:
        {
          var result = this.node("constantstatement");
          var items = this.next().read_const_list();
          this.expectEndOfStatement();
          return result(null, items);
        }

      case this.tok.T_NAMESPACE:
        return this.read_namespace();

      case this.tok.T_HALT_COMPILER:
        {
          var _result = this.node("halt");

          if (this.next().expect("(")) this.next();
          if (this.expect(")")) this.next();
          this.expect(";");
          this.lexer.done = true;
          return _result(this.lexer._input.substring(this.lexer.offset));
        }

      default:
        return this.read_statement();
    }
  },

  /*
   * reads a list of simple inner statements (helper for inner_statement*)
   * ```ebnf
   *  inner_statements ::= inner_statement*
   * ```
   */
  read_inner_statements: function read_inner_statements() {
    var result = [];

    while (this.token != this.EOF && this.token !== "}") {
      var statement = this.read_inner_statement();

      if (statement) {
        if (Array.isArray(statement)) {
          result = result.concat(statement);
        } else {
          result.push(statement);
        }
      }
    }

    return result;
  },

  /*
   * Reads a list of constants declaration
   * ```ebnf
   *   const_list ::= T_CONST T_STRING '=' expr (',' T_STRING '=' expr)* ';'
   * ```
   */
  read_const_list: function read_const_list() {
    return this.read_list(function () {
      this.expect(this.tok.T_STRING);
      var result = this.node("constant");
      var constName = this.node("identifier");
      var name = this.text();
      this.next();
      constName = constName(name);

      if (this.expect("=")) {
        return result(constName, this.next().read_expr());
      } else {
        // fallback
        return result(constName, null);
      }
    }, ",", false);
  },

  /*
   * Reads a list of constants declaration
   * ```ebnf
   *   declare_list ::= IDENTIFIER '=' expr (',' IDENTIFIER '=' expr)*
   * ```
   * @retrurn {Array}
   */
  read_declare_list: function read_declare_list() {
    var result = [];

    while (this.token != this.EOF && this.token !== ")") {
      this.expect(this.tok.T_STRING);
      var directive = this.node("declaredirective");
      var key = this.node("identifier");
      var name = this.text();
      this.next();
      key = key(name);
      var value = null;

      if (this.expect("=")) {
        value = this.next().read_expr();
      }

      result.push(directive(key, value));
      if (this.token !== ",") break;
      this.next();
    }

    return result;
  },

  /*
   * reads a simple inner statement
   * ```ebnf
   *  inner_statement ::= '{' inner_statements '}' | token
   * ```
   */
  read_inner_statement: function read_inner_statement() {
    var attrs = [];

    if (this.token === this.tok.T_ATTRIBUTE) {
      attrs = this.read_attr_list();
    }

    switch (this.token) {
      case this.tok.T_FUNCTION:
        {
          var result = this.read_function(false, false);
          result.attrGroups = attrs;
          return result;
        }
      // optional flags

      case this.tok.T_ABSTRACT:
      case this.tok.T_FINAL:
      case this.tok.T_CLASS:
        return this.read_class_declaration_statement();

      case this.tok.T_INTERFACE:
        return this.read_interface_declaration_statement();

      case this.tok.T_TRAIT:
        return this.read_trait_declaration_statement();

      case this.tok.T_ENUM:
        return this.read_enum_declaration_statement();

      case this.tok.T_HALT_COMPILER:
        {
          this.raiseError("__HALT_COMPILER() can only be used from the outermost scope"); // fallback : returns a node but does not stop the parsing

          var node = this.node("halt");
          this.next().expect("(") && this.next();
          this.expect(")") && this.next();
          node = node(this.lexer._input.substring(this.lexer.offset));
          this.expect(";") && this.next();
          return node;
        }

      default:
        return this.read_statement();
    }
  },

  /*
   * Reads statements
   */
  read_statement: function read_statement() {
    switch (this.token) {
      case "{":
        return this.read_code_block(false);

      case this.tok.T_IF:
        return this.read_if();

      case this.tok.T_SWITCH:
        return this.read_switch();

      case this.tok.T_FOR:
        return this.read_for();

      case this.tok.T_FOREACH:
        return this.read_foreach();

      case this.tok.T_WHILE:
        return this.read_while();

      case this.tok.T_DO:
        return this.read_do();

      case this.tok.T_COMMENT:
        return this.read_comment();

      case this.tok.T_DOC_COMMENT:
        return this.read_doc_comment();

      case this.tok.T_RETURN:
        {
          var result = this.node("return");
          this.next();
          var expr = this.read_optional_expr(";");
          this.expectEndOfStatement();
          return result(expr);
        }
      // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L429

      case this.tok.T_BREAK:
      case this.tok.T_CONTINUE:
        {
          var _result2 = this.node(this.token === this.tok.T_CONTINUE ? "continue" : "break");

          this.next();
          var level = this.read_optional_expr(";");
          this.expectEndOfStatement();
          return _result2(level);
        }

      case this.tok.T_GLOBAL:
        {
          var _result3 = this.node("global");

          var items = this.next().read_list(this.read_simple_variable, ",");
          this.expectEndOfStatement();
          return _result3(items);
        }

      case this.tok.T_STATIC:
        {
          var current = [this.token, this.lexer.getState()];

          var _result4 = this.node();

          if (this.next().token === this.tok.T_DOUBLE_COLON) {
            // static keyword for a class
            this.lexer.tokens.push(current);

            var _expr = this.next().read_expr();

            this.expectEndOfStatement(_expr);
            return _result4("expressionstatement", _expr);
          }

          if (this.token === this.tok.T_FUNCTION) {
            return this.read_function(true, [0, 1, 0]);
          }

          var _items = this.read_variable_declarations();

          this.expectEndOfStatement();
          return _result4("static", _items);
        }

      case this.tok.T_ECHO:
        {
          var _result5 = this.node("echo");

          var text = this.text();
          var shortForm = text === "<?=" || text === "<%=";
          var expressions = this.next().read_function_list(this.read_expr, ",");
          this.expectEndOfStatement();
          return _result5(expressions, shortForm);
        }

      case this.tok.T_INLINE_HTML:
        {
          var value = this.text();
          var prevChar = this.lexer.yylloc.first_offset > 0 ? this.lexer._input[this.lexer.yylloc.first_offset - 1] : null;
          var fixFirstLine = prevChar === "\r" || prevChar === "\n"; // revert back the first stripped line

          if (fixFirstLine) {
            if (prevChar === "\n" && this.lexer.yylloc.first_offset > 1 && this.lexer._input[this.lexer.yylloc.first_offset - 2] === "\r") {
              prevChar = "\r\n";
            }
          }

          var _result6 = this.node("inline");

          this.next();
          return _result6(value, fixFirstLine ? prevChar + value : value);
        }

      case this.tok.T_UNSET:
        {
          var _result7 = this.node("unset");

          this.next().expect("(") && this.next();
          var variables = this.read_function_list(this.read_variable, ",");
          this.expect(")") && this.next();
          this.expect(";") && this.next();
          return _result7(variables);
        }

      case this.tok.T_DECLARE:
        {
          var _result8 = this.node("declare");

          var body = [];
          var mode;
          this.next().expect("(") && this.next();
          var directives = this.read_declare_list();
          this.expect(")") && this.next();

          if (this.token === ":") {
            this.next();

            while (this.token != this.EOF && this.token !== this.tok.T_ENDDECLARE) {
              // @todo : check declare_statement from php / not valid
              body.push(this.read_top_statement());
            }

            if (body.length === 0 && this.extractDoc && this._docs.length > this._docIndex) {
              body.push(this.node("noop")());
            }

            this.expect(this.tok.T_ENDDECLARE) && this.next();
            this.expectEndOfStatement();
            mode = this.ast.declare.MODE_SHORT;
          } else if (this.token === "{") {
            this.next();

            while (this.token != this.EOF && this.token !== "}") {
              // @todo : check declare_statement from php / not valid
              body.push(this.read_top_statement());
            }

            if (body.length === 0 && this.extractDoc && this._docs.length > this._docIndex) {
              body.push(this.node("noop")());
            }

            this.expect("}") && this.next();
            mode = this.ast.declare.MODE_BLOCK;
          } else {
            this.expect(";") && this.next();
            mode = this.ast.declare.MODE_NONE;
          }

          return _result8(directives, body, mode);
        }

      case this.tok.T_TRY:
        return this.read_try();

      case this.tok.T_THROW:
        {
          var _result9 = this.node("throw");

          var _expr2 = this.next().read_expr();

          this.expectEndOfStatement();
          return _result9(_expr2);
        }
      // ignore this (extra ponctuation)

      case ";":
        {
          this.next();
          return null;
        }

      case this.tok.T_STRING:
        {
          var _result10 = this.node();

          var _current = [this.token, this.lexer.getState()];
          var labelNameText = this.text();
          var labelName = this.node("identifier"); // AST : https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L457

          if (this.next().token === ":") {
            labelName = labelName(labelNameText);
            this.next();
            return _result10("label", labelName);
          } else {
            labelName.destroy();
          } // default fallback expr / T_STRING '::' (etc...)


          _result10.destroy();

          this.lexer.tokens.push(_current);
          var statement = this.node("expressionstatement");

          var _expr3 = this.next().read_expr();

          this.expectEndOfStatement(_expr3);
          return statement(_expr3);
        }

      case this.tok.T_GOTO:
        {
          var _result11 = this.node("goto");

          var _labelName = null;

          if (this.next().expect(this.tok.T_STRING)) {
            _labelName = this.node("identifier");
            var name = this.text();
            this.next();
            _labelName = _labelName(name);
            this.expectEndOfStatement();
          }

          return _result11(_labelName);
        }

      default:
        {
          // default fallback expr
          var _statement = this.node("expressionstatement");

          var _expr4 = this.read_expr();

          this.expectEndOfStatement(_expr4);
          return _statement(_expr4);
        }
    }
  },

  /*
   * ```ebnf
   *  code_block ::= '{' (inner_statements | top_statements) '}'
   * ```
   */
  read_code_block: function read_code_block(top) {
    var result = this.node("block");
    this.expect("{") && this.next();
    var body = top ? this.read_top_statements() : this.read_inner_statements();

    if (body.length === 0 && this.extractDoc && this._docs.length > this._docIndex) {
      body.push(this.node("noop")());
    }

    this.expect("}") && this.next();
    return result(null, body);
  }
};