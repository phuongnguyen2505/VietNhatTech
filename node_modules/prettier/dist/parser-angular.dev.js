"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

(function (e) {
  if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) == "object" && (typeof module === "undefined" ? "undefined" : _typeof(module)) == "object") module.exports = e();else if (typeof define == "function" && define.amd) define(e);else {
    var i = (typeof globalThis === "undefined" ? "undefined" : _typeof(globalThis)) < "u" ? globalThis : (typeof global === "undefined" ? "undefined" : _typeof(global)) < "u" ? global : (typeof self === "undefined" ? "undefined" : _typeof(self)) < "u" ? self : this || {};
    i.prettierPlugins = i.prettierPlugins || {}, i.prettierPlugins.angular = e();
  }
})(function () {
  "use strict";

  var cr = function cr(e, t) {
    return function () {
      return t || e((t = {
        exports: {}
      }).exports, t), t.exports;
    };
  };

  var Br = cr(function (Mr, ar) {
    var ze = Object.defineProperty,
        ur = Object.getOwnPropertyDescriptor,
        He = Object.getOwnPropertyNames,
        lr = Object.prototype.hasOwnProperty,
        Y = function Y(e, t) {
      return function () {
        return e && (t = (0, e[He(e)[0]])(e = 0)), t;
      };
    },
        q = function q(e, t) {
      return function () {
        return t || (0, e[He(e)[0]])((t = {
          exports: {}
        }).exports, t), t.exports;
      };
    },
        Xe = function Xe(e, t) {
      for (var r in t) {
        ze(e, r, {
          get: t[r],
          enumerable: !0
        });
      }
    },
        hr = function hr(e, t, r, n) {
      if (t && _typeof(t) == "object" || typeof t == "function") {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          var _loop = function _loop() {
            var s = _step.value;
            !lr.call(e, s) && s !== r && ze(e, s, {
              get: function get() {
                return t[s];
              },
              enumerable: !(n = ur(t, s)) || n.enumerable
            });
          };

          for (var _iterator = He(t)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            _loop();
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }

      return e;
    },
        be = function be(e) {
      return hr(ze({}, "__esModule", {
        value: !0
      }), e);
    },
        L = Y({
      "<define:process>": function defineProcess() {}
    }),
        pr = q({
      "src/utils/is-non-empty-array.js": function srcUtilsIsNonEmptyArrayJs(e, t) {
        "use strict";

        L();

        function r(n) {
          return Array.isArray(n) && n.length > 0;
        }

        t.exports = r;
      }
    }),
        dr = q({
      "src/language-js/loc.js": function srcLanguageJsLocJs(e, t) {
        "use strict";

        L();
        var r = pr();

        function n(l) {
          var P, p;
          var x = l.range ? l.range[0] : l.start,
              C = (P = (p = l.declaration) === null || p === void 0 ? void 0 : p.decorators) !== null && P !== void 0 ? P : l.decorators;
          return r(C) ? Math.min(n(C[0]), x) : x;
        }

        function s(l) {
          return l.range ? l.range[1] : l.end;
        }

        function a(l, P) {
          var p = n(l);
          return Number.isInteger(p) && p === n(P);
        }

        function i(l, P) {
          var p = s(l);
          return Number.isInteger(p) && p === s(P);
        }

        function h(l, P) {
          return a(l, P) && i(l, P);
        }

        t.exports = {
          locStart: n,
          locEnd: s,
          hasSameLocStart: a,
          hasSameLoc: h
        };
      }
    }),
        fr = q({
      "node_modules/angular-estree-parser/node_modules/lines-and-columns/build/index.js": function node_modulesAngularEstreeParserNode_modulesLinesAndColumnsBuildIndexJs(e) {
        "use strict";

        L(), e.__esModule = !0, e.LinesAndColumns = void 0;

        var t = "\n",
            r = "\r",
            n = function () {
          function s(a) {
            this.string = a;

            for (var i = [0], h = 0; h < a.length;) {
              switch (a[h]) {
                case t:
                  h += t.length, i.push(h);
                  break;

                case r:
                  h += r.length, a[h] === t && (h += t.length), i.push(h);
                  break;

                default:
                  h++;
                  break;
              }
            }

            this.offsets = i;
          }

          return s.prototype.locationForIndex = function (a) {
            if (a < 0 || a > this.string.length) return null;

            for (var i = 0, h = this.offsets; h[i + 1] <= a;) {
              i++;
            }

            var l = a - h[i];
            return {
              line: i,
              column: l
            };
          }, s.prototype.indexForLocation = function (a) {
            var i = a.line,
                h = a.column;
            return i < 0 || i >= this.offsets.length || h < 0 || h > this.lengthOfLine(i) ? null : this.offsets[i] + h;
          }, s.prototype.lengthOfLine = function (a) {
            var i = this.offsets[a],
                h = a === this.offsets.length - 1 ? this.string.length : this.offsets[a + 1];
            return h - i;
          }, s;
        }();

        e.LinesAndColumns = n, e["default"] = n;
      }
    }),
        gr = q({
      "node_modules/angular-estree-parser/lib/context.js": function node_modulesAngularEstreeParserLibContextJs(e) {
        "use strict";

        L(), Object.defineProperty(e, "__esModule", {
          value: !0
        }), e.Context = void 0;

        var t = fr(),
            r = function r(s) {
          _classCallCheck(this, r);

          this.text = s, this.locator = new n(this.text);
        };

        e.Context = r;

        var n =
        /*#__PURE__*/
        function () {
          function n(s) {
            _classCallCheck(this, n);

            this._lineAndColumn = new t["default"](s);
          }

          _createClass(n, [{
            key: "locationForIndex",
            value: function locationForIndex(s) {
              var _this$_lineAndColumn$ = this._lineAndColumn.locationForIndex(s),
                  a = _this$_lineAndColumn$.line,
                  i = _this$_lineAndColumn$.column;

              return {
                line: a + 1,
                column: i
              };
            }
          }]);

          return n;
        }();
      }
    }),
        Je = {};

    Xe(Je, {
      AST: function AST() {
        return k;
      },
      ASTWithName: function ASTWithName() {
        return W;
      },
      ASTWithSource: function ASTWithSource() {
        return G;
      },
      AbsoluteSourceSpan: function AbsoluteSourceSpan() {
        return U;
      },
      AstMemoryEfficientTransformer: function AstMemoryEfficientTransformer() {
        return Ct;
      },
      AstTransformer: function AstTransformer() {
        return Pt;
      },
      Binary: function Binary() {
        return B;
      },
      BindingPipe: function BindingPipe() {
        return fe;
      },
      BoundElementProperty: function BoundElementProperty() {
        return It;
      },
      Chain: function Chain() {
        return oe;
      },
      Conditional: function Conditional() {
        return ce;
      },
      EmptyExpr: function EmptyExpr() {
        return K;
      },
      ExpressionBinding: function ExpressionBinding() {
        return Ze;
      },
      FunctionCall: function FunctionCall() {
        return Pe;
      },
      ImplicitReceiver: function ImplicitReceiver() {
        return Oe;
      },
      Interpolation: function Interpolation() {
        return me;
      },
      KeyedRead: function KeyedRead() {
        return he;
      },
      KeyedWrite: function KeyedWrite() {
        return de;
      },
      LiteralArray: function LiteralArray() {
        return ge;
      },
      LiteralMap: function LiteralMap() {
        return ve;
      },
      LiteralPrimitive: function LiteralPrimitive() {
        return $;
      },
      MethodCall: function MethodCall() {
        return ye;
      },
      NonNullAssert: function NonNullAssert() {
        return Se;
      },
      ParseSpan: function ParseSpan() {
        return V;
      },
      ParsedEvent: function ParsedEvent() {
        return At;
      },
      ParsedProperty: function ParsedProperty() {
        return Et;
      },
      ParsedPropertyType: function ParsedPropertyType() {
        return se;
      },
      ParsedVariable: function ParsedVariable() {
        return _t;
      },
      ParserError: function ParserError() {
        return ae;
      },
      PrefixNot: function PrefixNot() {
        return xe;
      },
      PropertyRead: function PropertyRead() {
        return ne;
      },
      PropertyWrite: function PropertyWrite() {
        return ue;
      },
      Quote: function Quote() {
        return Le;
      },
      RecursiveAstVisitor: function RecursiveAstVisitor() {
        return et;
      },
      SafeKeyedRead: function SafeKeyedRead() {
        return pe;
      },
      SafeMethodCall: function SafeMethodCall() {
        return we;
      },
      SafePropertyRead: function SafePropertyRead() {
        return le;
      },
      ThisReceiver: function ThisReceiver() {
        return Ye;
      },
      Unary: function Unary() {
        return _F;
      },
      VariableBinding: function VariableBinding() {
        return Re;
      }
    });

    var ae,
        V,
        k,
        W,
        Le,
        K,
        Oe,
        Ye,
        oe,
        ce,
        ne,
        ue,
        le,
        he,
        pe,
        de,
        fe,
        $,
        ge,
        ve,
        me,
        B,
        _F,
        xe,
        Se,
        ye,
        we,
        Pe,
        U,
        G,
        Re,
        Ze,
        et,
        Pt,
        Ct,
        Et,
        se,
        At,
        _t,
        It,
        tt = Y({
      "node_modules/@angular/compiler/esm2015/src/expression_parser/ast.js": function node_modulesAngularCompilerEsm2015SrcExpression_parserAstJs() {
        L(), ae = function ae(e, t, r, n) {
          _classCallCheck(this, ae);

          this.input = t, this.errLocation = r, this.ctxLocation = n, this.message = "Parser Error: ".concat(e, " ").concat(r, " [").concat(t, "] in ").concat(n);
        }, V =
        /*#__PURE__*/
        function () {
          function V(e, t) {
            _classCallCheck(this, V);

            this.start = e, this.end = t;
          }

          _createClass(V, [{
            key: "toAbsolute",
            value: function toAbsolute(e) {
              return new U(e + this.start, e + this.end);
            }
          }]);

          return V;
        }(), k =
        /*#__PURE__*/
        function () {
          function k(e, t) {
            _classCallCheck(this, k);

            this.span = e, this.sourceSpan = t;
          }

          _createClass(k, [{
            key: "toString",
            value: function toString() {
              return "AST";
            }
          }]);

          return k;
        }(), W =
        /*#__PURE__*/
        function (_k) {
          _inherits(W, _k);

          function W(e, t, r) {
            var _this;

            _classCallCheck(this, W);

            _this = _possibleConstructorReturn(this, _getPrototypeOf(W).call(this, e, t)), _this.nameSpan = r;
            return _this;
          }

          return W;
        }(k), Le =
        /*#__PURE__*/
        function (_k2) {
          _inherits(Le, _k2);

          function Le(e, t, r, n, s) {
            var _this2;

            _classCallCheck(this, Le);

            _this2 = _possibleConstructorReturn(this, _getPrototypeOf(Le).call(this, e, t)), _this2.prefix = r, _this2.uninterpretedExpression = n, _this2.location = s;
            return _this2;
          }

          _createClass(Le, [{
            key: "visit",
            value: function visit(e) {
              var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
              return e.visitQuote(this, t);
            }
          }, {
            key: "toString",
            value: function toString() {
              return "Quote";
            }
          }]);

          return Le;
        }(k), K =
        /*#__PURE__*/
        function (_k3) {
          _inherits(K, _k3);

          function K() {
            _classCallCheck(this, K);

            return _possibleConstructorReturn(this, _getPrototypeOf(K).apply(this, arguments));
          }

          _createClass(K, [{
            key: "visit",
            value: function visit(e) {
              var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
            }
          }]);

          return K;
        }(k), Oe =
        /*#__PURE__*/
        function (_k4) {
          _inherits(Oe, _k4);

          function Oe() {
            _classCallCheck(this, Oe);

            return _possibleConstructorReturn(this, _getPrototypeOf(Oe).apply(this, arguments));
          }

          _createClass(Oe, [{
            key: "visit",
            value: function visit(e) {
              var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
              return e.visitImplicitReceiver(this, t);
            }
          }]);

          return Oe;
        }(k), Ye =
        /*#__PURE__*/
        function (_Oe) {
          _inherits(Ye, _Oe);

          function Ye() {
            _classCallCheck(this, Ye);

            return _possibleConstructorReturn(this, _getPrototypeOf(Ye).apply(this, arguments));
          }

          _createClass(Ye, [{
            key: "visit",
            value: function visit(e) {
              var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
              var r;
              return (r = e.visitThisReceiver) === null || r === void 0 ? void 0 : r.call(e, this, t);
            }
          }]);

          return Ye;
        }(Oe), oe =
        /*#__PURE__*/
        function (_k5) {
          _inherits(oe, _k5);

          function oe(e, t, r) {
            var _this3;

            _classCallCheck(this, oe);

            _this3 = _possibleConstructorReturn(this, _getPrototypeOf(oe).call(this, e, t)), _this3.expressions = r;
            return _this3;
          }

          _createClass(oe, [{
            key: "visit",
            value: function visit(e) {
              var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
              return e.visitChain(this, t);
            }
          }]);

          return oe;
        }(k), ce =
        /*#__PURE__*/
        function (_k6) {
          _inherits(ce, _k6);

          function ce(e, t, r, n, s) {
            var _this4;

            _classCallCheck(this, ce);

            _this4 = _possibleConstructorReturn(this, _getPrototypeOf(ce).call(this, e, t)), _this4.condition = r, _this4.trueExp = n, _this4.falseExp = s;
            return _this4;
          }

          _createClass(ce, [{
            key: "visit",
            value: function visit(e) {
              var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
              return e.visitConditional(this, t);
            }
          }]);

          return ce;
        }(k), ne =
        /*#__PURE__*/
        function (_W) {
          _inherits(ne, _W);

          function ne(e, t, r, n, s) {
            var _this5;

            _classCallCheck(this, ne);

            _this5 = _possibleConstructorReturn(this, _getPrototypeOf(ne).call(this, e, t, r)), _this5.receiver = n, _this5.name = s;
            return _this5;
          }

          _createClass(ne, [{
            key: "visit",
            value: function visit(e) {
              var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
              return e.visitPropertyRead(this, t);
            }
          }]);

          return ne;
        }(W), ue =
        /*#__PURE__*/
        function (_W2) {
          _inherits(ue, _W2);

          function ue(e, t, r, n, s, a) {
            var _this6;

            _classCallCheck(this, ue);

            _this6 = _possibleConstructorReturn(this, _getPrototypeOf(ue).call(this, e, t, r)), _this6.receiver = n, _this6.name = s, _this6.value = a;
            return _this6;
          }

          _createClass(ue, [{
            key: "visit",
            value: function visit(e) {
              var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
              return e.visitPropertyWrite(this, t);
            }
          }]);

          return ue;
        }(W), le =
        /*#__PURE__*/
        function (_W3) {
          _inherits(le, _W3);

          function le(e, t, r, n, s) {
            var _this7;

            _classCallCheck(this, le);

            _this7 = _possibleConstructorReturn(this, _getPrototypeOf(le).call(this, e, t, r)), _this7.receiver = n, _this7.name = s;
            return _this7;
          }

          _createClass(le, [{
            key: "visit",
            value: function visit(e) {
              var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
              return e.visitSafePropertyRead(this, t);
            }
          }]);

          return le;
        }(W), he =
        /*#__PURE__*/
        function (_k7) {
          _inherits(he, _k7);

          function he(e, t, r, n) {
            var _this8;

            _classCallCheck(this, he);

            _this8 = _possibleConstructorReturn(this, _getPrototypeOf(he).call(this, e, t)), _this8.receiver = r, _this8.key = n;
            return _this8;
          }

          _createClass(he, [{
            key: "visit",
            value: function visit(e) {
              var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
              return e.visitKeyedRead(this, t);
            }
          }]);

          return he;
        }(k), pe =
        /*#__PURE__*/
        function (_k8) {
          _inherits(pe, _k8);

          function pe(e, t, r, n) {
            var _this9;

            _classCallCheck(this, pe);

            _this9 = _possibleConstructorReturn(this, _getPrototypeOf(pe).call(this, e, t)), _this9.receiver = r, _this9.key = n;
            return _this9;
          }

          _createClass(pe, [{
            key: "visit",
            value: function visit(e) {
              var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
              return e.visitSafeKeyedRead(this, t);
            }
          }]);

          return pe;
        }(k), de =
        /*#__PURE__*/
        function (_k9) {
          _inherits(de, _k9);

          function de(e, t, r, n, s) {
            var _this10;

            _classCallCheck(this, de);

            _this10 = _possibleConstructorReturn(this, _getPrototypeOf(de).call(this, e, t)), _this10.receiver = r, _this10.key = n, _this10.value = s;
            return _this10;
          }

          _createClass(de, [{
            key: "visit",
            value: function visit(e) {
              var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
              return e.visitKeyedWrite(this, t);
            }
          }]);

          return de;
        }(k), fe =
        /*#__PURE__*/
        function (_W4) {
          _inherits(fe, _W4);

          function fe(e, t, r, n, s, a) {
            var _this11;

            _classCallCheck(this, fe);

            _this11 = _possibleConstructorReturn(this, _getPrototypeOf(fe).call(this, e, t, a)), _this11.exp = r, _this11.name = n, _this11.args = s;
            return _this11;
          }

          _createClass(fe, [{
            key: "visit",
            value: function visit(e) {
              var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
              return e.visitPipe(this, t);
            }
          }]);

          return fe;
        }(W), $ =
        /*#__PURE__*/
        function (_k10) {
          _inherits($, _k10);

          function $(e, t, r) {
            var _this12;

            _classCallCheck(this, $);

            _this12 = _possibleConstructorReturn(this, _getPrototypeOf($).call(this, e, t)), _this12.value = r;
            return _this12;
          }

          _createClass($, [{
            key: "visit",
            value: function visit(e) {
              var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
              return e.visitLiteralPrimitive(this, t);
            }
          }]);

          return $;
        }(k), ge =
        /*#__PURE__*/
        function (_k11) {
          _inherits(ge, _k11);

          function ge(e, t, r) {
            var _this13;

            _classCallCheck(this, ge);

            _this13 = _possibleConstructorReturn(this, _getPrototypeOf(ge).call(this, e, t)), _this13.expressions = r;
            return _this13;
          }

          _createClass(ge, [{
            key: "visit",
            value: function visit(e) {
              var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
              return e.visitLiteralArray(this, t);
            }
          }]);

          return ge;
        }(k), ve =
        /*#__PURE__*/
        function (_k12) {
          _inherits(ve, _k12);

          function ve(e, t, r, n) {
            var _this14;

            _classCallCheck(this, ve);

            _this14 = _possibleConstructorReturn(this, _getPrototypeOf(ve).call(this, e, t)), _this14.keys = r, _this14.values = n;
            return _this14;
          }

          _createClass(ve, [{
            key: "visit",
            value: function visit(e) {
              var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
              return e.visitLiteralMap(this, t);
            }
          }]);

          return ve;
        }(k), me =
        /*#__PURE__*/
        function (_k13) {
          _inherits(me, _k13);

          function me(e, t, r, n) {
            var _this15;

            _classCallCheck(this, me);

            _this15 = _possibleConstructorReturn(this, _getPrototypeOf(me).call(this, e, t)), _this15.strings = r, _this15.expressions = n;
            return _this15;
          }

          _createClass(me, [{
            key: "visit",
            value: function visit(e) {
              var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
              return e.visitInterpolation(this, t);
            }
          }]);

          return me;
        }(k), B =
        /*#__PURE__*/
        function (_k14) {
          _inherits(B, _k14);

          function B(e, t, r, n, s) {
            var _this16;

            _classCallCheck(this, B);

            _this16 = _possibleConstructorReturn(this, _getPrototypeOf(B).call(this, e, t)), _this16.operation = r, _this16.left = n, _this16.right = s;
            return _this16;
          }

          _createClass(B, [{
            key: "visit",
            value: function visit(e) {
              var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
              return e.visitBinary(this, t);
            }
          }]);

          return B;
        }(k), _F =
        /*#__PURE__*/
        function (_B) {
          _inherits(F, _B);

          function F(e, t, r, n, s, a, i) {
            var _this17;

            _classCallCheck(this, F);

            _this17 = _possibleConstructorReturn(this, _getPrototypeOf(F).call(this, e, t, s, a, i)), _this17.operator = r, _this17.expr = n;
            return _this17;
          }

          _createClass(F, [{
            key: "visit",
            value: function visit(e) {
              var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
              return e.visitUnary !== void 0 ? e.visitUnary(this, t) : e.visitBinary(this, t);
            }
          }], [{
            key: "createMinus",
            value: function createMinus(e, t, r) {
              return new _F(e, t, "-", r, "-", new $(e, t, 0), r);
            }
          }, {
            key: "createPlus",
            value: function createPlus(e, t, r) {
              return new _F(e, t, "+", r, "-", r, new $(e, t, 0));
            }
          }]);

          return F;
        }(B), xe =
        /*#__PURE__*/
        function (_k15) {
          _inherits(xe, _k15);

          function xe(e, t, r) {
            var _this18;

            _classCallCheck(this, xe);

            _this18 = _possibleConstructorReturn(this, _getPrototypeOf(xe).call(this, e, t)), _this18.expression = r;
            return _this18;
          }

          _createClass(xe, [{
            key: "visit",
            value: function visit(e) {
              var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
              return e.visitPrefixNot(this, t);
            }
          }]);

          return xe;
        }(k), Se =
        /*#__PURE__*/
        function (_k16) {
          _inherits(Se, _k16);

          function Se(e, t, r) {
            var _this19;

            _classCallCheck(this, Se);

            _this19 = _possibleConstructorReturn(this, _getPrototypeOf(Se).call(this, e, t)), _this19.expression = r;
            return _this19;
          }

          _createClass(Se, [{
            key: "visit",
            value: function visit(e) {
              var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
              return e.visitNonNullAssert(this, t);
            }
          }]);

          return Se;
        }(k), ye =
        /*#__PURE__*/
        function (_W5) {
          _inherits(ye, _W5);

          function ye(e, t, r, n, s, a, i) {
            var _this20;

            _classCallCheck(this, ye);

            _this20 = _possibleConstructorReturn(this, _getPrototypeOf(ye).call(this, e, t, r)), _this20.receiver = n, _this20.name = s, _this20.args = a, _this20.argumentSpan = i;
            return _this20;
          }

          _createClass(ye, [{
            key: "visit",
            value: function visit(e) {
              var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
              return e.visitMethodCall(this, t);
            }
          }]);

          return ye;
        }(W), we =
        /*#__PURE__*/
        function (_W6) {
          _inherits(we, _W6);

          function we(e, t, r, n, s, a, i) {
            var _this21;

            _classCallCheck(this, we);

            _this21 = _possibleConstructorReturn(this, _getPrototypeOf(we).call(this, e, t, r)), _this21.receiver = n, _this21.name = s, _this21.args = a, _this21.argumentSpan = i;
            return _this21;
          }

          _createClass(we, [{
            key: "visit",
            value: function visit(e) {
              var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
              return e.visitSafeMethodCall(this, t);
            }
          }]);

          return we;
        }(W), Pe =
        /*#__PURE__*/
        function (_k17) {
          _inherits(Pe, _k17);

          function Pe(e, t, r, n) {
            var _this22;

            _classCallCheck(this, Pe);

            _this22 = _possibleConstructorReturn(this, _getPrototypeOf(Pe).call(this, e, t)), _this22.target = r, _this22.args = n;
            return _this22;
          }

          _createClass(Pe, [{
            key: "visit",
            value: function visit(e) {
              var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
              return e.visitFunctionCall(this, t);
            }
          }]);

          return Pe;
        }(k), U = function U(e, t) {
          _classCallCheck(this, U);

          this.start = e, this.end = t;
        }, G =
        /*#__PURE__*/
        function (_k18) {
          _inherits(G, _k18);

          function G(e, t, r, n, s) {
            var _this23;

            _classCallCheck(this, G);

            _this23 = _possibleConstructorReturn(this, _getPrototypeOf(G).call(this, new V(0, t === null ? 0 : t.length), new U(n, t === null ? n : n + t.length))), _this23.ast = e, _this23.source = t, _this23.location = r, _this23.errors = s;
            return _this23;
          }

          _createClass(G, [{
            key: "visit",
            value: function visit(e) {
              var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
              return e.visitASTWithSource ? e.visitASTWithSource(this, t) : this.ast.visit(e, t);
            }
          }, {
            key: "toString",
            value: function toString() {
              return "".concat(this.source, " in ").concat(this.location);
            }
          }]);

          return G;
        }(k), Re = function Re(e, t, r) {
          _classCallCheck(this, Re);

          this.sourceSpan = e, this.key = t, this.value = r;
        }, Ze = function Ze(e, t, r) {
          _classCallCheck(this, Ze);

          this.sourceSpan = e, this.key = t, this.value = r;
        }, et =
        /*#__PURE__*/
        function () {
          function et() {
            _classCallCheck(this, et);
          }

          _createClass(et, [{
            key: "visit",
            value: function visit(e, t) {
              e.visit(this, t);
            }
          }, {
            key: "visitUnary",
            value: function visitUnary(e, t) {
              this.visit(e.expr, t);
            }
          }, {
            key: "visitBinary",
            value: function visitBinary(e, t) {
              this.visit(e.left, t), this.visit(e.right, t);
            }
          }, {
            key: "visitChain",
            value: function visitChain(e, t) {
              this.visitAll(e.expressions, t);
            }
          }, {
            key: "visitConditional",
            value: function visitConditional(e, t) {
              this.visit(e.condition, t), this.visit(e.trueExp, t), this.visit(e.falseExp, t);
            }
          }, {
            key: "visitPipe",
            value: function visitPipe(e, t) {
              this.visit(e.exp, t), this.visitAll(e.args, t);
            }
          }, {
            key: "visitFunctionCall",
            value: function visitFunctionCall(e, t) {
              e.target && this.visit(e.target, t), this.visitAll(e.args, t);
            }
          }, {
            key: "visitImplicitReceiver",
            value: function visitImplicitReceiver(e, t) {}
          }, {
            key: "visitThisReceiver",
            value: function visitThisReceiver(e, t) {}
          }, {
            key: "visitInterpolation",
            value: function visitInterpolation(e, t) {
              this.visitAll(e.expressions, t);
            }
          }, {
            key: "visitKeyedRead",
            value: function visitKeyedRead(e, t) {
              this.visit(e.receiver, t), this.visit(e.key, t);
            }
          }, {
            key: "visitKeyedWrite",
            value: function visitKeyedWrite(e, t) {
              this.visit(e.receiver, t), this.visit(e.key, t), this.visit(e.value, t);
            }
          }, {
            key: "visitLiteralArray",
            value: function visitLiteralArray(e, t) {
              this.visitAll(e.expressions, t);
            }
          }, {
            key: "visitLiteralMap",
            value: function visitLiteralMap(e, t) {
              this.visitAll(e.values, t);
            }
          }, {
            key: "visitLiteralPrimitive",
            value: function visitLiteralPrimitive(e, t) {}
          }, {
            key: "visitMethodCall",
            value: function visitMethodCall(e, t) {
              this.visit(e.receiver, t), this.visitAll(e.args, t);
            }
          }, {
            key: "visitPrefixNot",
            value: function visitPrefixNot(e, t) {
              this.visit(e.expression, t);
            }
          }, {
            key: "visitNonNullAssert",
            value: function visitNonNullAssert(e, t) {
              this.visit(e.expression, t);
            }
          }, {
            key: "visitPropertyRead",
            value: function visitPropertyRead(e, t) {
              this.visit(e.receiver, t);
            }
          }, {
            key: "visitPropertyWrite",
            value: function visitPropertyWrite(e, t) {
              this.visit(e.receiver, t), this.visit(e.value, t);
            }
          }, {
            key: "visitSafePropertyRead",
            value: function visitSafePropertyRead(e, t) {
              this.visit(e.receiver, t);
            }
          }, {
            key: "visitSafeMethodCall",
            value: function visitSafeMethodCall(e, t) {
              this.visit(e.receiver, t), this.visitAll(e.args, t);
            }
          }, {
            key: "visitSafeKeyedRead",
            value: function visitSafeKeyedRead(e, t) {
              this.visit(e.receiver, t), this.visit(e.key, t);
            }
          }, {
            key: "visitQuote",
            value: function visitQuote(e, t) {}
          }, {
            key: "visitAll",
            value: function visitAll(e, t) {
              var _iteratorNormalCompletion2 = true;
              var _didIteratorError2 = false;
              var _iteratorError2 = undefined;

              try {
                for (var _iterator2 = e[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                  var r = _step2.value;
                  this.visit(r, t);
                }
              } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                    _iterator2["return"]();
                  }
                } finally {
                  if (_didIteratorError2) {
                    throw _iteratorError2;
                  }
                }
              }
            }
          }]);

          return et;
        }(), Pt =
        /*#__PURE__*/
        function () {
          function Pt() {
            _classCallCheck(this, Pt);
          }

          _createClass(Pt, [{
            key: "visitImplicitReceiver",
            value: function visitImplicitReceiver(e, t) {
              return e;
            }
          }, {
            key: "visitThisReceiver",
            value: function visitThisReceiver(e, t) {
              return e;
            }
          }, {
            key: "visitInterpolation",
            value: function visitInterpolation(e, t) {
              return new me(e.span, e.sourceSpan, e.strings, this.visitAll(e.expressions));
            }
          }, {
            key: "visitLiteralPrimitive",
            value: function visitLiteralPrimitive(e, t) {
              return new $(e.span, e.sourceSpan, e.value);
            }
          }, {
            key: "visitPropertyRead",
            value: function visitPropertyRead(e, t) {
              return new ne(e.span, e.sourceSpan, e.nameSpan, e.receiver.visit(this), e.name);
            }
          }, {
            key: "visitPropertyWrite",
            value: function visitPropertyWrite(e, t) {
              return new ue(e.span, e.sourceSpan, e.nameSpan, e.receiver.visit(this), e.name, e.value.visit(this));
            }
          }, {
            key: "visitSafePropertyRead",
            value: function visitSafePropertyRead(e, t) {
              return new le(e.span, e.sourceSpan, e.nameSpan, e.receiver.visit(this), e.name);
            }
          }, {
            key: "visitMethodCall",
            value: function visitMethodCall(e, t) {
              return new ye(e.span, e.sourceSpan, e.nameSpan, e.receiver.visit(this), e.name, this.visitAll(e.args), e.argumentSpan);
            }
          }, {
            key: "visitSafeMethodCall",
            value: function visitSafeMethodCall(e, t) {
              return new we(e.span, e.sourceSpan, e.nameSpan, e.receiver.visit(this), e.name, this.visitAll(e.args), e.argumentSpan);
            }
          }, {
            key: "visitFunctionCall",
            value: function visitFunctionCall(e, t) {
              return new Pe(e.span, e.sourceSpan, e.target.visit(this), this.visitAll(e.args));
            }
          }, {
            key: "visitLiteralArray",
            value: function visitLiteralArray(e, t) {
              return new ge(e.span, e.sourceSpan, this.visitAll(e.expressions));
            }
          }, {
            key: "visitLiteralMap",
            value: function visitLiteralMap(e, t) {
              return new ve(e.span, e.sourceSpan, e.keys, this.visitAll(e.values));
            }
          }, {
            key: "visitUnary",
            value: function visitUnary(e, t) {
              switch (e.operator) {
                case "+":
                  return _F.createPlus(e.span, e.sourceSpan, e.expr.visit(this));

                case "-":
                  return _F.createMinus(e.span, e.sourceSpan, e.expr.visit(this));

                default:
                  throw new Error("Unknown unary operator ".concat(e.operator));
              }
            }
          }, {
            key: "visitBinary",
            value: function visitBinary(e, t) {
              return new B(e.span, e.sourceSpan, e.operation, e.left.visit(this), e.right.visit(this));
            }
          }, {
            key: "visitPrefixNot",
            value: function visitPrefixNot(e, t) {
              return new xe(e.span, e.sourceSpan, e.expression.visit(this));
            }
          }, {
            key: "visitNonNullAssert",
            value: function visitNonNullAssert(e, t) {
              return new Se(e.span, e.sourceSpan, e.expression.visit(this));
            }
          }, {
            key: "visitConditional",
            value: function visitConditional(e, t) {
              return new ce(e.span, e.sourceSpan, e.condition.visit(this), e.trueExp.visit(this), e.falseExp.visit(this));
            }
          }, {
            key: "visitPipe",
            value: function visitPipe(e, t) {
              return new fe(e.span, e.sourceSpan, e.exp.visit(this), e.name, this.visitAll(e.args), e.nameSpan);
            }
          }, {
            key: "visitKeyedRead",
            value: function visitKeyedRead(e, t) {
              return new he(e.span, e.sourceSpan, e.receiver.visit(this), e.key.visit(this));
            }
          }, {
            key: "visitKeyedWrite",
            value: function visitKeyedWrite(e, t) {
              return new de(e.span, e.sourceSpan, e.receiver.visit(this), e.key.visit(this), e.value.visit(this));
            }
          }, {
            key: "visitAll",
            value: function visitAll(e) {
              var t = [];

              for (var r = 0; r < e.length; ++r) {
                t[r] = e[r].visit(this);
              }

              return t;
            }
          }, {
            key: "visitChain",
            value: function visitChain(e, t) {
              return new oe(e.span, e.sourceSpan, this.visitAll(e.expressions));
            }
          }, {
            key: "visitQuote",
            value: function visitQuote(e, t) {
              return new Le(e.span, e.sourceSpan, e.prefix, e.uninterpretedExpression, e.location);
            }
          }, {
            key: "visitSafeKeyedRead",
            value: function visitSafeKeyedRead(e, t) {
              return new pe(e.span, e.sourceSpan, e.receiver.visit(this), e.key.visit(this));
            }
          }]);

          return Pt;
        }(), Ct =
        /*#__PURE__*/
        function () {
          function Ct() {
            _classCallCheck(this, Ct);
          }

          _createClass(Ct, [{
            key: "visitImplicitReceiver",
            value: function visitImplicitReceiver(e, t) {
              return e;
            }
          }, {
            key: "visitThisReceiver",
            value: function visitThisReceiver(e, t) {
              return e;
            }
          }, {
            key: "visitInterpolation",
            value: function visitInterpolation(e, t) {
              var r = this.visitAll(e.expressions);
              return r !== e.expressions ? new me(e.span, e.sourceSpan, e.strings, r) : e;
            }
          }, {
            key: "visitLiteralPrimitive",
            value: function visitLiteralPrimitive(e, t) {
              return e;
            }
          }, {
            key: "visitPropertyRead",
            value: function visitPropertyRead(e, t) {
              var r = e.receiver.visit(this);
              return r !== e.receiver ? new ne(e.span, e.sourceSpan, e.nameSpan, r, e.name) : e;
            }
          }, {
            key: "visitPropertyWrite",
            value: function visitPropertyWrite(e, t) {
              var r = e.receiver.visit(this),
                  n = e.value.visit(this);
              return r !== e.receiver || n !== e.value ? new ue(e.span, e.sourceSpan, e.nameSpan, r, e.name, n) : e;
            }
          }, {
            key: "visitSafePropertyRead",
            value: function visitSafePropertyRead(e, t) {
              var r = e.receiver.visit(this);
              return r !== e.receiver ? new le(e.span, e.sourceSpan, e.nameSpan, r, e.name) : e;
            }
          }, {
            key: "visitMethodCall",
            value: function visitMethodCall(e, t) {
              var r = e.receiver.visit(this),
                  n = this.visitAll(e.args);
              return r !== e.receiver || n !== e.args ? new ye(e.span, e.sourceSpan, e.nameSpan, r, e.name, n, e.argumentSpan) : e;
            }
          }, {
            key: "visitSafeMethodCall",
            value: function visitSafeMethodCall(e, t) {
              var r = e.receiver.visit(this),
                  n = this.visitAll(e.args);
              return r !== e.receiver || n !== e.args ? new we(e.span, e.sourceSpan, e.nameSpan, r, e.name, n, e.argumentSpan) : e;
            }
          }, {
            key: "visitFunctionCall",
            value: function visitFunctionCall(e, t) {
              var r = e.target && e.target.visit(this),
                  n = this.visitAll(e.args);
              return r !== e.target || n !== e.args ? new Pe(e.span, e.sourceSpan, r, n) : e;
            }
          }, {
            key: "visitLiteralArray",
            value: function visitLiteralArray(e, t) {
              var r = this.visitAll(e.expressions);
              return r !== e.expressions ? new ge(e.span, e.sourceSpan, r) : e;
            }
          }, {
            key: "visitLiteralMap",
            value: function visitLiteralMap(e, t) {
              var r = this.visitAll(e.values);
              return r !== e.values ? new ve(e.span, e.sourceSpan, e.keys, r) : e;
            }
          }, {
            key: "visitUnary",
            value: function visitUnary(e, t) {
              var r = e.expr.visit(this);
              if (r !== e.expr) switch (e.operator) {
                case "+":
                  return _F.createPlus(e.span, e.sourceSpan, r);

                case "-":
                  return _F.createMinus(e.span, e.sourceSpan, r);

                default:
                  throw new Error("Unknown unary operator ".concat(e.operator));
              }
              return e;
            }
          }, {
            key: "visitBinary",
            value: function visitBinary(e, t) {
              var r = e.left.visit(this),
                  n = e.right.visit(this);
              return r !== e.left || n !== e.right ? new B(e.span, e.sourceSpan, e.operation, r, n) : e;
            }
          }, {
            key: "visitPrefixNot",
            value: function visitPrefixNot(e, t) {
              var r = e.expression.visit(this);
              return r !== e.expression ? new xe(e.span, e.sourceSpan, r) : e;
            }
          }, {
            key: "visitNonNullAssert",
            value: function visitNonNullAssert(e, t) {
              var r = e.expression.visit(this);
              return r !== e.expression ? new Se(e.span, e.sourceSpan, r) : e;
            }
          }, {
            key: "visitConditional",
            value: function visitConditional(e, t) {
              var r = e.condition.visit(this),
                  n = e.trueExp.visit(this),
                  s = e.falseExp.visit(this);
              return r !== e.condition || n !== e.trueExp || s !== e.falseExp ? new ce(e.span, e.sourceSpan, r, n, s) : e;
            }
          }, {
            key: "visitPipe",
            value: function visitPipe(e, t) {
              var r = e.exp.visit(this),
                  n = this.visitAll(e.args);
              return r !== e.exp || n !== e.args ? new fe(e.span, e.sourceSpan, r, e.name, n, e.nameSpan) : e;
            }
          }, {
            key: "visitKeyedRead",
            value: function visitKeyedRead(e, t) {
              var r = e.receiver.visit(this),
                  n = e.key.visit(this);
              return r !== e.receiver || n !== e.key ? new he(e.span, e.sourceSpan, r, n) : e;
            }
          }, {
            key: "visitKeyedWrite",
            value: function visitKeyedWrite(e, t) {
              var r = e.receiver.visit(this),
                  n = e.key.visit(this),
                  s = e.value.visit(this);
              return r !== e.receiver || n !== e.key || s !== e.value ? new de(e.span, e.sourceSpan, r, n, s) : e;
            }
          }, {
            key: "visitAll",
            value: function visitAll(e) {
              var t = [],
                  r = !1;

              for (var n = 0; n < e.length; ++n) {
                var s = e[n],
                    a = s.visit(this);
                t[n] = a, r = r || a !== s;
              }

              return r ? t : e;
            }
          }, {
            key: "visitChain",
            value: function visitChain(e, t) {
              var r = this.visitAll(e.expressions);
              return r !== e.expressions ? new oe(e.span, e.sourceSpan, r) : e;
            }
          }, {
            key: "visitQuote",
            value: function visitQuote(e, t) {
              return e;
            }
          }, {
            key: "visitSafeKeyedRead",
            value: function visitSafeKeyedRead(e, t) {
              var r = e.receiver.visit(this),
                  n = e.key.visit(this);
              return r !== e.receiver || n !== e.key ? new pe(e.span, e.sourceSpan, r, n) : e;
            }
          }]);

          return Ct;
        }(), Et = function Et(e, t, r, n, s, a) {
          _classCallCheck(this, Et);

          this.name = e, this.expression = t, this.type = r, this.sourceSpan = n, this.keySpan = s, this.valueSpan = a, this.isLiteral = this.type === se.LITERAL_ATTR, this.isAnimation = this.type === se.ANIMATION;
        }, function (e) {
          e[e.DEFAULT = 0] = "DEFAULT", e[e.LITERAL_ATTR = 1] = "LITERAL_ATTR", e[e.ANIMATION = 2] = "ANIMATION";
        }(se || (se = {})), At = function At(e, t, r, n, s, a, i) {
          _classCallCheck(this, At);

          this.name = e, this.targetOrPhase = t, this.type = r, this.handler = n, this.sourceSpan = s, this.handlerSpan = a, this.keySpan = i;
        }, _t = function _t(e, t, r, n, s) {
          _classCallCheck(this, _t);

          this.name = e, this.value = t, this.sourceSpan = r, this.keySpan = n, this.valueSpan = s;
        }, It = function It(e, t, r, n, s, a, i, h) {
          _classCallCheck(this, It);

          this.name = e, this.type = t, this.securityContext = r, this.value = n, this.unit = s, this.sourceSpan = a, this.keySpan = i, this.valueSpan = h;
        };
      }
    });

    function vr(e) {
      return e >= rt && e <= nt || e == dt;
    }

    function Q(e) {
      return Mt <= e && e <= jt;
    }

    function mr(e) {
      return e >= ht && e <= pt || e >= ut && e <= lt;
    }

    function mt(e) {
      return e === at || e === st || e === Xt;
    }

    var Ce,
        rt,
        Ot,
        kt,
        Nt,
        bt,
        nt,
        Lt,
        st,
        Rt,
        it,
        Tt,
        je,
        at,
        Ee,
        z,
        $t,
        ot,
        ee,
        ct,
        H,
        Te,
        X,
        te,
        Bt,
        ie,
        Kt,
        Fe,
        Mt,
        jt,
        ut,
        Ft,
        lt,
        Ae,
        Ut,
        re,
        Wt,
        Be,
        ht,
        Gt,
        Vt,
        qt,
        Qt,
        Dt,
        zt,
        Ht,
        pt,
        $e,
        Ue,
        _e,
        dt,
        Xt,
        Jt = Y({
      "node_modules/@angular/compiler/esm2015/src/chars.js": function node_modulesAngularCompilerEsm2015SrcCharsJs() {
        L(), Ce = 0, rt = 9, Ot = 10, kt = 11, Nt = 12, bt = 13, nt = 32, Lt = 33, st = 34, Rt = 35, it = 36, Tt = 37, je = 38, at = 39, Ee = 40, z = 41, $t = 42, ot = 43, ee = 44, ct = 45, H = 46, Te = 47, X = 58, te = 59, Bt = 60, ie = 61, Kt = 62, Fe = 63, Mt = 48, jt = 57, ut = 65, Ft = 69, lt = 90, Ae = 91, Ut = 92, re = 93, Wt = 94, Be = 95, ht = 97, Gt = 101, Vt = 102, qt = 110, Qt = 114, Dt = 116, zt = 117, Ht = 118, pt = 122, $e = 123, Ue = 124, _e = 125, dt = 160, Xt = 96;
      }
    }),
        Yt = {};

    Xe(Yt, {
      EOF: function EOF() {
        return Ie;
      },
      Lexer: function Lexer() {
        return er;
      },
      Token: function Token() {
        return M;
      },
      TokenType: function TokenType() {
        return S;
      },
      isIdentifier: function isIdentifier() {
        return Zt;
      }
    });

    function xt(e, t, r) {
      return new M(e, t, S.Character, r, String.fromCharCode(r));
    }

    function xr(e, t, r) {
      return new M(e, t, S.Identifier, 0, r);
    }

    function Sr(e, t, r) {
      return new M(e, t, S.PrivateIdentifier, 0, r);
    }

    function yr(e, t, r) {
      return new M(e, t, S.Keyword, 0, r);
    }

    function Ke(e, t, r) {
      return new M(e, t, S.Operator, 0, r);
    }

    function wr(e, t, r) {
      return new M(e, t, S.String, 0, r);
    }

    function Pr(e, t, r) {
      return new M(e, t, S.Number, r, "");
    }

    function Cr(e, t, r) {
      return new M(e, t, S.Error, 0, r);
    }

    function We(e) {
      return ht <= e && e <= pt || ut <= e && e <= lt || e == Be || e == it;
    }

    function Zt(e) {
      if (e.length == 0) return !1;
      var t = new Ve(e);
      if (!We(t.peek)) return !1;

      for (t.advance(); t.peek !== Ce;) {
        if (!Ge(t.peek)) return !1;
        t.advance();
      }

      return !0;
    }

    function Ge(e) {
      return mr(e) || Q(e) || e == Be || e == it;
    }

    function Er(e) {
      return e == Gt || e == Ft;
    }

    function Ar(e) {
      return e == ct || e == ot;
    }

    function _r(e) {
      switch (e) {
        case qt:
          return Ot;

        case Vt:
          return Nt;

        case Qt:
          return bt;

        case Dt:
          return rt;

        case Ht:
          return kt;

        default:
          return e;
      }
    }

    function Ir(e) {
      var t = parseInt(e);
      if (isNaN(t)) throw new Error("Invalid integer literal when parsing " + e);
      return t;
    }

    var S,
        St,
        er,
        M,
        Ie,
        Ve,
        tr = Y({
      "node_modules/@angular/compiler/esm2015/src/expression_parser/lexer.js": function node_modulesAngularCompilerEsm2015SrcExpression_parserLexerJs() {
        L(), Jt(), function (e) {
          e[e.Character = 0] = "Character", e[e.Identifier = 1] = "Identifier", e[e.PrivateIdentifier = 2] = "PrivateIdentifier", e[e.Keyword = 3] = "Keyword", e[e.String = 4] = "String", e[e.Operator = 5] = "Operator", e[e.Number = 6] = "Number", e[e.Error = 7] = "Error";
        }(S || (S = {})), St = ["var", "let", "as", "null", "undefined", "true", "false", "if", "else", "this"], er =
        /*#__PURE__*/
        function () {
          function er() {
            _classCallCheck(this, er);
          }

          _createClass(er, [{
            key: "tokenize",
            value: function tokenize(e) {
              var t = new Ve(e),
                  r = [],
                  n = t.scanToken();

              for (; n != null;) {
                r.push(n), n = t.scanToken();
              }

              return r;
            }
          }]);

          return er;
        }(), M =
        /*#__PURE__*/
        function () {
          function M(e, t, r, n, s) {
            _classCallCheck(this, M);

            this.index = e, this.end = t, this.type = r, this.numValue = n, this.strValue = s;
          }

          _createClass(M, [{
            key: "isCharacter",
            value: function isCharacter(e) {
              return this.type == S.Character && this.numValue == e;
            }
          }, {
            key: "isNumber",
            value: function isNumber() {
              return this.type == S.Number;
            }
          }, {
            key: "isString",
            value: function isString() {
              return this.type == S.String;
            }
          }, {
            key: "isOperator",
            value: function isOperator(e) {
              return this.type == S.Operator && this.strValue == e;
            }
          }, {
            key: "isIdentifier",
            value: function isIdentifier() {
              return this.type == S.Identifier;
            }
          }, {
            key: "isPrivateIdentifier",
            value: function isPrivateIdentifier() {
              return this.type == S.PrivateIdentifier;
            }
          }, {
            key: "isKeyword",
            value: function isKeyword() {
              return this.type == S.Keyword;
            }
          }, {
            key: "isKeywordLet",
            value: function isKeywordLet() {
              return this.type == S.Keyword && this.strValue == "let";
            }
          }, {
            key: "isKeywordAs",
            value: function isKeywordAs() {
              return this.type == S.Keyword && this.strValue == "as";
            }
          }, {
            key: "isKeywordNull",
            value: function isKeywordNull() {
              return this.type == S.Keyword && this.strValue == "null";
            }
          }, {
            key: "isKeywordUndefined",
            value: function isKeywordUndefined() {
              return this.type == S.Keyword && this.strValue == "undefined";
            }
          }, {
            key: "isKeywordTrue",
            value: function isKeywordTrue() {
              return this.type == S.Keyword && this.strValue == "true";
            }
          }, {
            key: "isKeywordFalse",
            value: function isKeywordFalse() {
              return this.type == S.Keyword && this.strValue == "false";
            }
          }, {
            key: "isKeywordThis",
            value: function isKeywordThis() {
              return this.type == S.Keyword && this.strValue == "this";
            }
          }, {
            key: "isError",
            value: function isError() {
              return this.type == S.Error;
            }
          }, {
            key: "toNumber",
            value: function toNumber() {
              return this.type == S.Number ? this.numValue : -1;
            }
          }, {
            key: "toString",
            value: function toString() {
              switch (this.type) {
                case S.Character:
                case S.Identifier:
                case S.Keyword:
                case S.Operator:
                case S.PrivateIdentifier:
                case S.String:
                case S.Error:
                  return this.strValue;

                case S.Number:
                  return this.numValue.toString();

                default:
                  return null;
              }
            }
          }]);

          return M;
        }(), Ie = new M(-1, -1, S.Character, 0, ""), Ve =
        /*#__PURE__*/
        function () {
          function Ve(e) {
            _classCallCheck(this, Ve);

            this.input = e, this.peek = 0, this.index = -1, this.length = e.length, this.advance();
          }

          _createClass(Ve, [{
            key: "advance",
            value: function advance() {
              this.peek = ++this.index >= this.length ? Ce : this.input.charCodeAt(this.index);
            }
          }, {
            key: "scanToken",
            value: function scanToken() {
              var e = this.input,
                  t = this.length,
                  r = this.peek,
                  n = this.index;

              for (; r <= nt;) {
                if (++n >= t) {
                  r = Ce;
                  break;
                } else r = e.charCodeAt(n);
              }

              if (this.peek = r, this.index = n, n >= t) return null;
              if (We(r)) return this.scanIdentifier();
              if (Q(r)) return this.scanNumber(n);
              var s = n;

              switch (r) {
                case H:
                  return this.advance(), Q(this.peek) ? this.scanNumber(s) : xt(s, this.index, H);

                case Ee:
                case z:
                case $e:
                case _e:
                case Ae:
                case re:
                case ee:
                case X:
                case te:
                  return this.scanCharacter(s, r);

                case at:
                case st:
                  return this.scanString();

                case Rt:
                  return this.scanPrivateIdentifier();

                case ot:
                case ct:
                case $t:
                case Te:
                case Tt:
                case Wt:
                  return this.scanOperator(s, String.fromCharCode(r));

                case Fe:
                  return this.scanQuestion(s);

                case Bt:
                case Kt:
                  return this.scanComplexOperator(s, String.fromCharCode(r), ie, "=");

                case Lt:
                case ie:
                  return this.scanComplexOperator(s, String.fromCharCode(r), ie, "=", ie, "=");

                case je:
                  return this.scanComplexOperator(s, "&", je, "&");

                case Ue:
                  return this.scanComplexOperator(s, "|", Ue, "|");

                case dt:
                  for (; vr(this.peek);) {
                    this.advance();
                  }

                  return this.scanToken();
              }

              return this.advance(), this.error("Unexpected character [".concat(String.fromCharCode(r), "]"), 0);
            }
          }, {
            key: "scanCharacter",
            value: function scanCharacter(e, t) {
              return this.advance(), xt(e, this.index, t);
            }
          }, {
            key: "scanOperator",
            value: function scanOperator(e, t) {
              return this.advance(), Ke(e, this.index, t);
            }
          }, {
            key: "scanComplexOperator",
            value: function scanComplexOperator(e, t, r, n, s, a) {
              this.advance();
              var i = t;
              return this.peek == r && (this.advance(), i += n), s != null && this.peek == s && (this.advance(), i += a), Ke(e, this.index, i);
            }
          }, {
            key: "scanIdentifier",
            value: function scanIdentifier() {
              var e = this.index;

              for (this.advance(); Ge(this.peek);) {
                this.advance();
              }

              var t = this.input.substring(e, this.index);
              return St.indexOf(t) > -1 ? yr(e, this.index, t) : xr(e, this.index, t);
            }
          }, {
            key: "scanPrivateIdentifier",
            value: function scanPrivateIdentifier() {
              var e = this.index;
              if (this.advance(), !We(this.peek)) return this.error("Invalid character [#]", -1);

              for (; Ge(this.peek);) {
                this.advance();
              }

              var t = this.input.substring(e, this.index);
              return Sr(e, this.index, t);
            }
          }, {
            key: "scanNumber",
            value: function scanNumber(e) {
              var t = this.index === e,
                  r = !1;

              for (this.advance();;) {
                if (!Q(this.peek)) if (this.peek === Be) {
                  if (!Q(this.input.charCodeAt(this.index - 1)) || !Q(this.input.charCodeAt(this.index + 1))) return this.error("Invalid numeric separator", 0);
                  r = !0;
                } else if (this.peek === H) t = !1;else if (Er(this.peek)) {
                  if (this.advance(), Ar(this.peek) && this.advance(), !Q(this.peek)) return this.error("Invalid exponent", -1);
                  t = !1;
                } else break;
                this.advance();
              }

              var n = this.input.substring(e, this.index);
              r && (n = n.replace(/_/g, ""));
              var s = t ? Ir(n) : parseFloat(n);
              return Pr(e, this.index, s);
            }
          }, {
            key: "scanString",
            value: function scanString() {
              var e = this.index,
                  t = this.peek;
              this.advance();
              var r = "",
                  n = this.index,
                  s = this.input;

              for (; this.peek != t;) {
                if (this.peek == Ut) {
                  r += s.substring(n, this.index), this.advance();
                  var i = void 0;

                  if (this.peek = this.peek, this.peek == zt) {
                    var h = s.substring(this.index + 1, this.index + 5);
                    if (/^[0-9a-f]+$/i.test(h)) i = parseInt(h, 16);else return this.error("Invalid unicode escape [\\u".concat(h, "]"), 0);

                    for (var l = 0; l < 5; l++) {
                      this.advance();
                    }
                  } else i = _r(this.peek), this.advance();

                  r += String.fromCharCode(i), n = this.index;
                } else {
                  if (this.peek == Ce) return this.error("Unterminated quote", 0);
                  this.advance();
                }
              }

              var a = s.substring(n, this.index);
              return this.advance(), wr(e, this.index, r + a);
            }
          }, {
            key: "scanQuestion",
            value: function scanQuestion(e) {
              this.advance();
              var t = "?";
              return (this.peek === Fe || this.peek === H) && (t += this.peek === H ? "." : "?", this.advance()), Ke(e, this.index, t);
            }
          }, {
            key: "error",
            value: function error(e, t) {
              var r = this.index + t;
              return Cr(r, this.index, "Lexer Error: ".concat(e, " at column ").concat(r, " in expression [").concat(this.input, "]"));
            }
          }]);

          return Ve;
        }();
      }
    });

    function Or(e, t) {
      if (t != null && !(Array.isArray(t) && t.length == 2)) throw new Error("Expected '".concat(e, "' to be an array, [start, end]."));

      if (t != null) {
        var r = t[0],
            n = t[1];
        rr.forEach(function (s) {
          if (s.test(r) || s.test(n)) throw new Error("['".concat(r, "', '").concat(n, "'] contains unusable interpolation symbol."));
        });
      }
    }

    var rr,
        kr = Y({
      "node_modules/@angular/compiler/esm2015/src/assertions.js": function node_modulesAngularCompilerEsm2015SrcAssertionsJs() {
        L(), rr = [/^\s*$/, /[<>]/, /^[{}]$/, /&(#|[a-z])/i, /^\/\//];
      }
    }),
        _Me,
        J,
        Nr = Y({
      "node_modules/@angular/compiler/esm2015/src/ml_parser/interpolation_config.js": function node_modulesAngularCompilerEsm2015SrcMl_parserInterpolation_configJs() {
        L(), kr(), _Me =
        /*#__PURE__*/
        function () {
          function Me(e, t) {
            _classCallCheck(this, Me);

            this.start = e, this.end = t;
          }

          _createClass(Me, null, [{
            key: "fromArray",
            value: function fromArray(e) {
              return e ? (Or("interpolation", e), new _Me(e[0], e[1])) : J;
            }
          }]);

          return Me;
        }(), J = new _Me("{{", "}}");
      }
    }),
        nr = {};

    Xe(nr, {
      IvyParser: function IvyParser() {
        return sr;
      },
      Parser: function Parser() {
        return De;
      },
      SplitInterpolation: function SplitInterpolation() {
        return qe;
      },
      TemplateBindingParseResult: function TemplateBindingParseResult() {
        return Qe;
      },
      _ParseAST: function _ParseAST() {
        return D;
      }
    });
    var qe,
        Qe,
        De,
        sr,
        Z,
        D,
        yt,
        wt,
        br = Y({
      "node_modules/@angular/compiler/esm2015/src/expression_parser/parser.js": function node_modulesAngularCompilerEsm2015SrcExpression_parserParserJs() {
        L(), Jt(), Nr(), tt(), tr(), qe = function qe(e, t, r) {
          _classCallCheck(this, qe);

          this.strings = e, this.expressions = t, this.offsets = r;
        }, Qe = function Qe(e, t, r) {
          _classCallCheck(this, Qe);

          this.templateBindings = e, this.warnings = t, this.errors = r;
        }, De =
        /*#__PURE__*/
        function () {
          function De(e) {
            _classCallCheck(this, De);

            this._lexer = e, this.errors = [], this.simpleExpressionChecker = yt;
          }

          _createClass(De, [{
            key: "parseAction",
            value: function parseAction(e, t, r) {
              var n = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : J;

              this._checkNoInterpolation(e, t, n);

              var s = this._stripComments(e),
                  a = this._lexer.tokenize(this._stripComments(e)),
                  i = new D(e, t, r, a, s.length, !0, this.errors, e.length - s.length).parseChain();

              return new G(i, e, t, r, this.errors);
            }
          }, {
            key: "parseBinding",
            value: function parseBinding(e, t, r) {
              var n = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : J,
                  s = this._parseBindingAst(e, t, r, n);

              return new G(s, e, t, r, this.errors);
            }
          }, {
            key: "checkSimpleExpression",
            value: function checkSimpleExpression(e) {
              var t = new this.simpleExpressionChecker();
              return e.visit(t), t.errors;
            }
          }, {
            key: "parseSimpleBinding",
            value: function parseSimpleBinding(e, t, r) {
              var n = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : J,
                  s = this._parseBindingAst(e, t, r, n),
                  a = this.checkSimpleExpression(s);

              return a.length > 0 && this._reportError("Host binding expression cannot contain ".concat(a.join(" ")), e, t), new G(s, e, t, r, this.errors);
            }
          }, {
            key: "_reportError",
            value: function _reportError(e, t, r, n) {
              this.errors.push(new ae(e, t, r, n));
            }
          }, {
            key: "_parseBindingAst",
            value: function _parseBindingAst(e, t, r, n) {
              var s = this._parseQuote(e, t, r);

              if (s != null) return s;

              this._checkNoInterpolation(e, t, n);

              var a = this._stripComments(e),
                  i = this._lexer.tokenize(a);

              return new D(e, t, r, i, a.length, !1, this.errors, e.length - a.length).parseChain();
            }
          }, {
            key: "_parseQuote",
            value: function _parseQuote(e, t, r) {
              if (e == null) return null;
              var n = e.indexOf(":");
              if (n == -1) return null;
              var s = e.substring(0, n).trim();
              if (!Zt(s)) return null;
              var a = e.substring(n + 1),
                  i = new V(0, e.length);
              return new Le(i, i.toAbsolute(r), s, a, t);
            }
          }, {
            key: "parseTemplateBindings",
            value: function parseTemplateBindings(e, t, r, n, s) {
              var a = this._lexer.tokenize(t);

              return new D(t, r, s, a, t.length, !1, this.errors, 0).parseTemplateBindings({
                source: e,
                span: new U(n, n + e.length)
              });
            }
          }, {
            key: "parseInterpolation",
            value: function parseInterpolation(e, t, r) {
              var n = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : J,
                  _this$splitInterpolat = this.splitInterpolation(e, t, n),
                  s = _this$splitInterpolat.strings,
                  a = _this$splitInterpolat.expressions,
                  i = _this$splitInterpolat.offsets;

              if (a.length === 0) return null;
              var h = [];

              for (var l = 0; l < a.length; ++l) {
                var P = a[l].text,
                    p = this._stripComments(P),
                    x = this._lexer.tokenize(p),
                    C = new D(e, t, r, x, p.length, !1, this.errors, i[l] + (P.length - p.length)).parseChain();

                h.push(C);
              }

              return this.createInterpolationAst(s.map(function (l) {
                return l.text;
              }), h, e, t, r);
            }
          }, {
            key: "parseInterpolationExpression",
            value: function parseInterpolationExpression(e, t, r) {
              var n = this._stripComments(e),
                  s = this._lexer.tokenize(n),
                  a = new D(e, t, r, s, n.length, !1, this.errors, 0).parseChain(),
                  i = ["", ""];

              return this.createInterpolationAst(i, [a], e, t, r);
            }
          }, {
            key: "createInterpolationAst",
            value: function createInterpolationAst(e, t, r, n, s) {
              var a = new V(0, r.length),
                  i = new me(a, a.toAbsolute(s), e, t);
              return new G(i, r, n, s, this.errors);
            }
          }, {
            key: "splitInterpolation",
            value: function splitInterpolation(e, t) {
              var r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : J,
                  n = [],
                  s = [],
                  a = [],
                  i = 0,
                  h = !1,
                  l = !1,
                  P = r.start,
                  p = r.end;

              for (; i < e.length;) {
                if (h) {
                  var x = i,
                      C = x + P.length,
                      b = this._getInterpolationEndIndex(e, p, C);

                  if (b === -1) {
                    h = !1, l = !0;
                    break;
                  }

                  var _ = b + p.length,
                      R = e.substring(C, b);

                  R.trim().length === 0 && this._reportError("Blank expressions are not allowed in interpolated strings", e, "at column ".concat(i, " in"), t), s.push({
                    text: R,
                    start: x,
                    end: _
                  }), a.push(C), i = _, h = !1;
                } else {
                  var _x = i;
                  i = e.indexOf(P, i), i === -1 && (i = e.length);

                  var _C = e.substring(_x, i);

                  n.push({
                    text: _C,
                    start: _x,
                    end: i
                  }), h = !0;
                }
              }

              if (!h) if (l) {
                var _x2 = n[n.length - 1];
                _x2.text += e.substring(i), _x2.end = e.length;
              } else n.push({
                text: e.substring(i),
                start: i,
                end: e.length
              });
              return new qe(n, s, a);
            }
          }, {
            key: "wrapLiteralPrimitive",
            value: function wrapLiteralPrimitive(e, t, r) {
              var n = new V(0, e == null ? 0 : e.length);
              return new G(new $(n, n.toAbsolute(r), e), e, t, r, this.errors);
            }
          }, {
            key: "_stripComments",
            value: function _stripComments(e) {
              var t = this._commentStart(e);

              return t != null ? e.substring(0, t).trim() : e;
            }
          }, {
            key: "_commentStart",
            value: function _commentStart(e) {
              var t = null;

              for (var r = 0; r < e.length - 1; r++) {
                var n = e.charCodeAt(r),
                    s = e.charCodeAt(r + 1);
                if (n === Te && s == Te && t == null) return r;
                t === n ? t = null : t == null && mt(n) && (t = n);
              }

              return null;
            }
          }, {
            key: "_checkNoInterpolation",
            value: function _checkNoInterpolation(e, t, r) {
              var n = r.start,
                  s = r.end,
                  a = -1,
                  i = -1;
              var _iteratorNormalCompletion3 = true;
              var _didIteratorError3 = false;
              var _iteratorError3 = undefined;

              try {
                for (var _iterator3 = this._forEachUnquotedChar(e, 0)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                  var h = _step3.value;
                  if (a === -1) e.startsWith(n) && (a = h);else if (i = this._getInterpolationEndIndex(e, s, h), i > -1) break;
                }
              } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                    _iterator3["return"]();
                  }
                } finally {
                  if (_didIteratorError3) {
                    throw _iteratorError3;
                  }
                }
              }

              a > -1 && i > -1 && this._reportError("Got interpolation (".concat(n).concat(s, ") where expression was expected"), e, "at column ".concat(a, " in"), t);
            }
          }, {
            key: "_getInterpolationEndIndex",
            value: function _getInterpolationEndIndex(e, t, r) {
              var _iteratorNormalCompletion4 = true;
              var _didIteratorError4 = false;
              var _iteratorError4 = undefined;

              try {
                for (var _iterator4 = this._forEachUnquotedChar(e, r)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                  var n = _step4.value;
                  if (e.startsWith(t, n)) return n;
                  if (e.startsWith("//", n)) return e.indexOf(t, n);
                }
              } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
                    _iterator4["return"]();
                  }
                } finally {
                  if (_didIteratorError4) {
                    throw _iteratorError4;
                  }
                }
              }

              return -1;
            }
          }, {
            key: "_forEachUnquotedChar",
            value:
            /*#__PURE__*/
            regeneratorRuntime.mark(function _forEachUnquotedChar(e, t) {
              var r, n, s, a;
              return regeneratorRuntime.wrap(function _forEachUnquotedChar$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      r = null, n = 0;
                      s = t;

                    case 2:
                      if (!(s < e.length)) {
                        _context.next = 16;
                        break;
                      }

                      a = e[s];

                      if (!(mt(e.charCodeAt(s)) && (r === null || r === a) && n % 2 === 0)) {
                        _context.next = 8;
                        break;
                      }

                      r = r === null ? a : null;
                      _context.next = 12;
                      break;

                    case 8:
                      _context.t0 = r === null;

                      if (!_context.t0) {
                        _context.next = 12;
                        break;
                      }

                      _context.next = 12;
                      return s;

                    case 12:
                      n = a === "\\" ? n + 1 : 0;

                    case 13:
                      s++;
                      _context.next = 2;
                      break;

                    case 16:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _forEachUnquotedChar);
            })
          }]);

          return De;
        }(), sr =
        /*#__PURE__*/
        function (_De) {
          _inherits(sr, _De);

          function sr() {
            var _this24;

            _classCallCheck(this, sr);

            _this24 = _possibleConstructorReturn(this, _getPrototypeOf(sr).apply(this, arguments)), _this24.simpleExpressionChecker = wt;
            return _this24;
          }

          return sr;
        }(De), function (e) {
          e[e.None = 0] = "None", e[e.Writable = 1] = "Writable";
        }(Z || (Z = {})), D =
        /*#__PURE__*/
        function () {
          function D(e, t, r, n, s, a, i, h) {
            _classCallCheck(this, D);

            this.input = e, this.location = t, this.absoluteOffset = r, this.tokens = n, this.inputLength = s, this.parseAction = a, this.errors = i, this.offset = h, this.rparensExpected = 0, this.rbracketsExpected = 0, this.rbracesExpected = 0, this.context = Z.None, this.sourceSpanCache = new Map(), this.index = 0;
          }

          _createClass(D, [{
            key: "peek",
            value: function peek(e) {
              var t = this.index + e;
              return t < this.tokens.length ? this.tokens[t] : Ie;
            }
          }, {
            key: "span",
            value: function span(e, t) {
              var r = this.currentEndIndex;

              if (t !== void 0 && t > this.currentEndIndex && (r = t), e > r) {
                var n = r;
                r = e, e = n;
              }

              return new V(e, r);
            }
          }, {
            key: "sourceSpan",
            value: function sourceSpan(e, t) {
              var r = "".concat(e, "@").concat(this.inputIndex, ":").concat(t);
              return this.sourceSpanCache.has(r) || this.sourceSpanCache.set(r, this.span(e, t).toAbsolute(this.absoluteOffset)), this.sourceSpanCache.get(r);
            }
          }, {
            key: "advance",
            value: function advance() {
              this.index++;
            }
          }, {
            key: "withContext",
            value: function withContext(e, t) {
              this.context |= e;
              var r = t();
              return this.context ^= e, r;
            }
          }, {
            key: "consumeOptionalCharacter",
            value: function consumeOptionalCharacter(e) {
              return this.next.isCharacter(e) ? (this.advance(), !0) : !1;
            }
          }, {
            key: "peekKeywordLet",
            value: function peekKeywordLet() {
              return this.next.isKeywordLet();
            }
          }, {
            key: "peekKeywordAs",
            value: function peekKeywordAs() {
              return this.next.isKeywordAs();
            }
          }, {
            key: "expectCharacter",
            value: function expectCharacter(e) {
              this.consumeOptionalCharacter(e) || this.error("Missing expected ".concat(String.fromCharCode(e)));
            }
          }, {
            key: "consumeOptionalOperator",
            value: function consumeOptionalOperator(e) {
              return this.next.isOperator(e) ? (this.advance(), !0) : !1;
            }
          }, {
            key: "expectOperator",
            value: function expectOperator(e) {
              this.consumeOptionalOperator(e) || this.error("Missing expected operator ".concat(e));
            }
          }, {
            key: "prettyPrintToken",
            value: function prettyPrintToken(e) {
              return e === Ie ? "end of input" : "token ".concat(e);
            }
          }, {
            key: "expectIdentifierOrKeyword",
            value: function expectIdentifierOrKeyword() {
              var e = this.next;
              return !e.isIdentifier() && !e.isKeyword() ? (e.isPrivateIdentifier() ? this._reportErrorForPrivateIdentifier(e, "expected identifier or keyword") : this.error("Unexpected ".concat(this.prettyPrintToken(e), ", expected identifier or keyword")), null) : (this.advance(), e.toString());
            }
          }, {
            key: "expectIdentifierOrKeywordOrString",
            value: function expectIdentifierOrKeywordOrString() {
              var e = this.next;
              return !e.isIdentifier() && !e.isKeyword() && !e.isString() ? (e.isPrivateIdentifier() ? this._reportErrorForPrivateIdentifier(e, "expected identifier, keyword or string") : this.error("Unexpected ".concat(this.prettyPrintToken(e), ", expected identifier, keyword, or string")), "") : (this.advance(), e.toString());
            }
          }, {
            key: "parseChain",
            value: function parseChain() {
              var e = [],
                  t = this.inputIndex;

              for (; this.index < this.tokens.length;) {
                var r = this.parsePipe();
                if (e.push(r), this.consumeOptionalCharacter(te)) for (this.parseAction || this.error("Binding expression cannot contain chained expression"); this.consumeOptionalCharacter(te);) {
                  ;
                } else this.index < this.tokens.length && this.error("Unexpected token '".concat(this.next, "'"));
              }

              if (e.length == 0) {
                var _r2 = this.offset,
                    n = this.offset + this.inputLength;
                return new K(this.span(_r2, n), this.sourceSpan(_r2, n));
              }

              return e.length == 1 ? e[0] : new oe(this.span(t), this.sourceSpan(t), e);
            }
          }, {
            key: "parsePipe",
            value: function parsePipe() {
              var e = this.inputIndex,
                  t = this.parseExpression();

              if (this.consumeOptionalOperator("|")) {
                this.parseAction && this.error("Cannot have a pipe in an action expression");

                do {
                  var r = this.inputIndex,
                      n = this.expectIdentifierOrKeyword(),
                      s = void 0,
                      a = void 0;
                  n !== null ? s = this.sourceSpan(r) : (n = "", a = this.next.index !== -1 ? this.next.index : this.inputLength + this.offset, s = new V(a, a).toAbsolute(this.absoluteOffset));
                  var i = [];

                  for (; this.consumeOptionalCharacter(X);) {
                    i.push(this.parseExpression());
                  }

                  t = new fe(this.span(e), this.sourceSpan(e, a), t, n, i, s);
                } while (this.consumeOptionalOperator("|"));
              }

              return t;
            }
          }, {
            key: "parseExpression",
            value: function parseExpression() {
              return this.parseConditional();
            }
          }, {
            key: "parseConditional",
            value: function parseConditional() {
              var e = this.inputIndex,
                  t = this.parseLogicalOr();

              if (this.consumeOptionalOperator("?")) {
                var r = this.parsePipe(),
                    n;
                if (this.consumeOptionalCharacter(X)) n = this.parsePipe();else {
                  var s = this.inputIndex,
                      a = this.input.substring(e, s);
                  this.error("Conditional expression ".concat(a, " requires all 3 expressions")), n = new K(this.span(e), this.sourceSpan(e));
                }
                return new ce(this.span(e), this.sourceSpan(e), t, r, n);
              } else return t;
            }
          }, {
            key: "parseLogicalOr",
            value: function parseLogicalOr() {
              var e = this.inputIndex,
                  t = this.parseLogicalAnd();

              for (; this.consumeOptionalOperator("||");) {
                var r = this.parseLogicalAnd();
                t = new B(this.span(e), this.sourceSpan(e), "||", t, r);
              }

              return t;
            }
          }, {
            key: "parseLogicalAnd",
            value: function parseLogicalAnd() {
              var e = this.inputIndex,
                  t = this.parseNullishCoalescing();

              for (; this.consumeOptionalOperator("&&");) {
                var r = this.parseNullishCoalescing();
                t = new B(this.span(e), this.sourceSpan(e), "&&", t, r);
              }

              return t;
            }
          }, {
            key: "parseNullishCoalescing",
            value: function parseNullishCoalescing() {
              var e = this.inputIndex,
                  t = this.parseEquality();

              for (; this.consumeOptionalOperator("??");) {
                var r = this.parseEquality();
                t = new B(this.span(e), this.sourceSpan(e), "??", t, r);
              }

              return t;
            }
          }, {
            key: "parseEquality",
            value: function parseEquality() {
              var e = this.inputIndex,
                  t = this.parseRelational();

              for (; this.next.type == S.Operator;) {
                var r = this.next.strValue;

                switch (r) {
                  case "==":
                  case "===":
                  case "!=":
                  case "!==":
                    this.advance();
                    var n = this.parseRelational();
                    t = new B(this.span(e), this.sourceSpan(e), r, t, n);
                    continue;
                }

                break;
              }

              return t;
            }
          }, {
            key: "parseRelational",
            value: function parseRelational() {
              var e = this.inputIndex,
                  t = this.parseAdditive();

              for (; this.next.type == S.Operator;) {
                var r = this.next.strValue;

                switch (r) {
                  case "<":
                  case ">":
                  case "<=":
                  case ">=":
                    this.advance();
                    var n = this.parseAdditive();
                    t = new B(this.span(e), this.sourceSpan(e), r, t, n);
                    continue;
                }

                break;
              }

              return t;
            }
          }, {
            key: "parseAdditive",
            value: function parseAdditive() {
              var e = this.inputIndex,
                  t = this.parseMultiplicative();

              for (; this.next.type == S.Operator;) {
                var r = this.next.strValue;

                switch (r) {
                  case "+":
                  case "-":
                    this.advance();
                    var n = this.parseMultiplicative();
                    t = new B(this.span(e), this.sourceSpan(e), r, t, n);
                    continue;
                }

                break;
              }

              return t;
            }
          }, {
            key: "parseMultiplicative",
            value: function parseMultiplicative() {
              var e = this.inputIndex,
                  t = this.parsePrefix();

              for (; this.next.type == S.Operator;) {
                var r = this.next.strValue;

                switch (r) {
                  case "*":
                  case "%":
                  case "/":
                    this.advance();
                    var n = this.parsePrefix();
                    t = new B(this.span(e), this.sourceSpan(e), r, t, n);
                    continue;
                }

                break;
              }

              return t;
            }
          }, {
            key: "parsePrefix",
            value: function parsePrefix() {
              if (this.next.type == S.Operator) {
                var e = this.inputIndex,
                    t = this.next.strValue,
                    r;

                switch (t) {
                  case "+":
                    return this.advance(), r = this.parsePrefix(), _F.createPlus(this.span(e), this.sourceSpan(e), r);

                  case "-":
                    return this.advance(), r = this.parsePrefix(), _F.createMinus(this.span(e), this.sourceSpan(e), r);

                  case "!":
                    return this.advance(), r = this.parsePrefix(), new xe(this.span(e), this.sourceSpan(e), r);
                }
              }

              return this.parseCallChain();
            }
          }, {
            key: "parseCallChain",
            value: function parseCallChain() {
              var e = this.inputIndex,
                  t = this.parsePrimary();

              for (;;) {
                if (this.consumeOptionalCharacter(H)) t = this.parseAccessMemberOrMethodCall(t, e, !1);else if (this.consumeOptionalOperator("?.")) t = this.consumeOptionalCharacter(Ae) ? this.parseKeyedReadOrWrite(t, e, !0) : this.parseAccessMemberOrMethodCall(t, e, !0);else if (this.consumeOptionalCharacter(Ae)) t = this.parseKeyedReadOrWrite(t, e, !1);else if (this.consumeOptionalCharacter(Ee)) {
                  this.rparensExpected++;
                  var r = this.parseCallArguments();
                  this.rparensExpected--, this.expectCharacter(z), t = new Pe(this.span(e), this.sourceSpan(e), t, r);
                } else if (this.consumeOptionalOperator("!")) t = new Se(this.span(e), this.sourceSpan(e), t);else return t;
              }
            }
          }, {
            key: "parsePrimary",
            value: function parsePrimary() {
              var e = this.inputIndex;

              if (this.consumeOptionalCharacter(Ee)) {
                this.rparensExpected++;
                var t = this.parsePipe();
                return this.rparensExpected--, this.expectCharacter(z), t;
              } else {
                if (this.next.isKeywordNull()) return this.advance(), new $(this.span(e), this.sourceSpan(e), null);
                if (this.next.isKeywordUndefined()) return this.advance(), new $(this.span(e), this.sourceSpan(e), void 0);
                if (this.next.isKeywordTrue()) return this.advance(), new $(this.span(e), this.sourceSpan(e), !0);
                if (this.next.isKeywordFalse()) return this.advance(), new $(this.span(e), this.sourceSpan(e), !1);
                if (this.next.isKeywordThis()) return this.advance(), new Ye(this.span(e), this.sourceSpan(e));

                if (this.consumeOptionalCharacter(Ae)) {
                  this.rbracketsExpected++;

                  var _t2 = this.parseExpressionList(re);

                  return this.rbracketsExpected--, this.expectCharacter(re), new ge(this.span(e), this.sourceSpan(e), _t2);
                } else {
                  if (this.next.isCharacter($e)) return this.parseLiteralMap();
                  if (this.next.isIdentifier()) return this.parseAccessMemberOrMethodCall(new Oe(this.span(e), this.sourceSpan(e)), e, !1);

                  if (this.next.isNumber()) {
                    var _t3 = this.next.toNumber();

                    return this.advance(), new $(this.span(e), this.sourceSpan(e), _t3);
                  } else if (this.next.isString()) {
                    var _t4 = this.next.toString();

                    return this.advance(), new $(this.span(e), this.sourceSpan(e), _t4);
                  } else return this.next.isPrivateIdentifier() ? (this._reportErrorForPrivateIdentifier(this.next, null), new K(this.span(e), this.sourceSpan(e))) : this.index >= this.tokens.length ? (this.error("Unexpected end of expression: ".concat(this.input)), new K(this.span(e), this.sourceSpan(e))) : (this.error("Unexpected token ".concat(this.next)), new K(this.span(e), this.sourceSpan(e)));
                }
              }
            }
          }, {
            key: "parseExpressionList",
            value: function parseExpressionList(e) {
              var t = [];

              do {
                if (!this.next.isCharacter(e)) t.push(this.parsePipe());else break;
              } while (this.consumeOptionalCharacter(ee));

              return t;
            }
          }, {
            key: "parseLiteralMap",
            value: function parseLiteralMap() {
              var e = [],
                  t = [],
                  r = this.inputIndex;

              if (this.expectCharacter($e), !this.consumeOptionalCharacter(_e)) {
                this.rbracesExpected++;

                do {
                  var n = this.inputIndex,
                      s = this.next.isString(),
                      a = this.expectIdentifierOrKeywordOrString();
                  if (e.push({
                    key: a,
                    quoted: s
                  }), s) this.expectCharacter(X), t.push(this.parsePipe());else if (this.consumeOptionalCharacter(X)) t.push(this.parsePipe());else {
                    var i = this.span(n),
                        h = this.sourceSpan(n);
                    t.push(new ne(i, h, h, new Oe(i, h), a));
                  }
                } while (this.consumeOptionalCharacter(ee));

                this.rbracesExpected--, this.expectCharacter(_e);
              }

              return new ve(this.span(r), this.sourceSpan(r), e, t);
            }
          }, {
            key: "parseAccessMemberOrMethodCall",
            value: function parseAccessMemberOrMethodCall(e, t, r) {
              var _this25 = this;

              var n = this.inputIndex,
                  s = this.withContext(Z.Writable, function () {
                var i;
                var h = (i = _this25.expectIdentifierOrKeyword()) !== null && i !== void 0 ? i : "";
                return h.length === 0 && _this25.error("Expected identifier for property access", e.span.end), h;
              }),
                  a = this.sourceSpan(n);

              if (this.consumeOptionalCharacter(Ee)) {
                var i = this.inputIndex;
                this.rparensExpected++;
                var h = this.parseCallArguments(),
                    l = this.span(i, this.inputIndex).toAbsolute(this.absoluteOffset);
                this.expectCharacter(z), this.rparensExpected--;
                var P = this.span(t),
                    p = this.sourceSpan(t);
                return r ? new we(P, p, a, e, s, h, l) : new ye(P, p, a, e, s, h, l);
              } else {
                if (r) return this.consumeOptionalOperator("=") ? (this.error("The '?.' operator cannot be used in the assignment"), new K(this.span(t), this.sourceSpan(t))) : new le(this.span(t), this.sourceSpan(t), a, e, s);

                if (this.consumeOptionalOperator("=")) {
                  if (!this.parseAction) return this.error("Bindings cannot contain assignments"), new K(this.span(t), this.sourceSpan(t));

                  var _i = this.parseConditional();

                  return new ue(this.span(t), this.sourceSpan(t), a, e, s, _i);
                } else return new ne(this.span(t), this.sourceSpan(t), a, e, s);
              }
            }
          }, {
            key: "parseCallArguments",
            value: function parseCallArguments() {
              if (this.next.isCharacter(z)) return [];
              var e = [];

              do {
                e.push(this.parsePipe());
              } while (this.consumeOptionalCharacter(ee));

              return e;
            }
          }, {
            key: "expectTemplateBindingKey",
            value: function expectTemplateBindingKey() {
              var e = "",
                  t = !1,
                  r = this.currentAbsoluteOffset;

              do {
                e += this.expectIdentifierOrKeywordOrString(), t = this.consumeOptionalOperator("-"), t && (e += "-");
              } while (t);

              return {
                source: e,
                span: new U(r, r + e.length)
              };
            }
          }, {
            key: "parseTemplateBindings",
            value: function parseTemplateBindings(e) {
              var t = [];

              for (t.push.apply(t, _toConsumableArray(this.parseDirectiveKeywordBindings(e))); this.index < this.tokens.length;) {
                var r = this.parseLetBinding();
                if (r) t.push(r);else {
                  var n = this.expectTemplateBindingKey(),
                      s = this.parseAsBinding(n);
                  s ? t.push(s) : (n.source = e.source + n.source.charAt(0).toUpperCase() + n.source.substring(1), t.push.apply(t, _toConsumableArray(this.parseDirectiveKeywordBindings(n))));
                }
                this.consumeStatementTerminator();
              }

              return new Qe(t, [], this.errors);
            }
          }, {
            key: "parseKeyedReadOrWrite",
            value: function parseKeyedReadOrWrite(e, t, r) {
              var _this26 = this;

              return this.withContext(Z.Writable, function () {
                _this26.rbracketsExpected++;

                var n = _this26.parsePipe();

                if (n instanceof K && _this26.error("Key access cannot be empty"), _this26.rbracketsExpected--, _this26.expectCharacter(re), _this26.consumeOptionalOperator("=")) {
                  if (r) _this26.error("The '?.' operator cannot be used in the assignment");else {
                    var s = _this26.parseConditional();

                    return new de(_this26.span(t), _this26.sourceSpan(t), e, n, s);
                  }
                } else return r ? new pe(_this26.span(t), _this26.sourceSpan(t), e, n) : new he(_this26.span(t), _this26.sourceSpan(t), e, n);
                return new K(_this26.span(t), _this26.sourceSpan(t));
              });
            }
          }, {
            key: "parseDirectiveKeywordBindings",
            value: function parseDirectiveKeywordBindings(e) {
              var t = [];
              this.consumeOptionalCharacter(X);
              var r = this.getDirectiveBoundTarget(),
                  n = this.currentAbsoluteOffset,
                  s = this.parseAsBinding(e);
              s || (this.consumeStatementTerminator(), n = this.currentAbsoluteOffset);
              var a = new U(e.span.start, n);
              return t.push(new Ze(a, e, r)), s && t.push(s), t;
            }
          }, {
            key: "getDirectiveBoundTarget",
            value: function getDirectiveBoundTarget() {
              if (this.next === Ie || this.peekKeywordAs() || this.peekKeywordLet()) return null;
              var e = this.parsePipe(),
                  _e$span = e.span,
                  t = _e$span.start,
                  r = _e$span.end,
                  n = this.input.substring(t, r);
              return new G(e, n, this.location, this.absoluteOffset + t, this.errors);
            }
          }, {
            key: "parseAsBinding",
            value: function parseAsBinding(e) {
              if (!this.peekKeywordAs()) return null;
              this.advance();
              var t = this.expectTemplateBindingKey();
              this.consumeStatementTerminator();
              var r = new U(e.span.start, this.currentAbsoluteOffset);
              return new Re(r, t, e);
            }
          }, {
            key: "parseLetBinding",
            value: function parseLetBinding() {
              if (!this.peekKeywordLet()) return null;
              var e = this.currentAbsoluteOffset;
              this.advance();
              var t = this.expectTemplateBindingKey(),
                  r = null;
              this.consumeOptionalOperator("=") && (r = this.expectTemplateBindingKey()), this.consumeStatementTerminator();
              var n = new U(e, this.currentAbsoluteOffset);
              return new Re(n, t, r);
            }
          }, {
            key: "consumeStatementTerminator",
            value: function consumeStatementTerminator() {
              this.consumeOptionalCharacter(te) || this.consumeOptionalCharacter(ee);
            }
          }, {
            key: "error",
            value: function error(e) {
              var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
              this.errors.push(new ae(e, this.input, this.locationText(t), this.location)), this.skip();
            }
          }, {
            key: "locationText",
            value: function locationText() {
              var e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
              return e == null && (e = this.index), e < this.tokens.length ? "at column ".concat(this.tokens[e].index + 1, " in") : "at the end of the expression";
            }
          }, {
            key: "_reportErrorForPrivateIdentifier",
            value: function _reportErrorForPrivateIdentifier(e, t) {
              var r = "Private identifiers are not supported. Unexpected private identifier: ".concat(e);
              t !== null && (r += ", ".concat(t)), this.error(r);
            }
          }, {
            key: "skip",
            value: function skip() {
              var e = this.next;

              for (; this.index < this.tokens.length && !e.isCharacter(te) && !e.isOperator("|") && (this.rparensExpected <= 0 || !e.isCharacter(z)) && (this.rbracesExpected <= 0 || !e.isCharacter(_e)) && (this.rbracketsExpected <= 0 || !e.isCharacter(re)) && (!(this.context & Z.Writable) || !e.isOperator("="));) {
                this.next.isError() && this.errors.push(new ae(this.next.toString(), this.input, this.locationText(), this.location)), this.advance(), e = this.next;
              }
            }
          }, {
            key: "next",
            get: function get() {
              return this.peek(0);
            }
          }, {
            key: "atEOF",
            get: function get() {
              return this.index >= this.tokens.length;
            }
          }, {
            key: "inputIndex",
            get: function get() {
              return this.atEOF ? this.currentEndIndex : this.next.index + this.offset;
            }
          }, {
            key: "currentEndIndex",
            get: function get() {
              return this.index > 0 ? this.peek(-1).end + this.offset : this.tokens.length === 0 ? this.inputLength + this.offset : this.next.index + this.offset;
            }
          }, {
            key: "currentAbsoluteOffset",
            get: function get() {
              return this.absoluteOffset + this.inputIndex;
            }
          }]);

          return D;
        }(), yt =
        /*#__PURE__*/
        function () {
          function yt() {
            _classCallCheck(this, yt);

            this.errors = [];
          }

          _createClass(yt, [{
            key: "visitImplicitReceiver",
            value: function visitImplicitReceiver(e, t) {}
          }, {
            key: "visitThisReceiver",
            value: function visitThisReceiver(e, t) {}
          }, {
            key: "visitInterpolation",
            value: function visitInterpolation(e, t) {}
          }, {
            key: "visitLiteralPrimitive",
            value: function visitLiteralPrimitive(e, t) {}
          }, {
            key: "visitPropertyRead",
            value: function visitPropertyRead(e, t) {}
          }, {
            key: "visitPropertyWrite",
            value: function visitPropertyWrite(e, t) {}
          }, {
            key: "visitSafePropertyRead",
            value: function visitSafePropertyRead(e, t) {}
          }, {
            key: "visitMethodCall",
            value: function visitMethodCall(e, t) {}
          }, {
            key: "visitSafeMethodCall",
            value: function visitSafeMethodCall(e, t) {}
          }, {
            key: "visitFunctionCall",
            value: function visitFunctionCall(e, t) {}
          }, {
            key: "visitLiteralArray",
            value: function visitLiteralArray(e, t) {
              this.visitAll(e.expressions, t);
            }
          }, {
            key: "visitLiteralMap",
            value: function visitLiteralMap(e, t) {
              this.visitAll(e.values, t);
            }
          }, {
            key: "visitUnary",
            value: function visitUnary(e, t) {}
          }, {
            key: "visitBinary",
            value: function visitBinary(e, t) {}
          }, {
            key: "visitPrefixNot",
            value: function visitPrefixNot(e, t) {}
          }, {
            key: "visitNonNullAssert",
            value: function visitNonNullAssert(e, t) {}
          }, {
            key: "visitConditional",
            value: function visitConditional(e, t) {}
          }, {
            key: "visitPipe",
            value: function visitPipe(e, t) {
              this.errors.push("pipes");
            }
          }, {
            key: "visitKeyedRead",
            value: function visitKeyedRead(e, t) {}
          }, {
            key: "visitKeyedWrite",
            value: function visitKeyedWrite(e, t) {}
          }, {
            key: "visitAll",
            value: function visitAll(e, t) {
              var _this27 = this;

              return e.map(function (r) {
                return r.visit(_this27, t);
              });
            }
          }, {
            key: "visitChain",
            value: function visitChain(e, t) {}
          }, {
            key: "visitQuote",
            value: function visitQuote(e, t) {}
          }, {
            key: "visitSafeKeyedRead",
            value: function visitSafeKeyedRead(e, t) {}
          }]);

          return yt;
        }(), wt =
        /*#__PURE__*/
        function (_et) {
          _inherits(wt, _et);

          function wt() {
            var _this28;

            _classCallCheck(this, wt);

            _this28 = _possibleConstructorReturn(this, _getPrototypeOf(wt).apply(this, arguments)), _this28.errors = [];
            return _this28;
          }

          _createClass(wt, [{
            key: "visitPipe",
            value: function visitPipe() {
              this.errors.push("pipes");
            }
          }]);

          return wt;
        }(et);
      }
    }),
        ft = q({
      "node_modules/angular-estree-parser/lib/utils.js": function node_modulesAngularEstreeParserLibUtilsJs(e) {
        "use strict";

        L(), Object.defineProperty(e, "__esModule", {
          value: !0
        }), e.getLast = e.toLowerCamelCase = e.findBackChar = e.findFrontChar = e.fitSpans = e.getNgType = e.parseNgInterpolation = e.parseNgTemplateBindings = e.parseNgAction = e.parseNgSimpleBinding = e.parseNgBinding = e.NG_PARSE_TEMPLATE_BINDINGS_FAKE_PREFIX = void 0;
        var t = (tt(), be(Je)),
            r = (tr(), be(Yt)),
            n = (br(), be(nr)),
            s = "angular-estree-parser";
        e.NG_PARSE_TEMPLATE_BINDINGS_FAKE_PREFIX = "NgEstreeParser";
        var a = 0,
            i = [s, a];

        function h() {
          return new n.Parser(new r.Lexer());
        }

        function l(o, d) {
          var y = h(),
              _T = T(o, y),
              E = _T.astInput,
              A = _T.comments,
              _d = d(E, y),
              I = _d.ast,
              j = _d.errors;

          return R(j), {
            ast: I,
            comments: A
          };
        }

        function P(o) {
          return l(o, function (d, y) {
            return y.parseBinding.apply(y, [d].concat(i));
          });
        }

        e.parseNgBinding = P;

        function p(o) {
          return l(o, function (d, y) {
            return y.parseSimpleBinding.apply(y, [d].concat(i));
          });
        }

        e.parseNgSimpleBinding = p;

        function x(o) {
          return l(o, function (d, y) {
            return y.parseAction.apply(y, [d].concat(i));
          });
        }

        e.parseNgAction = x;

        function C(o) {
          var d = h(),
              _d$parseTemplateBindi = d.parseTemplateBindings(e.NG_PARSE_TEMPLATE_BINDINGS_FAKE_PREFIX, o, s, a, a),
              y = _d$parseTemplateBindi.templateBindings,
              E = _d$parseTemplateBindi.errors;

          return R(E), y;
        }

        e.parseNgTemplateBindings = C;

        function b(o) {
          var d = h(),
              _T2 = T(o, d),
              y = _T2.astInput,
              E = _T2.comments,
              A = "{{",
              I = "}}",
              _d$parseInterpolation = d.parseInterpolation.apply(d, [A + y + I].concat(i)),
              j = _d$parseInterpolation.ast,
              or = _d$parseInterpolation.errors;

          R(or);
          var gt = j.expressions[0],
              vt = new Set();
          return _(gt, function (ke) {
            vt.has(ke) || (ke.start -= A.length, ke.end -= A.length, vt.add(ke));
          }), {
            ast: gt,
            comments: E
          };
        }

        e.parseNgInterpolation = b;

        function _(o, d) {
          if (!(!o || _typeof(o) != "object")) {
            if (Array.isArray(o)) return o.forEach(function (y) {
              return _(y, d);
            });

            for (var _i2 = 0, _Object$keys = Object.keys(o); _i2 < _Object$keys.length; _i2++) {
              var y = _Object$keys[_i2];
              var E = o[y];
              y === "span" ? d(E) : _(E, d);
            }
          }
        }

        function R(o) {
          if (o.length !== 0) {
            var _o = _slicedToArray(o, 1),
                d = _o[0].message;

            throw new SyntaxError(d.replace(/^Parser Error: | at column \d+ in [^]*$/g, ""));
          }
        }

        function T(o, d) {
          var y = d._commentStart(o);

          return y === null ? {
            astInput: o,
            comments: []
          } : {
            astInput: o.slice(0, y),
            comments: [{
              type: "Comment",
              value: o.slice(y + 2),
              span: {
                start: y,
                end: o.length
              }
            }]
          };
        }

        function O(o) {
          return t.Unary && o instanceof t.Unary ? "Unary" : o instanceof t.Binary ? "Binary" : o instanceof t.BindingPipe ? "BindingPipe" : o instanceof t.Chain ? "Chain" : o instanceof t.Conditional ? "Conditional" : o instanceof t.EmptyExpr ? "EmptyExpr" : o instanceof t.FunctionCall ? "FunctionCall" : o instanceof t.ImplicitReceiver ? "ImplicitReceiver" : o instanceof t.KeyedRead ? "KeyedRead" : o instanceof t.KeyedWrite ? "KeyedWrite" : o instanceof t.LiteralArray ? "LiteralArray" : o instanceof t.LiteralMap ? "LiteralMap" : o instanceof t.LiteralPrimitive ? "LiteralPrimitive" : o instanceof t.MethodCall ? "MethodCall" : o instanceof t.NonNullAssert ? "NonNullAssert" : o instanceof t.PrefixNot ? "PrefixNot" : o instanceof t.PropertyRead ? "PropertyRead" : o instanceof t.PropertyWrite ? "PropertyWrite" : o instanceof t.Quote ? "Quote" : o instanceof t.SafeMethodCall ? "SafeMethodCall" : o instanceof t.SafePropertyRead ? "SafePropertyRead" : o.type;
        }

        e.getNgType = O;

        function N(o, d) {
          var y = o.start,
              E = o.end,
              A = y,
              I = E;

          for (; I !== A && /\s/.test(d[I - 1]);) {
            I--;
          }

          for (; A !== I && /\s/.test(d[A]);) {
            A++;
          }

          return {
            start: A,
            end: I
          };
        }

        function c(o, d) {
          var y = o.start,
              E = o.end,
              A = y,
              I = E;

          for (; I !== d.length && /\s/.test(d[I]);) {
            I++;
          }

          for (; A !== 0 && /\s/.test(d[A - 1]);) {
            A--;
          }

          return {
            start: A,
            end: I
          };
        }

        function g(o, d) {
          return d[o.start - 1] === "(" && d[o.end] === ")" ? {
            start: o.start - 1,
            end: o.end + 1
          } : o;
        }

        function u(o, d, y) {
          var E = 0,
              A = {
            start: o.start,
            end: o.end
          };

          for (;;) {
            var I = c(A, d),
                j = g(I, d);
            if (I.start === j.start && I.end === j.end) break;
            A.start = j.start, A.end = j.end, E++;
          }

          return {
            hasParens: (y ? E - 1 : E) !== 0,
            outerSpan: N(y ? {
              start: A.start + 1,
              end: A.end - 1
            } : A, d),
            innerSpan: N(o, d)
          };
        }

        e.fitSpans = u;

        function v(o, d, y) {
          var E = d;

          for (; !o.test(y[E]);) {
            if (--E < 0) throw new Error("Cannot find front char ".concat(o, " from index ").concat(d, " in ").concat(JSON.stringify(y)));
          }

          return E;
        }

        e.findFrontChar = v;

        function m(o, d, y) {
          var E = d;

          for (; !o.test(y[E]);) {
            if (++E >= y.length) throw new Error("Cannot find back char ".concat(o, " from index ").concat(d, " in ").concat(JSON.stringify(y)));
          }

          return E;
        }

        e.findBackChar = m;

        function f(o) {
          return o.slice(0, 1).toLowerCase() + o.slice(1);
        }

        e.toLowerCamelCase = f;

        function w(o) {
          return o.length === 0 ? void 0 : o[o.length - 1];
        }

        e.getLast = w;
      }
    }),
        ir = q({
      "node_modules/angular-estree-parser/lib/transform.js": function node_modulesAngularEstreeParserLibTransformJs(e) {
        "use strict";

        L(), Object.defineProperty(e, "__esModule", {
          value: !0
        }), e.transformSpan = e.transform = void 0;

        var t = ft(),
            r = function r(s, a) {
          var i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1,
              h = t.getNgType(s);

          switch (h) {
            case "Unary":
              {
                var c = s.operator,
                    g = s.expr,
                    u = l(g);
                return p("UnaryExpression", {
                  prefix: !0,
                  argument: u,
                  operator: c
                }, s.span, {
                  hasParentParens: i
                });
              }

            case "Binary":
              {
                var _c = s.left,
                    _g = s.operation,
                    _u = s.right,
                    v = _u.span.start === _u.span.end,
                    m = _c.span.start === _c.span.end;

                if (v || m) {
                  var o = _c.span.start === _c.span.end ? l(_u) : l(_c);
                  return p("UnaryExpression", {
                    prefix: !0,
                    argument: o,
                    operator: v ? "+" : "-"
                  }, {
                    start: s.span.start,
                    end: N(o)
                  }, {
                    hasParentParens: i
                  });
                }

                var f = l(_c),
                    w = l(_u);
                return p(_g === "&&" || _g === "||" ? "LogicalExpression" : "BinaryExpression", {
                  left: f,
                  right: w,
                  operator: _g
                }, {
                  start: O(f),
                  end: N(w)
                }, {
                  hasParentParens: i
                });
              }

            case "BindingPipe":
              {
                var _c2 = s.exp,
                    _g2 = s.name,
                    _u2 = s.args,
                    _v = l(_c2),
                    _m = b(/\S/, b(/\|/, N(_v)) + 1),
                    _f = p("Identifier", {
                  name: _g2
                }, {
                  start: _m,
                  end: _m + _g2.length
                }),
                    _w = _u2.map(l);

                return p("NGPipeExpression", {
                  left: _v,
                  right: _f,
                  arguments: _w
                }, {
                  start: O(_v),
                  end: N(_w.length === 0 ? _f : t.getLast(_w))
                }, {
                  hasParentParens: i
                });
              }

            case "Chain":
              {
                var _c3 = s.expressions;
                return p("NGChainedExpression", {
                  expressions: _c3.map(l)
                }, s.span, {
                  hasParentParens: i
                });
              }

            case "Comment":
              {
                var _c4 = s.value;
                return p("CommentLine", {
                  value: _c4
                }, s.span, {
                  processSpan: !1
                });
              }

            case "Conditional":
              {
                var _c5 = s.condition,
                    _g3 = s.trueExp,
                    _u3 = s.falseExp,
                    _v2 = l(_c5),
                    _m2 = l(_g3),
                    _f2 = l(_u3);

                return p("ConditionalExpression", {
                  test: _v2,
                  consequent: _m2,
                  alternate: _f2
                }, {
                  start: O(_v2),
                  end: N(_f2)
                }, {
                  hasParentParens: i
                });
              }

            case "EmptyExpr":
              return p("NGEmptyExpression", {}, s.span, {
                hasParentParens: i
              });

            case "FunctionCall":
              {
                var _c6 = s.target,
                    _g4 = s.args,
                    _u4 = _g4.length === 1 ? [P(_g4[0])] : _g4.map(l),
                    _v3 = l(_c6);

                return p("CallExpression", {
                  callee: _v3,
                  arguments: _u4
                }, {
                  start: O(_v3),
                  end: s.span.end
                }, {
                  hasParentParens: i
                });
              }

            case "ImplicitReceiver":
              return p("ThisExpression", {}, s.span, {
                hasParentParens: i
              });

            case "KeyedRead":
              {
                var _c7 = s.key,
                    _g5 = Object.prototype.hasOwnProperty.call(s, "receiver") ? s.receiver : s.obj,
                    _u5 = l(_c7);

                return x(_g5, _u5, {
                  computed: !0,
                  optional: !1
                }, {
                  end: s.span.end,
                  hasParentParens: i
                });
              }

            case "LiteralArray":
              {
                var _c8 = s.expressions;
                return p("ArrayExpression", {
                  elements: _c8.map(l)
                }, s.span, {
                  hasParentParens: i
                });
              }

            case "LiteralMap":
              {
                var _c9 = s.keys,
                    _g6 = s.values,
                    _u6 = _g6.map(function (m) {
                  return l(m);
                }),
                    _v4 = _c9.map(function (m, f) {
                  var w = m.key,
                      o = m.quoted,
                      d = _u6[f],
                      y = b(/\S/, f === 0 ? s.span.start + 1 : b(/,/, N(_u6[f - 1])) + 1),
                      E = C(/\S/, C(/:/, O(d) - 1) - 1) + 1,
                      A = {
                    start: y,
                    end: E
                  },
                      I = o ? p("StringLiteral", {
                    value: w
                  }, A) : p("Identifier", {
                    name: w
                  }, A),
                      j = I.end < I.start;
                  return p("ObjectProperty", {
                    key: I,
                    value: d,
                    method: !1,
                    shorthand: j,
                    computed: !1
                  }, {
                    start: O(I),
                    end: N(d)
                  });
                });

                return p("ObjectExpression", {
                  properties: _v4
                }, s.span, {
                  hasParentParens: i
                });
              }

            case "LiteralPrimitive":
              {
                var _c10 = s.value;

                switch (_typeof(_c10)) {
                  case "boolean":
                    return p("BooleanLiteral", {
                      value: _c10
                    }, s.span, {
                      hasParentParens: i
                    });

                  case "number":
                    return p("NumericLiteral", {
                      value: _c10
                    }, s.span, {
                      hasParentParens: i
                    });

                  case "object":
                    return p("NullLiteral", {}, s.span, {
                      hasParentParens: i
                    });

                  case "string":
                    return p("StringLiteral", {
                      value: _c10
                    }, s.span, {
                      hasParentParens: i
                    });

                  case "undefined":
                    return p("Identifier", {
                      name: "undefined"
                    }, s.span, {
                      hasParentParens: i
                    });

                  default:
                    throw new Error("Unexpected LiteralPrimitive value type ".concat(_typeof(_c10)));
                }
              }

            case "MethodCall":
            case "SafeMethodCall":
              {
                var _c11 = h === "SafeMethodCall",
                    _g7 = s.receiver,
                    _u7 = s.name,
                    _v5 = s.args,
                    _m3 = _v5.length === 1 ? [P(_v5[0])] : _v5.map(l),
                    _f3 = C(/\S/, C(/\(/, (_m3.length === 0 ? C(/\)/, s.span.end - 1) : O(_m3[0])) - 1) - 1) + 1,
                    _w2 = p("Identifier", {
                  name: _u7
                }, {
                  start: _f3 - _u7.length,
                  end: _f3
                }),
                    _o2 = x(_g7, _w2, {
                  computed: !1,
                  optional: _c11
                }),
                    d = R(_o2);

                return p(_c11 || d ? "OptionalCallExpression" : "CallExpression", {
                  callee: _o2,
                  arguments: _m3
                }, {
                  start: O(_o2),
                  end: s.span.end
                }, {
                  hasParentParens: i
                });
              }

            case "NonNullAssert":
              {
                var _c12 = s.expression,
                    _g8 = l(_c12);

                return p("TSNonNullExpression", {
                  expression: _g8
                }, {
                  start: O(_g8),
                  end: s.span.end
                }, {
                  hasParentParens: i
                });
              }

            case "PrefixNot":
              {
                var _c13 = s.expression,
                    _g9 = l(_c13);

                return p("UnaryExpression", {
                  prefix: !0,
                  operator: "!",
                  argument: _g9
                }, {
                  start: s.span.start,
                  end: N(_g9)
                }, {
                  hasParentParens: i
                });
              }

            case "PropertyRead":
            case "SafePropertyRead":
              {
                var _c14 = h === "SafePropertyRead",
                    _g10 = s.receiver,
                    _u8 = s.name,
                    _v6 = C(/\S/, s.span.end - 1) + 1,
                    _m4 = p("Identifier", {
                  name: _u8
                }, {
                  start: _v6 - _u8.length,
                  end: _v6
                }, _(_g10) ? {
                  hasParentParens: i
                } : {});

                return x(_g10, _m4, {
                  computed: !1,
                  optional: _c14
                }, {
                  hasParentParens: i
                });
              }

            case "KeyedWrite":
              {
                var _c15 = s.key,
                    _g11 = s.value,
                    _u9 = Object.prototype.hasOwnProperty.call(s, "receiver") ? s.receiver : s.obj,
                    _v7 = l(_c15),
                    _m5 = l(_g11),
                    _f4 = x(_u9, _v7, {
                  computed: !0,
                  optional: !1
                }, {
                  end: b(/\]/, N(_v7)) + 1
                });

                return p("AssignmentExpression", {
                  left: _f4,
                  operator: "=",
                  right: _m5
                }, {
                  start: O(_f4),
                  end: N(_m5)
                }, {
                  hasParentParens: i
                });
              }

            case "PropertyWrite":
              {
                var _c16 = s.receiver,
                    _g12 = s.name,
                    _u10 = s.value,
                    _v8 = l(_u10),
                    _m6 = C(/\S/, C(/=/, O(_v8) - 1) - 1) + 1,
                    _f5 = p("Identifier", {
                  name: _g12
                }, {
                  start: _m6 - _g12.length,
                  end: _m6
                }),
                    _w3 = x(_c16, _f5, {
                  computed: !1,
                  optional: !1
                });

                return p("AssignmentExpression", {
                  left: _w3,
                  operator: "=",
                  right: _v8
                }, {
                  start: O(_w3),
                  end: N(_v8)
                }, {
                  hasParentParens: i
                });
              }

            case "Quote":
              {
                var _c17 = s.prefix,
                    _g13 = s.uninterpretedExpression;
                return p("NGQuotedExpression", {
                  prefix: _c17,
                  value: _g13
                }, s.span, {
                  hasParentParens: i
                });
              }

            default:
              throw new Error("Unexpected node ".concat(h));
          }

          function l(c) {
            return e.transform(c, a);
          }

          function P(c) {
            return e.transform(c, a, !0);
          }

          function p(c, g, u) {
            var _ref = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {},
                _ref$processSpan = _ref.processSpan,
                v = _ref$processSpan === void 0 ? !0 : _ref$processSpan,
                _ref$hasParentParens = _ref.hasParentParens,
                m = _ref$hasParentParens === void 0 ? !1 : _ref$hasParentParens,
                f = Object.assign(Object.assign({
              type: c
            }, n(u, a, v, m)), g);

            switch (c) {
              case "Identifier":
                {
                  var _w4 = f;
                  _w4.loc.identifierName = _w4.name;
                  break;
                }

              case "NumericLiteral":
                {
                  var _w5 = f;
                  _w5.extra = Object.assign(Object.assign({}, _w5.extra), {
                    raw: a.text.slice(_w5.start, _w5.end),
                    rawValue: _w5.value
                  });
                  break;
                }

              case "StringLiteral":
                {
                  var _w6 = f;
                  _w6.extra = Object.assign(Object.assign({}, _w6.extra), {
                    raw: a.text.slice(_w6.start, _w6.end),
                    rawValue: _w6.value
                  });
                  break;
                }
            }

            return f;
          }

          function x(c, g, u) {
            var _ref2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {},
                _ref2$end = _ref2.end,
                v = _ref2$end === void 0 ? N(g) : _ref2$end,
                _ref2$hasParentParens = _ref2.hasParentParens,
                m = _ref2$hasParentParens === void 0 ? !1 : _ref2$hasParentParens;

            if (_(c) || c.span.start === g.start) return g;
            var f = l(c),
                w = R(f);
            return p(u.optional || w ? "OptionalMemberExpression" : "MemberExpression", Object.assign({
              object: f,
              property: g,
              computed: u.computed
            }, u.optional ? {
              optional: !0
            } : w ? {
              optional: !1
            } : null), {
              start: O(f),
              end: v
            }, {
              hasParentParens: m
            });
          }

          function C(c, g) {
            return t.findFrontChar(c, g, a.text);
          }

          function b(c, g) {
            return t.findBackChar(c, g, a.text);
          }

          function _(c) {
            return c.span.start >= c.span.end || /^\s+$/.test(a.text.slice(c.span.start, c.span.end));
          }

          function R(c) {
            return (c.type === "OptionalCallExpression" || c.type === "OptionalMemberExpression") && !T(c);
          }

          function T(c) {
            return c.extra && c.extra.parenthesized;
          }

          function O(c) {
            return T(c) ? c.extra.parenStart : c.start;
          }

          function N(c) {
            return T(c) ? c.extra.parenEnd : c.end;
          }
        };

        e.transform = r;

        function n(s, a) {
          var i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1,
              h = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !1;

          if (!i) {
            var x = s.start,
                C = s.end;
            return {
              start: x,
              end: C,
              loc: {
                start: a.locator.locationForIndex(x),
                end: a.locator.locationForIndex(C)
              }
            };
          }

          var _t$fitSpans = t.fitSpans(s, a.text, h),
              l = _t$fitSpans.outerSpan,
              P = _t$fitSpans.innerSpan,
              p = _t$fitSpans.hasParens;

          return Object.assign({
            start: P.start,
            end: P.end,
            loc: {
              start: a.locator.locationForIndex(P.start),
              end: a.locator.locationForIndex(P.end)
            }
          }, p && {
            extra: {
              parenthesized: !0,
              parenStart: l.start,
              parenEnd: l.end
            }
          });
        }

        e.transformSpan = n;
      }
    }),
        Lr = q({
      "node_modules/angular-estree-parser/lib/transform-microsyntax.js": function node_modulesAngularEstreeParserLibTransformMicrosyntaxJs(e) {
        "use strict";

        L(), Object.defineProperty(e, "__esModule", {
          value: !0
        }), e.transformTemplateBindings = void 0;
        var t = (tt(), be(Je)),
            r = ir(),
            n = ft();

        function s(a, i) {
          a.forEach(N);

          var _a = _slicedToArray(a, 1),
              h = _a[0],
              l = h.key,
              P = i.text.slice(h.sourceSpan.start, h.sourceSpan.end).trim().length === 0 ? a.slice(1) : a,
              p = [],
              x = null;

          for (var u = 0; u < P.length; u++) {
            var v = P[u];

            if (x && T(x) && O(v) && v.value && v.value.source === x.key.source) {
              (function () {
                var m = _("NGMicrosyntaxKey", {
                  name: v.key.source
                }, v.key.span),
                    f = function f(d, y) {
                  return Object.assign(Object.assign({}, d), r.transformSpan({
                    start: d.start,
                    end: y
                  }, i));
                },
                    w = function w(d) {
                  return Object.assign(Object.assign({}, f(d, m.end)), {
                    alias: m
                  });
                },
                    o = p.pop();

                if (o.type === "NGMicrosyntaxExpression") p.push(w(o));else if (o.type === "NGMicrosyntaxKeyedExpression") {
                  var d = w(o.expression);
                  p.push(f(Object.assign(Object.assign({}, o), {
                    expression: d
                  }), d.end));
                } else throw new Error("Unexpected type ".concat(o.type));
              })();
            } else p.push(C(v, u));

            x = v;
          }

          return _("NGMicrosyntax", {
            body: p
          }, p.length === 0 ? a[0].sourceSpan : {
            start: p[0].start,
            end: p[p.length - 1].end
          });

          function C(u, v) {
            if (T(u)) {
              var m = u.key,
                  f = u.value;
              return f ? v === 0 ? _("NGMicrosyntaxExpression", {
                expression: b(f.ast),
                alias: null
              }, f.sourceSpan) : _("NGMicrosyntaxKeyedExpression", {
                key: _("NGMicrosyntaxKey", {
                  name: R(m.source)
                }, m.span),
                expression: _("NGMicrosyntaxExpression", {
                  expression: b(f.ast),
                  alias: null
                }, f.sourceSpan)
              }, {
                start: m.span.start,
                end: f.sourceSpan.end
              }) : _("NGMicrosyntaxKey", {
                name: R(m.source)
              }, m.span);
            } else {
              var _m7 = u.key,
                  _f6 = u.sourceSpan;

              if (/^let\s$/.test(i.text.slice(_f6.start, _f6.start + 4))) {
                var o = u.value;
                return _("NGMicrosyntaxLet", {
                  key: _("NGMicrosyntaxKey", {
                    name: _m7.source
                  }, _m7.span),
                  value: o ? _("NGMicrosyntaxKey", {
                    name: o.source
                  }, o.span) : null
                }, {
                  start: _f6.start,
                  end: o ? o.span.end : _m7.span.end
                });
              } else {
                var _o3 = g(u);

                return _("NGMicrosyntaxAs", {
                  key: _("NGMicrosyntaxKey", {
                    name: _o3.source
                  }, _o3.span),
                  alias: _("NGMicrosyntaxKey", {
                    name: _m7.source
                  }, _m7.span)
                }, {
                  start: _o3.span.start,
                  end: _m7.span.end
                });
              }
            }
          }

          function b(u) {
            return r.transform(u, i);
          }

          function _(u, v, m) {
            var f = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !0;
            return Object.assign(Object.assign({
              type: u
            }, r.transformSpan(m, i, f)), v);
          }

          function R(u) {
            return n.toLowerCamelCase(u.slice(l.source.length));
          }

          function T(u) {
            return u instanceof t.ExpressionBinding;
          }

          function O(u) {
            return u instanceof t.VariableBinding;
          }

          function N(u) {
            c(u.key.span), O(u) && u.value && c(u.value.span);
          }

          function c(u) {
            if (i.text[u.start] !== '"' && i.text[u.start] !== "'") return;
            var v = i.text[u.start],
                m = !1;

            for (var f = u.start + 1; f < i.text.length; f++) {
              switch (i.text[f]) {
                case v:
                  if (!m) {
                    u.end = f + 1;
                    return;
                  }

                default:
                  m = !1;
                  break;

                case "\\":
                  m = !m;
                  break;
              }
            }
          }

          function g(u) {
            if (!u.value || u.value.source !== n.NG_PARSE_TEMPLATE_BINDINGS_FAKE_PREFIX) return u.value;
            var v = n.findBackChar(/\S/, u.sourceSpan.start, i.text);
            return {
              source: "$implicit",
              span: {
                start: v,
                end: v
              }
            };
          }
        }

        e.transformTemplateBindings = s;
      }
    }),
        Rr = q({
      "node_modules/angular-estree-parser/lib/index.js": function node_modulesAngularEstreeParserLibIndexJs(e) {
        "use strict";

        L(), Object.defineProperty(e, "__esModule", {
          value: !0
        }), e.parseTemplateBindings = e.parseAction = e.parseInterpolation = e.parseSimpleBinding = e.parseBinding = void 0;
        var t = gr(),
            r = ir(),
            n = Lr(),
            s = ft();

        function a(x, C) {
          var _C2 = C(x),
              b = _C2.ast,
              _ = _C2.comments,
              R = new t.Context(x),
              T = function T(N) {
            return r.transform(N, R);
          },
              O = T(b);

          return O.comments = _.map(T), O;
        }

        function i(x) {
          return a(x, s.parseNgBinding);
        }

        e.parseBinding = i;

        function h(x) {
          return a(x, s.parseNgSimpleBinding);
        }

        e.parseSimpleBinding = h;

        function l(x) {
          return a(x, s.parseNgInterpolation);
        }

        e.parseInterpolation = l;

        function P(x) {
          return a(x, s.parseNgAction);
        }

        e.parseAction = P;

        function p(x) {
          return n.transformTemplateBindings(s.parseNgTemplateBindings(x), new t.Context(x));
        }

        e.parseTemplateBindings = p;
      }
    });
    L();

    var _dr = dr(),
        Tr = _dr.locStart,
        $r = _dr.locEnd;

    function Ne(e) {
      return {
        astFormat: "estree",
        parse: function parse(r, n, s) {
          var a = Rr(),
              i = e(r, a);
          return {
            type: "NGRoot",
            node: s.parser === "__ng_action" && i.type !== "NGChainedExpression" ? Object.assign(Object.assign({}, i), {}, {
              type: "NGChainedExpression",
              expressions: [i]
            }) : i
          };
        },
        locStart: Tr,
        locEnd: $r
      };
    }

    ar.exports = {
      parsers: {
        __ng_action: Ne(function (e, t) {
          return t.parseAction(e);
        }),
        __ng_binding: Ne(function (e, t) {
          return t.parseBinding(e);
        }),
        __ng_interpolation: Ne(function (e, t) {
          return t.parseInterpolation(e);
        }),
        __ng_directive: Ne(function (e, t) {
          return t.parseTemplateBindings(e);
        })
      }
    };
  });
  return Br();
});