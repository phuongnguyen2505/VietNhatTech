"use strict"; // dist/_third-party.js.cjs.js

function _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

var __getOwnPropNames = Object.getOwnPropertyNames;

var __commonJS = function __commonJS(cb, mod) {
  return function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = {
      exports: {}
    }).exports, mod), mod.exports;
  };
};

var require_resolve_from = __commonJS({
  "node_modules/import-fresh/node_modules/resolve-from/index.js": function node_modulesImportFreshNode_modulesResolveFromIndexJs(exports2, module2) {
    "use strict";

    var path = require("path");

    var Module = require("module");

    var fs = require("fs");

    var resolveFrom = function resolveFrom(fromDir, moduleId, silent) {
      if (typeof fromDir !== "string") {
        throw new TypeError("Expected `fromDir` to be of type `string`, got `".concat(_typeof(fromDir), "`"));
      }

      if (typeof moduleId !== "string") {
        throw new TypeError("Expected `moduleId` to be of type `string`, got `".concat(_typeof(moduleId), "`"));
      }

      try {
        fromDir = fs.realpathSync(fromDir);
      } catch (err) {
        if (err.code === "ENOENT") {
          fromDir = path.resolve(fromDir);
        } else if (silent) {
          return null;
        } else {
          throw err;
        }
      }

      var fromFile = path.join(fromDir, "noop.js");

      var resolveFileName = function resolveFileName() {
        return Module._resolveFilename(moduleId, {
          id: fromFile,
          filename: fromFile,
          paths: Module._nodeModulePaths(fromDir)
        });
      };

      if (silent) {
        try {
          return resolveFileName();
        } catch (err) {
          return null;
        }
      }

      return resolveFileName();
    };

    module2.exports = function (fromDir, moduleId) {
      return resolveFrom(fromDir, moduleId);
    };

    module2.exports.silent = function (fromDir, moduleId) {
      return resolveFrom(fromDir, moduleId, true);
    };
  }
});

var require_parent_module = __commonJS({
  "scripts/build/shims/parent-module.cjs": function scriptsBuildShimsParentModuleCjs(exports2, module2) {
    "use strict";

    module2.exports = function (file) {
      return file;
    };
  }
});

var require_import_fresh = __commonJS({
  "node_modules/import-fresh/index.js": function node_modulesImportFreshIndexJs(exports2, module2) {
    "use strict";

    var path = require("path");

    var resolveFrom = require_resolve_from();
    var parentModule = require_parent_module();

    module2.exports = function (moduleId) {
      if (typeof moduleId !== "string") {
        throw new TypeError("Expected a string");
      }

      var parentPath = parentModule(__filename);
      var cwd = parentPath ? path.dirname(parentPath) : __dirname;
      var filePath = resolveFrom(cwd, moduleId);
      var oldModule = require.cache[filePath];

      if (oldModule && oldModule.parent) {
        var i = oldModule.parent.children.length;

        while (i--) {
          if (oldModule.parent.children[i].id === filePath) {
            oldModule.parent.children.splice(i, 1);
          }
        }
      }

      delete require.cache[filePath];
      var parent = require.cache[parentPath];
      return parent === void 0 ? require(filePath) : parent.require(filePath);
    };
  }
});

var require_is_arrayish = __commonJS({
  "node_modules/is-arrayish/index.js": function node_modulesIsArrayishIndexJs(exports2, module2) {
    "use strict";

    module2.exports = function isArrayish(obj) {
      if (!obj) {
        return false;
      }

      return obj instanceof Array || Array.isArray(obj) || obj.length >= 0 && obj.splice instanceof Function;
    };
  }
});

var require_error_ex = __commonJS({
  "node_modules/error-ex/index.js": function node_modulesErrorExIndexJs(exports2, module2) {
    "use strict";

    var util = require("util");

    var isArrayish = require_is_arrayish();

    var errorEx = function errorEx2(name, properties) {
      if (!name || name.constructor !== String) {
        properties = name || {};
        name = Error.name;
      }

      var errorExError = function ErrorEXError(message) {
        if (!this) {
          return new ErrorEXError(message);
        }

        message = message instanceof Error ? message.message : message || this.message;
        Error.call(this, message);
        Error.captureStackTrace(this, errorExError);
        this.name = name;
        Object.defineProperty(this, "message", {
          configurable: true,
          enumerable: false,
          get: function get() {
            var newMessage = message.split(/\r?\n/g);

            for (var key in properties) {
              if (!properties.hasOwnProperty(key)) {
                continue;
              }

              var modifier = properties[key];

              if ("message" in modifier) {
                newMessage = modifier.message(this[key], newMessage) || newMessage;

                if (!isArrayish(newMessage)) {
                  newMessage = [newMessage];
                }
              }
            }

            return newMessage.join("\n");
          },
          set: function set(v) {
            message = v;
          }
        });
        var overwrittenStack = null;
        var stackDescriptor = Object.getOwnPropertyDescriptor(this, "stack");
        var stackGetter = stackDescriptor.get;
        var stackValue = stackDescriptor.value;
        delete stackDescriptor.value;
        delete stackDescriptor.writable;

        stackDescriptor.set = function (newstack) {
          overwrittenStack = newstack;
        };

        stackDescriptor.get = function () {
          var stack = (overwrittenStack || (stackGetter ? stackGetter.call(this) : stackValue)).split(/\r?\n+/g);

          if (!overwrittenStack) {
            stack[0] = this.name + ": " + this.message;
          }

          var lineCount = 1;

          for (var key in properties) {
            if (!properties.hasOwnProperty(key)) {
              continue;
            }

            var modifier = properties[key];

            if ("line" in modifier) {
              var line = modifier.line(this[key]);

              if (line) {
                stack.splice(lineCount++, 0, "    " + line);
              }
            }

            if ("stack" in modifier) {
              modifier.stack(this[key], stack);
            }
          }

          return stack.join("\n");
        };

        Object.defineProperty(this, "stack", stackDescriptor);
      };

      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(errorExError.prototype, Error.prototype);
        Object.setPrototypeOf(errorExError, Error);
      } else {
        util.inherits(errorExError, Error);
      }

      return errorExError;
    };

    errorEx.append = function (str, def) {
      return {
        message: function message(v, _message) {
          v = v || def;

          if (v) {
            _message[0] += " " + str.replace("%s", v.toString());
          }

          return _message;
        }
      };
    };

    errorEx.line = function (str, def) {
      return {
        line: function line(v) {
          v = v || def;

          if (v) {
            return str.replace("%s", v.toString());
          }

          return null;
        }
      };
    };

    module2.exports = errorEx;
  }
});

var require_json_parse_even_better_errors = __commonJS({
  "node_modules/json-parse-even-better-errors/index.js": function node_modulesJsonParseEvenBetterErrorsIndexJs(exports2, module2) {
    "use strict";

    var hexify = function hexify(_char) {
      var h = _char.charCodeAt(0).toString(16).toUpperCase();

      return "0x" + (h.length % 2 ? "0" : "") + h;
    };

    var parseError = function parseError(e, txt, context) {
      if (!txt) {
        return {
          message: e.message + " while parsing empty string",
          position: 0
        };
      }

      var badToken = e.message.match(/^Unexpected token (.) .*position\s+(\d+)/i);
      var errIdx = badToken ? +badToken[2] : e.message.match(/^Unexpected end of JSON.*/i) ? txt.length - 1 : null;
      var msg = badToken ? e.message.replace(/^Unexpected token ./, "Unexpected token ".concat(JSON.stringify(badToken[1]), " (").concat(hexify(badToken[1]), ")")) : e.message;

      if (errIdx !== null && errIdx !== void 0) {
        var start = errIdx <= context ? 0 : errIdx - context;
        var end = errIdx + context >= txt.length ? txt.length : errIdx + context;
        var slice = (start === 0 ? "" : "...") + txt.slice(start, end) + (end === txt.length ? "" : "...");
        var near = txt === slice ? "" : "near ";
        return {
          message: msg + " while parsing ".concat(near).concat(JSON.stringify(slice)),
          position: errIdx
        };
      } else {
        return {
          message: msg + " while parsing '".concat(txt.slice(0, context * 2), "'"),
          position: 0
        };
      }
    };

    var JSONParseError =
    /*#__PURE__*/
    function (_SyntaxError) {
      _inherits(JSONParseError, _SyntaxError);

      function JSONParseError(er, txt, context, caller) {
        var _this;

        _classCallCheck(this, JSONParseError);

        context = context || 20;
        var metadata = parseError(er, txt, context);
        _this = _possibleConstructorReturn(this, _getPrototypeOf(JSONParseError).call(this, metadata.message));
        Object.assign(_assertThisInitialized(_this), metadata);
        _this.code = "EJSONPARSE";
        _this.systemError = er;
        Error.captureStackTrace(_assertThisInitialized(_this), caller || _this.constructor);
        return _this;
      }

      _createClass(JSONParseError, [{
        key: "name",
        get: function get() {
          return this.constructor.name;
        },
        set: function set(n) {}
      }, {
        key: Symbol.toStringTag,
        get: function get() {
          return this.constructor.name;
        }
      }]);

      return JSONParseError;
    }(_wrapNativeSuper(SyntaxError));

    var kIndent = Symbol["for"]("indent");
    var kNewline = Symbol["for"]("newline");
    var formatRE = /^\s*[{\[]((?:\r?\n)+)([\s\t]*)/;
    var emptyRE = /^(?:\{\}|\[\])((?:\r?\n)+)?$/;

    var parseJson = function parseJson(txt, reviver, context) {
      var parseText = stripBOM(txt);
      context = context || 20;

      try {
        var _ref = parseText.match(emptyRE) || parseText.match(formatRE) || [, "", ""],
            _ref2 = _slicedToArray(_ref, 3),
            _ref2$ = _ref2[1],
            newline = _ref2$ === void 0 ? "\n" : _ref2$,
            _ref2$2 = _ref2[2],
            indent = _ref2$2 === void 0 ? "  " : _ref2$2;

        var result = JSON.parse(parseText, reviver);

        if (result && _typeof(result) === "object") {
          result[kNewline] = newline;
          result[kIndent] = indent;
        }

        return result;
      } catch (e) {
        if (typeof txt !== "string" && !Buffer.isBuffer(txt)) {
          var isEmptyArray = Array.isArray(txt) && txt.length === 0;
          throw Object.assign(new TypeError("Cannot parse ".concat(isEmptyArray ? "an empty array" : String(txt))), {
            code: "EJSONPARSE",
            systemError: e
          });
        }

        throw new JSONParseError(e, parseText, context, parseJson);
      }
    };

    var stripBOM = function stripBOM(txt) {
      return String(txt).replace(/^\uFEFF/, "");
    };

    module2.exports = parseJson;
    parseJson.JSONParseError = JSONParseError;

    parseJson.noExceptions = function (txt, reviver) {
      try {
        return JSON.parse(stripBOM(txt), reviver);
      } catch (e) {}
    };
  }
});

var require_build = __commonJS({
  "node_modules/parse-json/node_modules/lines-and-columns/build/index.js": function node_modulesParseJsonNode_modulesLinesAndColumnsBuildIndexJs(exports2) {
    "use strict";

    exports2.__esModule = true;
    exports2.LinesAndColumns = void 0;
    var LF = "\n";
    var CR = "\r";

    var LinesAndColumns = function () {
      function LinesAndColumns2(string) {
        this.string = string;
        var offsets = [0];

        for (var offset = 0; offset < string.length;) {
          switch (string[offset]) {
            case LF:
              offset += LF.length;
              offsets.push(offset);
              break;

            case CR:
              offset += CR.length;

              if (string[offset] === LF) {
                offset += LF.length;
              }

              offsets.push(offset);
              break;

            default:
              offset++;
              break;
          }
        }

        this.offsets = offsets;
      }

      LinesAndColumns2.prototype.locationForIndex = function (index) {
        if (index < 0 || index > this.string.length) {
          return null;
        }

        var line = 0;
        var offsets = this.offsets;

        while (offsets[line + 1] <= index) {
          line++;
        }

        var column = index - offsets[line];
        return {
          line: line,
          column: column
        };
      };

      LinesAndColumns2.prototype.indexForLocation = function (location) {
        var line = location.line,
            column = location.column;

        if (line < 0 || line >= this.offsets.length) {
          return null;
        }

        if (column < 0 || column > this.lengthOfLine(line)) {
          return null;
        }

        return this.offsets[line] + column;
      };

      LinesAndColumns2.prototype.lengthOfLine = function (line) {
        var offset = this.offsets[line];
        var nextOffset = line === this.offsets.length - 1 ? this.string.length : this.offsets[line + 1];
        return nextOffset - offset;
      };

      return LinesAndColumns2;
    }();

    exports2.LinesAndColumns = LinesAndColumns;
    exports2["default"] = LinesAndColumns;
  }
});

var require_js_tokens = __commonJS({
  "node_modules/js-tokens/index.js": function node_modulesJsTokensIndexJs(exports2) {
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2["default"] = /((['"])(?:(?!\2|\\).|\\(?:\r\n|[\s\S]))*(\2)?|`(?:[^`\\$]|\\[\s\S]|\$(?!\{)|\$\{(?:[^{}]|\{[^}]*\}?)*\}?)*(`)?)|(\/\/.*)|(\/\*(?:[^*]|\*(?!\/))*(\*\/)?)|(\/(?!\*)(?:\[(?:(?![\]\\]).|\\.)*\]|(?![\/\]\\]).|\\.)+\/(?:(?!\s*(?:\b|[\u0080-\uFFFF$\\'"~({]|[+\-!](?!=)|\.?\d))|[gmiyus]{1,6}\b(?![\u0080-\uFFFF$\\]|\s*(?:[+\-*%&|^<>!=?({]|\/(?![\/*])))))|(0[xX][\da-fA-F]+|0[oO][0-7]+|0[bB][01]+|(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?)|((?!\d)(?:(?!\s)[$\w\u0080-\uFFFF]|\\u[\da-fA-F]{4}|\\u\{[\da-fA-F]+\})+)|(--|\+\+|&&|\|\||=>|\.{3}|(?:[+\-\/%&|^]|\*{1,2}|<{1,2}|>{1,3}|!=?|={1,2})=?|[?~.,:;[\](){}])|(\s+)|(^$|[\s\S])/g;

    exports2.matchToToken = function (match) {
      var token = {
        type: "invalid",
        value: match[0],
        closed: void 0
      };
      if (match[1]) token.type = "string", token.closed = !!(match[3] || match[4]);else if (match[5]) token.type = "comment";else if (match[6]) token.type = "comment", token.closed = !!match[7];else if (match[8]) token.type = "regex";else if (match[9]) token.type = "number";else if (match[10]) token.type = "name";else if (match[11]) token.type = "punctuator";else if (match[12]) token.type = "whitespace";
      return token;
    };
  }
});

var require_identifier = __commonJS({
  "node_modules/@babel/helper-validator-identifier/lib/identifier.js": function node_modulesBabelHelperValidatorIdentifierLibIdentifierJs(exports2) {
    "use strict";

    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.isIdentifierChar = isIdentifierChar;
    exports2.isIdentifierName = isIdentifierName;
    exports2.isIdentifierStart = isIdentifierStart;
    var nonASCIIidentifierStartChars = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC";
    var nonASCIIidentifierChars = "\u200C\u200D\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3C\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0CF3\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECE\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u180F-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1ABF-\u1ACE\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DFF\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F";
    var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
    var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
    nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
    var astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 4026, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 757, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938, 6, 4191];
    var astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 81, 2, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 9, 5351, 0, 7, 14, 13835, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 983, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];

    function isInAstralSet(code, set) {
      var pos = 65536;

      for (var i = 0, length = set.length; i < length; i += 2) {
        pos += set[i];
        if (pos > code) return false;
        pos += set[i + 1];
        if (pos >= code) return true;
      }

      return false;
    }

    function isIdentifierStart(code) {
      if (code < 65) return code === 36;
      if (code <= 90) return true;
      if (code < 97) return code === 95;
      if (code <= 122) return true;

      if (code <= 65535) {
        return code >= 170 && nonASCIIidentifierStart.test(String.fromCharCode(code));
      }

      return isInAstralSet(code, astralIdentifierStartCodes);
    }

    function isIdentifierChar(code) {
      if (code < 48) return code === 36;
      if (code < 58) return true;
      if (code < 65) return false;
      if (code <= 90) return true;
      if (code < 97) return code === 95;
      if (code <= 122) return true;

      if (code <= 65535) {
        return code >= 170 && nonASCIIidentifier.test(String.fromCharCode(code));
      }

      return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);
    }

    function isIdentifierName(name) {
      var isFirst = true;

      for (var i = 0; i < name.length; i++) {
        var cp = name.charCodeAt(i);

        if ((cp & 64512) === 55296 && i + 1 < name.length) {
          var trail = name.charCodeAt(++i);

          if ((trail & 64512) === 56320) {
            cp = 65536 + ((cp & 1023) << 10) + (trail & 1023);
          }
        }

        if (isFirst) {
          isFirst = false;

          if (!isIdentifierStart(cp)) {
            return false;
          }
        } else if (!isIdentifierChar(cp)) {
          return false;
        }
      }

      return !isFirst;
    }
  }
});

var require_keyword = __commonJS({
  "node_modules/@babel/helper-validator-identifier/lib/keyword.js": function node_modulesBabelHelperValidatorIdentifierLibKeywordJs(exports2) {
    "use strict";

    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.isKeyword = isKeyword;
    exports2.isReservedWord = isReservedWord;
    exports2.isStrictBindOnlyReservedWord = isStrictBindOnlyReservedWord;
    exports2.isStrictBindReservedWord = isStrictBindReservedWord;
    exports2.isStrictReservedWord = isStrictReservedWord;
    var reservedWords = {
      keyword: ["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete"],
      strict: ["implements", "interface", "let", "package", "private", "protected", "public", "static", "yield"],
      strictBind: ["eval", "arguments"]
    };
    var keywords = new Set(reservedWords.keyword);
    var reservedWordsStrictSet = new Set(reservedWords.strict);
    var reservedWordsStrictBindSet = new Set(reservedWords.strictBind);

    function isReservedWord(word, inModule) {
      return inModule && word === "await" || word === "enum";
    }

    function isStrictReservedWord(word, inModule) {
      return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);
    }

    function isStrictBindOnlyReservedWord(word) {
      return reservedWordsStrictBindSet.has(word);
    }

    function isStrictBindReservedWord(word, inModule) {
      return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);
    }

    function isKeyword(word) {
      return keywords.has(word);
    }
  }
});

var require_lib = __commonJS({
  "node_modules/@babel/helper-validator-identifier/lib/index.js": function node_modulesBabelHelperValidatorIdentifierLibIndexJs(exports2) {
    "use strict";

    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "isIdentifierChar", {
      enumerable: true,
      get: function get() {
        return _identifier.isIdentifierChar;
      }
    });
    Object.defineProperty(exports2, "isIdentifierName", {
      enumerable: true,
      get: function get() {
        return _identifier.isIdentifierName;
      }
    });
    Object.defineProperty(exports2, "isIdentifierStart", {
      enumerable: true,
      get: function get() {
        return _identifier.isIdentifierStart;
      }
    });
    Object.defineProperty(exports2, "isKeyword", {
      enumerable: true,
      get: function get() {
        return _keyword.isKeyword;
      }
    });
    Object.defineProperty(exports2, "isReservedWord", {
      enumerable: true,
      get: function get() {
        return _keyword.isReservedWord;
      }
    });
    Object.defineProperty(exports2, "isStrictBindOnlyReservedWord", {
      enumerable: true,
      get: function get() {
        return _keyword.isStrictBindOnlyReservedWord;
      }
    });
    Object.defineProperty(exports2, "isStrictBindReservedWord", {
      enumerable: true,
      get: function get() {
        return _keyword.isStrictBindReservedWord;
      }
    });
    Object.defineProperty(exports2, "isStrictReservedWord", {
      enumerable: true,
      get: function get() {
        return _keyword.isStrictReservedWord;
      }
    });

    var _identifier = require_identifier();

    var _keyword = require_keyword();
  }
});

var require_escape_string_regexp = __commonJS({
  "node_modules/@babel/highlight/node_modules/escape-string-regexp/index.js": function node_modulesBabelHighlightNode_modulesEscapeStringRegexpIndexJs(exports2, module2) {
    "use strict";

    var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;

    module2.exports = function (str) {
      if (typeof str !== "string") {
        throw new TypeError("Expected a string");
      }

      return str.replace(matchOperatorsRe, "\\$&");
    };
  }
});

var require_color_name = __commonJS({
  "node_modules/color-name/index.js": function node_modulesColorNameIndexJs(exports2, module2) {
    "use strict";

    module2.exports = {
      "aliceblue": [240, 248, 255],
      "antiquewhite": [250, 235, 215],
      "aqua": [0, 255, 255],
      "aquamarine": [127, 255, 212],
      "azure": [240, 255, 255],
      "beige": [245, 245, 220],
      "bisque": [255, 228, 196],
      "black": [0, 0, 0],
      "blanchedalmond": [255, 235, 205],
      "blue": [0, 0, 255],
      "blueviolet": [138, 43, 226],
      "brown": [165, 42, 42],
      "burlywood": [222, 184, 135],
      "cadetblue": [95, 158, 160],
      "chartreuse": [127, 255, 0],
      "chocolate": [210, 105, 30],
      "coral": [255, 127, 80],
      "cornflowerblue": [100, 149, 237],
      "cornsilk": [255, 248, 220],
      "crimson": [220, 20, 60],
      "cyan": [0, 255, 255],
      "darkblue": [0, 0, 139],
      "darkcyan": [0, 139, 139],
      "darkgoldenrod": [184, 134, 11],
      "darkgray": [169, 169, 169],
      "darkgreen": [0, 100, 0],
      "darkgrey": [169, 169, 169],
      "darkkhaki": [189, 183, 107],
      "darkmagenta": [139, 0, 139],
      "darkolivegreen": [85, 107, 47],
      "darkorange": [255, 140, 0],
      "darkorchid": [153, 50, 204],
      "darkred": [139, 0, 0],
      "darksalmon": [233, 150, 122],
      "darkseagreen": [143, 188, 143],
      "darkslateblue": [72, 61, 139],
      "darkslategray": [47, 79, 79],
      "darkslategrey": [47, 79, 79],
      "darkturquoise": [0, 206, 209],
      "darkviolet": [148, 0, 211],
      "deeppink": [255, 20, 147],
      "deepskyblue": [0, 191, 255],
      "dimgray": [105, 105, 105],
      "dimgrey": [105, 105, 105],
      "dodgerblue": [30, 144, 255],
      "firebrick": [178, 34, 34],
      "floralwhite": [255, 250, 240],
      "forestgreen": [34, 139, 34],
      "fuchsia": [255, 0, 255],
      "gainsboro": [220, 220, 220],
      "ghostwhite": [248, 248, 255],
      "gold": [255, 215, 0],
      "goldenrod": [218, 165, 32],
      "gray": [128, 128, 128],
      "green": [0, 128, 0],
      "greenyellow": [173, 255, 47],
      "grey": [128, 128, 128],
      "honeydew": [240, 255, 240],
      "hotpink": [255, 105, 180],
      "indianred": [205, 92, 92],
      "indigo": [75, 0, 130],
      "ivory": [255, 255, 240],
      "khaki": [240, 230, 140],
      "lavender": [230, 230, 250],
      "lavenderblush": [255, 240, 245],
      "lawngreen": [124, 252, 0],
      "lemonchiffon": [255, 250, 205],
      "lightblue": [173, 216, 230],
      "lightcoral": [240, 128, 128],
      "lightcyan": [224, 255, 255],
      "lightgoldenrodyellow": [250, 250, 210],
      "lightgray": [211, 211, 211],
      "lightgreen": [144, 238, 144],
      "lightgrey": [211, 211, 211],
      "lightpink": [255, 182, 193],
      "lightsalmon": [255, 160, 122],
      "lightseagreen": [32, 178, 170],
      "lightskyblue": [135, 206, 250],
      "lightslategray": [119, 136, 153],
      "lightslategrey": [119, 136, 153],
      "lightsteelblue": [176, 196, 222],
      "lightyellow": [255, 255, 224],
      "lime": [0, 255, 0],
      "limegreen": [50, 205, 50],
      "linen": [250, 240, 230],
      "magenta": [255, 0, 255],
      "maroon": [128, 0, 0],
      "mediumaquamarine": [102, 205, 170],
      "mediumblue": [0, 0, 205],
      "mediumorchid": [186, 85, 211],
      "mediumpurple": [147, 112, 219],
      "mediumseagreen": [60, 179, 113],
      "mediumslateblue": [123, 104, 238],
      "mediumspringgreen": [0, 250, 154],
      "mediumturquoise": [72, 209, 204],
      "mediumvioletred": [199, 21, 133],
      "midnightblue": [25, 25, 112],
      "mintcream": [245, 255, 250],
      "mistyrose": [255, 228, 225],
      "moccasin": [255, 228, 181],
      "navajowhite": [255, 222, 173],
      "navy": [0, 0, 128],
      "oldlace": [253, 245, 230],
      "olive": [128, 128, 0],
      "olivedrab": [107, 142, 35],
      "orange": [255, 165, 0],
      "orangered": [255, 69, 0],
      "orchid": [218, 112, 214],
      "palegoldenrod": [238, 232, 170],
      "palegreen": [152, 251, 152],
      "paleturquoise": [175, 238, 238],
      "palevioletred": [219, 112, 147],
      "papayawhip": [255, 239, 213],
      "peachpuff": [255, 218, 185],
      "peru": [205, 133, 63],
      "pink": [255, 192, 203],
      "plum": [221, 160, 221],
      "powderblue": [176, 224, 230],
      "purple": [128, 0, 128],
      "rebeccapurple": [102, 51, 153],
      "red": [255, 0, 0],
      "rosybrown": [188, 143, 143],
      "royalblue": [65, 105, 225],
      "saddlebrown": [139, 69, 19],
      "salmon": [250, 128, 114],
      "sandybrown": [244, 164, 96],
      "seagreen": [46, 139, 87],
      "seashell": [255, 245, 238],
      "sienna": [160, 82, 45],
      "silver": [192, 192, 192],
      "skyblue": [135, 206, 235],
      "slateblue": [106, 90, 205],
      "slategray": [112, 128, 144],
      "slategrey": [112, 128, 144],
      "snow": [255, 250, 250],
      "springgreen": [0, 255, 127],
      "steelblue": [70, 130, 180],
      "tan": [210, 180, 140],
      "teal": [0, 128, 128],
      "thistle": [216, 191, 216],
      "tomato": [255, 99, 71],
      "turquoise": [64, 224, 208],
      "violet": [238, 130, 238],
      "wheat": [245, 222, 179],
      "white": [255, 255, 255],
      "whitesmoke": [245, 245, 245],
      "yellow": [255, 255, 0],
      "yellowgreen": [154, 205, 50]
    };
  }
});

var require_conversions = __commonJS({
  "node_modules/color-convert/conversions.js": function node_modulesColorConvertConversionsJs(exports2, module2) {
    var cssKeywords = require_color_name();
    var reverseKeywords = {};

    for (key in cssKeywords) {
      if (cssKeywords.hasOwnProperty(key)) {
        reverseKeywords[cssKeywords[key]] = key;
      }
    }

    var key;
    var convert = module2.exports = {
      rgb: {
        channels: 3,
        labels: "rgb"
      },
      hsl: {
        channels: 3,
        labels: "hsl"
      },
      hsv: {
        channels: 3,
        labels: "hsv"
      },
      hwb: {
        channels: 3,
        labels: "hwb"
      },
      cmyk: {
        channels: 4,
        labels: "cmyk"
      },
      xyz: {
        channels: 3,
        labels: "xyz"
      },
      lab: {
        channels: 3,
        labels: "lab"
      },
      lch: {
        channels: 3,
        labels: "lch"
      },
      hex: {
        channels: 1,
        labels: ["hex"]
      },
      keyword: {
        channels: 1,
        labels: ["keyword"]
      },
      ansi16: {
        channels: 1,
        labels: ["ansi16"]
      },
      ansi256: {
        channels: 1,
        labels: ["ansi256"]
      },
      hcg: {
        channels: 3,
        labels: ["h", "c", "g"]
      },
      apple: {
        channels: 3,
        labels: ["r16", "g16", "b16"]
      },
      gray: {
        channels: 1,
        labels: ["gray"]
      }
    };

    for (model in convert) {
      if (convert.hasOwnProperty(model)) {
        if (!("channels" in convert[model])) {
          throw new Error("missing channels property: " + model);
        }

        if (!("labels" in convert[model])) {
          throw new Error("missing channel labels property: " + model);
        }

        if (convert[model].labels.length !== convert[model].channels) {
          throw new Error("channel and label counts mismatch: " + model);
        }

        channels = convert[model].channels;
        labels = convert[model].labels;
        delete convert[model].channels;
        delete convert[model].labels;
        Object.defineProperty(convert[model], "channels", {
          value: channels
        });
        Object.defineProperty(convert[model], "labels", {
          value: labels
        });
      }
    }

    var channels;
    var labels;
    var model;

    convert.rgb.hsl = function (rgb) {
      var r = rgb[0] / 255;
      var g = rgb[1] / 255;
      var b = rgb[2] / 255;
      var min = Math.min(r, g, b);
      var max = Math.max(r, g, b);
      var delta = max - min;
      var h;
      var s;
      var l;

      if (max === min) {
        h = 0;
      } else if (r === max) {
        h = (g - b) / delta;
      } else if (g === max) {
        h = 2 + (b - r) / delta;
      } else if (b === max) {
        h = 4 + (r - g) / delta;
      }

      h = Math.min(h * 60, 360);

      if (h < 0) {
        h += 360;
      }

      l = (min + max) / 2;

      if (max === min) {
        s = 0;
      } else if (l <= 0.5) {
        s = delta / (max + min);
      } else {
        s = delta / (2 - max - min);
      }

      return [h, s * 100, l * 100];
    };

    convert.rgb.hsv = function (rgb) {
      var rdif;
      var gdif;
      var bdif;
      var h;
      var s;
      var r = rgb[0] / 255;
      var g = rgb[1] / 255;
      var b = rgb[2] / 255;
      var v = Math.max(r, g, b);
      var diff = v - Math.min(r, g, b);

      var diffc = function diffc(c) {
        return (v - c) / 6 / diff + 1 / 2;
      };

      if (diff === 0) {
        h = s = 0;
      } else {
        s = diff / v;
        rdif = diffc(r);
        gdif = diffc(g);
        bdif = diffc(b);

        if (r === v) {
          h = bdif - gdif;
        } else if (g === v) {
          h = 1 / 3 + rdif - bdif;
        } else if (b === v) {
          h = 2 / 3 + gdif - rdif;
        }

        if (h < 0) {
          h += 1;
        } else if (h > 1) {
          h -= 1;
        }
      }

      return [h * 360, s * 100, v * 100];
    };

    convert.rgb.hwb = function (rgb) {
      var r = rgb[0];
      var g = rgb[1];
      var b = rgb[2];
      var h = convert.rgb.hsl(rgb)[0];
      var w = 1 / 255 * Math.min(r, Math.min(g, b));
      b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
      return [h, w * 100, b * 100];
    };

    convert.rgb.cmyk = function (rgb) {
      var r = rgb[0] / 255;
      var g = rgb[1] / 255;
      var b = rgb[2] / 255;
      var c;
      var m;
      var y;
      var k;
      k = Math.min(1 - r, 1 - g, 1 - b);
      c = (1 - r - k) / (1 - k) || 0;
      m = (1 - g - k) / (1 - k) || 0;
      y = (1 - b - k) / (1 - k) || 0;
      return [c * 100, m * 100, y * 100, k * 100];
    };

    function comparativeDistance(x, y) {
      return Math.pow(x[0] - y[0], 2) + Math.pow(x[1] - y[1], 2) + Math.pow(x[2] - y[2], 2);
    }

    convert.rgb.keyword = function (rgb) {
      var reversed = reverseKeywords[rgb];

      if (reversed) {
        return reversed;
      }

      var currentClosestDistance = Infinity;
      var currentClosestKeyword;

      for (var keyword in cssKeywords) {
        if (cssKeywords.hasOwnProperty(keyword)) {
          var value = cssKeywords[keyword];
          var distance = comparativeDistance(rgb, value);

          if (distance < currentClosestDistance) {
            currentClosestDistance = distance;
            currentClosestKeyword = keyword;
          }
        }
      }

      return currentClosestKeyword;
    };

    convert.keyword.rgb = function (keyword) {
      return cssKeywords[keyword];
    };

    convert.rgb.xyz = function (rgb) {
      var r = rgb[0] / 255;
      var g = rgb[1] / 255;
      var b = rgb[2] / 255;
      r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
      g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
      b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
      var x = r * 0.4124 + g * 0.3576 + b * 0.1805;
      var y = r * 0.2126 + g * 0.7152 + b * 0.0722;
      var z = r * 0.0193 + g * 0.1192 + b * 0.9505;
      return [x * 100, y * 100, z * 100];
    };

    convert.rgb.lab = function (rgb) {
      var xyz = convert.rgb.xyz(rgb);
      var x = xyz[0];
      var y = xyz[1];
      var z = xyz[2];
      var l;
      var a;
      var b;
      x /= 95.047;
      y /= 100;
      z /= 108.883;
      x = x > 8856e-6 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
      y = y > 8856e-6 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
      z = z > 8856e-6 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
      l = 116 * y - 16;
      a = 500 * (x - y);
      b = 200 * (y - z);
      return [l, a, b];
    };

    convert.hsl.rgb = function (hsl) {
      var h = hsl[0] / 360;
      var s = hsl[1] / 100;
      var l = hsl[2] / 100;
      var t1;
      var t2;
      var t3;
      var rgb;
      var val;

      if (s === 0) {
        val = l * 255;
        return [val, val, val];
      }

      if (l < 0.5) {
        t2 = l * (1 + s);
      } else {
        t2 = l + s - l * s;
      }

      t1 = 2 * l - t2;
      rgb = [0, 0, 0];

      for (var i = 0; i < 3; i++) {
        t3 = h + 1 / 3 * -(i - 1);

        if (t3 < 0) {
          t3++;
        }

        if (t3 > 1) {
          t3--;
        }

        if (6 * t3 < 1) {
          val = t1 + (t2 - t1) * 6 * t3;
        } else if (2 * t3 < 1) {
          val = t2;
        } else if (3 * t3 < 2) {
          val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
        } else {
          val = t1;
        }

        rgb[i] = val * 255;
      }

      return rgb;
    };

    convert.hsl.hsv = function (hsl) {
      var h = hsl[0];
      var s = hsl[1] / 100;
      var l = hsl[2] / 100;
      var smin = s;
      var lmin = Math.max(l, 0.01);
      var sv;
      var v;
      l *= 2;
      s *= l <= 1 ? l : 2 - l;
      smin *= lmin <= 1 ? lmin : 2 - lmin;
      v = (l + s) / 2;
      sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
      return [h, sv * 100, v * 100];
    };

    convert.hsv.rgb = function (hsv) {
      var h = hsv[0] / 60;
      var s = hsv[1] / 100;
      var v = hsv[2] / 100;
      var hi = Math.floor(h) % 6;
      var f = h - Math.floor(h);
      var p = 255 * v * (1 - s);
      var q = 255 * v * (1 - s * f);
      var t = 255 * v * (1 - s * (1 - f));
      v *= 255;

      switch (hi) {
        case 0:
          return [v, t, p];

        case 1:
          return [q, v, p];

        case 2:
          return [p, v, t];

        case 3:
          return [p, q, v];

        case 4:
          return [t, p, v];

        case 5:
          return [v, p, q];
      }
    };

    convert.hsv.hsl = function (hsv) {
      var h = hsv[0];
      var s = hsv[1] / 100;
      var v = hsv[2] / 100;
      var vmin = Math.max(v, 0.01);
      var lmin;
      var sl;
      var l;
      l = (2 - s) * v;
      lmin = (2 - s) * vmin;
      sl = s * vmin;
      sl /= lmin <= 1 ? lmin : 2 - lmin;
      sl = sl || 0;
      l /= 2;
      return [h, sl * 100, l * 100];
    };

    convert.hwb.rgb = function (hwb) {
      var h = hwb[0] / 360;
      var wh = hwb[1] / 100;
      var bl = hwb[2] / 100;
      var ratio = wh + bl;
      var i;
      var v;
      var f;
      var n;

      if (ratio > 1) {
        wh /= ratio;
        bl /= ratio;
      }

      i = Math.floor(6 * h);
      v = 1 - bl;
      f = 6 * h - i;

      if ((i & 1) !== 0) {
        f = 1 - f;
      }

      n = wh + f * (v - wh);
      var r;
      var g;
      var b;

      switch (i) {
        default:
        case 6:
        case 0:
          r = v;
          g = n;
          b = wh;
          break;

        case 1:
          r = n;
          g = v;
          b = wh;
          break;

        case 2:
          r = wh;
          g = v;
          b = n;
          break;

        case 3:
          r = wh;
          g = n;
          b = v;
          break;

        case 4:
          r = n;
          g = wh;
          b = v;
          break;

        case 5:
          r = v;
          g = wh;
          b = n;
          break;
      }

      return [r * 255, g * 255, b * 255];
    };

    convert.cmyk.rgb = function (cmyk) {
      var c = cmyk[0] / 100;
      var m = cmyk[1] / 100;
      var y = cmyk[2] / 100;
      var k = cmyk[3] / 100;
      var r;
      var g;
      var b;
      r = 1 - Math.min(1, c * (1 - k) + k);
      g = 1 - Math.min(1, m * (1 - k) + k);
      b = 1 - Math.min(1, y * (1 - k) + k);
      return [r * 255, g * 255, b * 255];
    };

    convert.xyz.rgb = function (xyz) {
      var x = xyz[0] / 100;
      var y = xyz[1] / 100;
      var z = xyz[2] / 100;
      var r;
      var g;
      var b;
      r = x * 3.2406 + y * -1.5372 + z * -0.4986;
      g = x * -0.9689 + y * 1.8758 + z * 0.0415;
      b = x * 0.0557 + y * -0.204 + z * 1.057;
      r = r > 31308e-7 ? 1.055 * Math.pow(r, 1 / 2.4) - 0.055 : r * 12.92;
      g = g > 31308e-7 ? 1.055 * Math.pow(g, 1 / 2.4) - 0.055 : g * 12.92;
      b = b > 31308e-7 ? 1.055 * Math.pow(b, 1 / 2.4) - 0.055 : b * 12.92;
      r = Math.min(Math.max(0, r), 1);
      g = Math.min(Math.max(0, g), 1);
      b = Math.min(Math.max(0, b), 1);
      return [r * 255, g * 255, b * 255];
    };

    convert.xyz.lab = function (xyz) {
      var x = xyz[0];
      var y = xyz[1];
      var z = xyz[2];
      var l;
      var a;
      var b;
      x /= 95.047;
      y /= 100;
      z /= 108.883;
      x = x > 8856e-6 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
      y = y > 8856e-6 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
      z = z > 8856e-6 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
      l = 116 * y - 16;
      a = 500 * (x - y);
      b = 200 * (y - z);
      return [l, a, b];
    };

    convert.lab.xyz = function (lab) {
      var l = lab[0];
      var a = lab[1];
      var b = lab[2];
      var x;
      var y;
      var z;
      y = (l + 16) / 116;
      x = a / 500 + y;
      z = y - b / 200;
      var y2 = Math.pow(y, 3);
      var x2 = Math.pow(x, 3);
      var z2 = Math.pow(z, 3);
      y = y2 > 8856e-6 ? y2 : (y - 16 / 116) / 7.787;
      x = x2 > 8856e-6 ? x2 : (x - 16 / 116) / 7.787;
      z = z2 > 8856e-6 ? z2 : (z - 16 / 116) / 7.787;
      x *= 95.047;
      y *= 100;
      z *= 108.883;
      return [x, y, z];
    };

    convert.lab.lch = function (lab) {
      var l = lab[0];
      var a = lab[1];
      var b = lab[2];
      var hr;
      var h;
      var c;
      hr = Math.atan2(b, a);
      h = hr * 360 / 2 / Math.PI;

      if (h < 0) {
        h += 360;
      }

      c = Math.sqrt(a * a + b * b);
      return [l, c, h];
    };

    convert.lch.lab = function (lch) {
      var l = lch[0];
      var c = lch[1];
      var h = lch[2];
      var a;
      var b;
      var hr;
      hr = h / 360 * 2 * Math.PI;
      a = c * Math.cos(hr);
      b = c * Math.sin(hr);
      return [l, a, b];
    };

    convert.rgb.ansi16 = function (args) {
      var r = args[0];
      var g = args[1];
      var b = args[2];
      var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2];
      value = Math.round(value / 50);

      if (value === 0) {
        return 30;
      }

      var ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));

      if (value === 2) {
        ansi += 60;
      }

      return ansi;
    };

    convert.hsv.ansi16 = function (args) {
      return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
    };

    convert.rgb.ansi256 = function (args) {
      var r = args[0];
      var g = args[1];
      var b = args[2];

      if (r === g && g === b) {
        if (r < 8) {
          return 16;
        }

        if (r > 248) {
          return 231;
        }

        return Math.round((r - 8) / 247 * 24) + 232;
      }

      var ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
      return ansi;
    };

    convert.ansi16.rgb = function (args) {
      var color = args % 10;

      if (color === 0 || color === 7) {
        if (args > 50) {
          color += 3.5;
        }

        color = color / 10.5 * 255;
        return [color, color, color];
      }

      var mult = (~~(args > 50) + 1) * 0.5;
      var r = (color & 1) * mult * 255;
      var g = (color >> 1 & 1) * mult * 255;
      var b = (color >> 2 & 1) * mult * 255;
      return [r, g, b];
    };

    convert.ansi256.rgb = function (args) {
      if (args >= 232) {
        var c = (args - 232) * 10 + 8;
        return [c, c, c];
      }

      args -= 16;
      var rem;
      var r = Math.floor(args / 36) / 5 * 255;
      var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
      var b = rem % 6 / 5 * 255;
      return [r, g, b];
    };

    convert.rgb.hex = function (args) {
      var integer = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
      var string = integer.toString(16).toUpperCase();
      return "000000".substring(string.length) + string;
    };

    convert.hex.rgb = function (args) {
      var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);

      if (!match) {
        return [0, 0, 0];
      }

      var colorString = match[0];

      if (match[0].length === 3) {
        colorString = colorString.split("").map(function (_char2) {
          return _char2 + _char2;
        }).join("");
      }

      var integer = parseInt(colorString, 16);
      var r = integer >> 16 & 255;
      var g = integer >> 8 & 255;
      var b = integer & 255;
      return [r, g, b];
    };

    convert.rgb.hcg = function (rgb) {
      var r = rgb[0] / 255;
      var g = rgb[1] / 255;
      var b = rgb[2] / 255;
      var max = Math.max(Math.max(r, g), b);
      var min = Math.min(Math.min(r, g), b);
      var chroma = max - min;
      var grayscale;
      var hue;

      if (chroma < 1) {
        grayscale = min / (1 - chroma);
      } else {
        grayscale = 0;
      }

      if (chroma <= 0) {
        hue = 0;
      } else if (max === r) {
        hue = (g - b) / chroma % 6;
      } else if (max === g) {
        hue = 2 + (b - r) / chroma;
      } else {
        hue = 4 + (r - g) / chroma + 4;
      }

      hue /= 6;
      hue %= 1;
      return [hue * 360, chroma * 100, grayscale * 100];
    };

    convert.hsl.hcg = function (hsl) {
      var s = hsl[1] / 100;
      var l = hsl[2] / 100;
      var c = 1;
      var f = 0;

      if (l < 0.5) {
        c = 2 * s * l;
      } else {
        c = 2 * s * (1 - l);
      }

      if (c < 1) {
        f = (l - 0.5 * c) / (1 - c);
      }

      return [hsl[0], c * 100, f * 100];
    };

    convert.hsv.hcg = function (hsv) {
      var s = hsv[1] / 100;
      var v = hsv[2] / 100;
      var c = s * v;
      var f = 0;

      if (c < 1) {
        f = (v - c) / (1 - c);
      }

      return [hsv[0], c * 100, f * 100];
    };

    convert.hcg.rgb = function (hcg) {
      var h = hcg[0] / 360;
      var c = hcg[1] / 100;
      var g = hcg[2] / 100;

      if (c === 0) {
        return [g * 255, g * 255, g * 255];
      }

      var pure = [0, 0, 0];
      var hi = h % 1 * 6;
      var v = hi % 1;
      var w = 1 - v;
      var mg = 0;

      switch (Math.floor(hi)) {
        case 0:
          pure[0] = 1;
          pure[1] = v;
          pure[2] = 0;
          break;

        case 1:
          pure[0] = w;
          pure[1] = 1;
          pure[2] = 0;
          break;

        case 2:
          pure[0] = 0;
          pure[1] = 1;
          pure[2] = v;
          break;

        case 3:
          pure[0] = 0;
          pure[1] = w;
          pure[2] = 1;
          break;

        case 4:
          pure[0] = v;
          pure[1] = 0;
          pure[2] = 1;
          break;

        default:
          pure[0] = 1;
          pure[1] = 0;
          pure[2] = w;
      }

      mg = (1 - c) * g;
      return [(c * pure[0] + mg) * 255, (c * pure[1] + mg) * 255, (c * pure[2] + mg) * 255];
    };

    convert.hcg.hsv = function (hcg) {
      var c = hcg[1] / 100;
      var g = hcg[2] / 100;
      var v = c + g * (1 - c);
      var f = 0;

      if (v > 0) {
        f = c / v;
      }

      return [hcg[0], f * 100, v * 100];
    };

    convert.hcg.hsl = function (hcg) {
      var c = hcg[1] / 100;
      var g = hcg[2] / 100;
      var l = g * (1 - c) + 0.5 * c;
      var s = 0;

      if (l > 0 && l < 0.5) {
        s = c / (2 * l);
      } else if (l >= 0.5 && l < 1) {
        s = c / (2 * (1 - l));
      }

      return [hcg[0], s * 100, l * 100];
    };

    convert.hcg.hwb = function (hcg) {
      var c = hcg[1] / 100;
      var g = hcg[2] / 100;
      var v = c + g * (1 - c);
      return [hcg[0], (v - c) * 100, (1 - v) * 100];
    };

    convert.hwb.hcg = function (hwb) {
      var w = hwb[1] / 100;
      var b = hwb[2] / 100;
      var v = 1 - b;
      var c = v - w;
      var g = 0;

      if (c < 1) {
        g = (v - c) / (1 - c);
      }

      return [hwb[0], c * 100, g * 100];
    };

    convert.apple.rgb = function (apple) {
      return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
    };

    convert.rgb.apple = function (rgb) {
      return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
    };

    convert.gray.rgb = function (args) {
      return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
    };

    convert.gray.hsl = convert.gray.hsv = function (args) {
      return [0, 0, args[0]];
    };

    convert.gray.hwb = function (gray) {
      return [0, 100, gray[0]];
    };

    convert.gray.cmyk = function (gray) {
      return [0, 0, 0, gray[0]];
    };

    convert.gray.lab = function (gray) {
      return [gray[0], 0, 0];
    };

    convert.gray.hex = function (gray) {
      var val = Math.round(gray[0] / 100 * 255) & 255;
      var integer = (val << 16) + (val << 8) + val;
      var string = integer.toString(16).toUpperCase();
      return "000000".substring(string.length) + string;
    };

    convert.rgb.gray = function (rgb) {
      var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
      return [val / 255 * 100];
    };
  }
});

var require_route = __commonJS({
  "node_modules/color-convert/route.js": function node_modulesColorConvertRouteJs(exports2, module2) {
    var conversions = require_conversions();

    function buildGraph() {
      var graph = {};
      var models = Object.keys(conversions);

      for (var len = models.length, i = 0; i < len; i++) {
        graph[models[i]] = {
          distance: -1,
          parent: null
        };
      }

      return graph;
    }

    function deriveBFS(fromModel) {
      var graph = buildGraph();
      var queue = [fromModel];
      graph[fromModel].distance = 0;

      while (queue.length) {
        var current = queue.pop();
        var adjacents = Object.keys(conversions[current]);

        for (var len = adjacents.length, i = 0; i < len; i++) {
          var adjacent = adjacents[i];
          var node = graph[adjacent];

          if (node.distance === -1) {
            node.distance = graph[current].distance + 1;
            node.parent = current;
            queue.unshift(adjacent);
          }
        }
      }

      return graph;
    }

    function link(from, to) {
      return function (args) {
        return to(from(args));
      };
    }

    function wrapConversion(toModel, graph) {
      var path = [graph[toModel].parent, toModel];
      var fn = conversions[graph[toModel].parent][toModel];
      var cur = graph[toModel].parent;

      while (graph[cur].parent) {
        path.unshift(graph[cur].parent);
        fn = link(conversions[graph[cur].parent][cur], fn);
        cur = graph[cur].parent;
      }

      fn.conversion = path;
      return fn;
    }

    module2.exports = function (fromModel) {
      var graph = deriveBFS(fromModel);
      var conversion = {};
      var models = Object.keys(graph);

      for (var len = models.length, i = 0; i < len; i++) {
        var toModel = models[i];
        var node = graph[toModel];

        if (node.parent === null) {
          continue;
        }

        conversion[toModel] = wrapConversion(toModel, graph);
      }

      return conversion;
    };
  }
});

var require_color_convert = __commonJS({
  "node_modules/color-convert/index.js": function node_modulesColorConvertIndexJs(exports2, module2) {
    var conversions = require_conversions();
    var route = require_route();
    var convert = {};
    var models = Object.keys(conversions);

    function wrapRaw(fn) {
      var wrappedFn = function wrappedFn(args) {
        if (args === void 0 || args === null) {
          return args;
        }

        if (arguments.length > 1) {
          args = Array.prototype.slice.call(arguments);
        }

        return fn(args);
      };

      if ("conversion" in fn) {
        wrappedFn.conversion = fn.conversion;
      }

      return wrappedFn;
    }

    function wrapRounded(fn) {
      var wrappedFn = function wrappedFn(args) {
        if (args === void 0 || args === null) {
          return args;
        }

        if (arguments.length > 1) {
          args = Array.prototype.slice.call(arguments);
        }

        var result = fn(args);

        if (_typeof(result) === "object") {
          for (var len = result.length, i = 0; i < len; i++) {
            result[i] = Math.round(result[i]);
          }
        }

        return result;
      };

      if ("conversion" in fn) {
        wrappedFn.conversion = fn.conversion;
      }

      return wrappedFn;
    }

    models.forEach(function (fromModel) {
      convert[fromModel] = {};
      Object.defineProperty(convert[fromModel], "channels", {
        value: conversions[fromModel].channels
      });
      Object.defineProperty(convert[fromModel], "labels", {
        value: conversions[fromModel].labels
      });
      var routes = route(fromModel);
      var routeModels = Object.keys(routes);
      routeModels.forEach(function (toModel) {
        var fn = routes[toModel];
        convert[fromModel][toModel] = wrapRounded(fn);
        convert[fromModel][toModel].raw = wrapRaw(fn);
      });
    });
    module2.exports = convert;
  }
});

var require_ansi_styles = __commonJS({
  "node_modules/ansi-styles/index.js": function node_modulesAnsiStylesIndexJs(exports2, module2) {
    "use strict";

    var colorConvert = require_color_convert();

    var wrapAnsi16 = function wrapAnsi16(fn, offset) {
      return function () {
        var code = fn.apply(colorConvert, arguments);
        return "\x1B[".concat(code + offset, "m");
      };
    };

    var wrapAnsi256 = function wrapAnsi256(fn, offset) {
      return function () {
        var code = fn.apply(colorConvert, arguments);
        return "\x1B[".concat(38 + offset, ";5;").concat(code, "m");
      };
    };

    var wrapAnsi16m = function wrapAnsi16m(fn, offset) {
      return function () {
        var rgb = fn.apply(colorConvert, arguments);
        return "\x1B[".concat(38 + offset, ";2;").concat(rgb[0], ";").concat(rgb[1], ";").concat(rgb[2], "m");
      };
    };

    function assembleStyles() {
      var codes =
      /* @__PURE__ */
      new Map();
      var styles = {
        modifier: {
          reset: [0, 0],
          bold: [1, 22],
          dim: [2, 22],
          italic: [3, 23],
          underline: [4, 24],
          inverse: [7, 27],
          hidden: [8, 28],
          strikethrough: [9, 29]
        },
        color: {
          black: [30, 39],
          red: [31, 39],
          green: [32, 39],
          yellow: [33, 39],
          blue: [34, 39],
          magenta: [35, 39],
          cyan: [36, 39],
          white: [37, 39],
          gray: [90, 39],
          redBright: [91, 39],
          greenBright: [92, 39],
          yellowBright: [93, 39],
          blueBright: [94, 39],
          magentaBright: [95, 39],
          cyanBright: [96, 39],
          whiteBright: [97, 39]
        },
        bgColor: {
          bgBlack: [40, 49],
          bgRed: [41, 49],
          bgGreen: [42, 49],
          bgYellow: [43, 49],
          bgBlue: [44, 49],
          bgMagenta: [45, 49],
          bgCyan: [46, 49],
          bgWhite: [47, 49],
          bgBlackBright: [100, 49],
          bgRedBright: [101, 49],
          bgGreenBright: [102, 49],
          bgYellowBright: [103, 49],
          bgBlueBright: [104, 49],
          bgMagentaBright: [105, 49],
          bgCyanBright: [106, 49],
          bgWhiteBright: [107, 49]
        }
      };
      styles.color.grey = styles.color.gray;

      for (var _i2 = 0, _Object$keys = Object.keys(styles); _i2 < _Object$keys.length; _i2++) {
        var groupName = _Object$keys[_i2];
        var group = styles[groupName];

        for (var _i4 = 0, _Object$keys3 = Object.keys(group); _i4 < _Object$keys3.length; _i4++) {
          var styleName = _Object$keys3[_i4];
          var style = group[styleName];
          styles[styleName] = {
            open: "\x1B[".concat(style[0], "m"),
            close: "\x1B[".concat(style[1], "m")
          };
          group[styleName] = styles[styleName];
          codes.set(style[0], style[1]);
        }

        Object.defineProperty(styles, groupName, {
          value: group,
          enumerable: false
        });
        Object.defineProperty(styles, "codes", {
          value: codes,
          enumerable: false
        });
      }

      var ansi2ansi = function ansi2ansi(n) {
        return n;
      };

      var rgb2rgb = function rgb2rgb(r, g, b) {
        return [r, g, b];
      };

      styles.color.close = "\x1B[39m";
      styles.bgColor.close = "\x1B[49m";
      styles.color.ansi = {
        ansi: wrapAnsi16(ansi2ansi, 0)
      };
      styles.color.ansi256 = {
        ansi256: wrapAnsi256(ansi2ansi, 0)
      };
      styles.color.ansi16m = {
        rgb: wrapAnsi16m(rgb2rgb, 0)
      };
      styles.bgColor.ansi = {
        ansi: wrapAnsi16(ansi2ansi, 10)
      };
      styles.bgColor.ansi256 = {
        ansi256: wrapAnsi256(ansi2ansi, 10)
      };
      styles.bgColor.ansi16m = {
        rgb: wrapAnsi16m(rgb2rgb, 10)
      };

      for (var _i3 = 0, _Object$keys2 = Object.keys(colorConvert); _i3 < _Object$keys2.length; _i3++) {
        var key = _Object$keys2[_i3];

        if (_typeof(colorConvert[key]) !== "object") {
          continue;
        }

        var suite = colorConvert[key];

        if (key === "ansi16") {
          key = "ansi";
        }

        if ("ansi16" in suite) {
          styles.color.ansi[key] = wrapAnsi16(suite.ansi16, 0);
          styles.bgColor.ansi[key] = wrapAnsi16(suite.ansi16, 10);
        }

        if ("ansi256" in suite) {
          styles.color.ansi256[key] = wrapAnsi256(suite.ansi256, 0);
          styles.bgColor.ansi256[key] = wrapAnsi256(suite.ansi256, 10);
        }

        if ("rgb" in suite) {
          styles.color.ansi16m[key] = wrapAnsi16m(suite.rgb, 0);
          styles.bgColor.ansi16m[key] = wrapAnsi16m(suite.rgb, 10);
        }
      }

      return styles;
    }

    Object.defineProperty(module2, "exports", {
      enumerable: true,
      get: assembleStyles
    });
  }
});

var require_has_flag = __commonJS({
  "node_modules/@babel/highlight/node_modules/has-flag/index.js": function node_modulesBabelHighlightNode_modulesHasFlagIndexJs(exports2, module2) {
    "use strict";

    module2.exports = function (flag, argv) {
      argv = argv || process.argv;
      var prefix = flag.startsWith("-") ? "" : flag.length === 1 ? "-" : "--";
      var pos = argv.indexOf(prefix + flag);
      var terminatorPos = argv.indexOf("--");
      return pos !== -1 && (terminatorPos === -1 ? true : pos < terminatorPos);
    };
  }
});

var require_supports_color = __commonJS({
  "node_modules/@babel/highlight/node_modules/supports-color/index.js": function node_modulesBabelHighlightNode_modulesSupportsColorIndexJs(exports2, module2) {
    "use strict";

    var os = require("os");

    var hasFlag = require_has_flag();
    var env = process.env;
    var forceColor;

    if (hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false")) {
      forceColor = false;
    } else if (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) {
      forceColor = true;
    }

    if ("FORCE_COLOR" in env) {
      forceColor = env.FORCE_COLOR.length === 0 || parseInt(env.FORCE_COLOR, 10) !== 0;
    }

    function translateLevel(level) {
      if (level === 0) {
        return false;
      }

      return {
        level: level,
        hasBasic: true,
        has256: level >= 2,
        has16m: level >= 3
      };
    }

    function supportsColor(stream) {
      if (forceColor === false) {
        return 0;
      }

      if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor")) {
        return 3;
      }

      if (hasFlag("color=256")) {
        return 2;
      }

      if (stream && !stream.isTTY && forceColor !== true) {
        return 0;
      }

      var min = forceColor ? 1 : 0;

      if (process.platform === "win32") {
        var osRelease = os.release().split(".");

        if (Number(process.versions.node.split(".")[0]) >= 8 && Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
          return Number(osRelease[2]) >= 14931 ? 3 : 2;
        }

        return 1;
      }

      if ("CI" in env) {
        if (["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI"].some(function (sign) {
          return sign in env;
        }) || env.CI_NAME === "codeship") {
          return 1;
        }

        return min;
      }

      if ("TEAMCITY_VERSION" in env) {
        return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
      }

      if (env.COLORTERM === "truecolor") {
        return 3;
      }

      if ("TERM_PROGRAM" in env) {
        var version = parseInt((env.TERM_PROGRAM_VERSION || "").split(".")[0], 10);

        switch (env.TERM_PROGRAM) {
          case "iTerm.app":
            return version >= 3 ? 3 : 2;

          case "Apple_Terminal":
            return 2;
        }
      }

      if (/-256(color)?$/i.test(env.TERM)) {
        return 2;
      }

      if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
        return 1;
      }

      if ("COLORTERM" in env) {
        return 1;
      }

      if (env.TERM === "dumb") {
        return min;
      }

      return min;
    }

    function getSupportLevel(stream) {
      var level = supportsColor(stream);
      return translateLevel(level);
    }

    module2.exports = {
      supportsColor: getSupportLevel,
      stdout: getSupportLevel(process.stdout),
      stderr: getSupportLevel(process.stderr)
    };
  }
});

var require_templates = __commonJS({
  "node_modules/@babel/highlight/node_modules/chalk/templates.js": function node_modulesBabelHighlightNode_modulesChalkTemplatesJs(exports2, module2) {
    "use strict";

    var TEMPLATE_REGEX = /(?:\\(u[a-f\d]{4}|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
    var STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
    var STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
    var ESCAPE_REGEX = /\\(u[a-f\d]{4}|x[a-f\d]{2}|.)|([^\\])/gi;
    var ESCAPES =
    /* @__PURE__ */
    new Map([["n", "\n"], ["r", "\r"], ["t", "	"], ["b", "\b"], ["f", "\f"], ["v", "\v"], ["0", "\0"], ["\\", "\\"], ["e", "\x1B"], ["a", "\x07"]]);

    function unescape(c) {
      if (c[0] === "u" && c.length === 5 || c[0] === "x" && c.length === 3) {
        return String.fromCharCode(parseInt(c.slice(1), 16));
      }

      return ESCAPES.get(c) || c;
    }

    function parseArguments(name, args) {
      var results = [];
      var chunks = args.trim().split(/\s*,\s*/g);
      var matches;
      var _iteratorNormalCompletion4 = true;
      var _didIteratorError4 = false;
      var _iteratorError4 = undefined;

      try {
        for (var _iterator4 = chunks[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
          var chunk = _step4.value;

          if (!isNaN(chunk)) {
            results.push(Number(chunk));
          } else if (matches = chunk.match(STRING_REGEX)) {
            results.push(matches[2].replace(ESCAPE_REGEX, function (m, escape, chr) {
              return escape ? unescape(escape) : chr;
            }));
          } else {
            throw new Error("Invalid Chalk template style argument: ".concat(chunk, " (in style '").concat(name, "')"));
          }
        }
      } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
            _iterator4["return"]();
          }
        } finally {
          if (_didIteratorError4) {
            throw _iteratorError4;
          }
        }
      }

      return results;
    }

    function parseStyle(style) {
      STYLE_REGEX.lastIndex = 0;
      var results = [];
      var matches;

      while ((matches = STYLE_REGEX.exec(style)) !== null) {
        var name = matches[1];

        if (matches[2]) {
          var args = parseArguments(name, matches[2]);
          results.push([name].concat(args));
        } else {
          results.push([name]);
        }
      }

      return results;
    }

    function buildStyle(chalk, styles) {
      var enabled = {};
      var _iteratorNormalCompletion5 = true;
      var _didIteratorError5 = false;
      var _iteratorError5 = undefined;

      try {
        for (var _iterator5 = styles[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
          var layer = _step5.value;
          var _iteratorNormalCompletion6 = true;
          var _didIteratorError6 = false;
          var _iteratorError6 = undefined;

          try {
            for (var _iterator6 = layer.styles[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
              var style = _step6.value;
              enabled[style[0]] = layer.inverse ? null : style.slice(1);
            }
          } catch (err) {
            _didIteratorError6 = true;
            _iteratorError6 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
                _iterator6["return"]();
              }
            } finally {
              if (_didIteratorError6) {
                throw _iteratorError6;
              }
            }
          }
        }
      } catch (err) {
        _didIteratorError5 = true;
        _iteratorError5 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
            _iterator5["return"]();
          }
        } finally {
          if (_didIteratorError5) {
            throw _iteratorError5;
          }
        }
      }

      var current = chalk;

      for (var _i5 = 0, _Object$keys4 = Object.keys(enabled); _i5 < _Object$keys4.length; _i5++) {
        var styleName = _Object$keys4[_i5];

        if (Array.isArray(enabled[styleName])) {
          if (!(styleName in current)) {
            throw new Error("Unknown Chalk style: ".concat(styleName));
          }

          if (enabled[styleName].length > 0) {
            current = current[styleName].apply(current, enabled[styleName]);
          } else {
            current = current[styleName];
          }
        }
      }

      return current;
    }

    module2.exports = function (chalk, tmp) {
      var styles = [];
      var chunks = [];
      var chunk = [];
      tmp.replace(TEMPLATE_REGEX, function (m, escapeChar, inverse, style, close, chr) {
        if (escapeChar) {
          chunk.push(unescape(escapeChar));
        } else if (style) {
          var str = chunk.join("");
          chunk = [];
          chunks.push(styles.length === 0 ? str : buildStyle(chalk, styles)(str));
          styles.push({
            inverse: inverse,
            styles: parseStyle(style)
          });
        } else if (close) {
          if (styles.length === 0) {
            throw new Error("Found extraneous } in Chalk template literal");
          }

          chunks.push(buildStyle(chalk, styles)(chunk.join("")));
          chunk = [];
          styles.pop();
        } else {
          chunk.push(chr);
        }
      });
      chunks.push(chunk.join(""));

      if (styles.length > 0) {
        var errMsg = "Chalk template literal is missing ".concat(styles.length, " closing bracket").concat(styles.length === 1 ? "" : "s", " (`}`)");
        throw new Error(errMsg);
      }

      return chunks.join("");
    };
  }
});

var require_chalk = __commonJS({
  "node_modules/@babel/highlight/node_modules/chalk/index.js": function node_modulesBabelHighlightNode_modulesChalkIndexJs(exports2, module2) {
    "use strict";

    var escapeStringRegexp = require_escape_string_regexp();
    var ansiStyles = require_ansi_styles();
    var stdoutColor = require_supports_color().stdout;
    var template = require_templates();
    var isSimpleWindowsTerm = process.platform === "win32" && !(process.env.TERM || "").toLowerCase().startsWith("xterm");
    var levelMapping = ["ansi", "ansi", "ansi256", "ansi16m"];
    var skipModels =
    /* @__PURE__ */
    new Set(["gray"]);
    var styles =
    /* @__PURE__ */
    Object.create(null);

    function applyOptions(obj, options) {
      options = options || {};
      var scLevel = stdoutColor ? stdoutColor.level : 0;
      obj.level = options.level === void 0 ? scLevel : options.level;
      obj.enabled = "enabled" in options ? options.enabled : obj.level > 0;
    }

    function Chalk(options) {
      if (!this || !(this instanceof Chalk) || this.template) {
        var chalk = {};
        applyOptions(chalk, options);

        chalk.template = function () {
          var args = [].slice.call(arguments);
          return chalkTag.apply(null, [chalk.template].concat(args));
        };

        Object.setPrototypeOf(chalk, Chalk.prototype);
        Object.setPrototypeOf(chalk.template, chalk);
        chalk.template.constructor = Chalk;
        return chalk.template;
      }

      applyOptions(this, options);
    }

    if (isSimpleWindowsTerm) {
      ansiStyles.blue.open = "\x1B[94m";
    }

    var _loop = function _loop() {
      var key = _Object$keys5[_i6];
      ansiStyles[key].closeRe = new RegExp(escapeStringRegexp(ansiStyles[key].close), "g");
      styles[key] = {
        get: function get() {
          var codes = ansiStyles[key];
          return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, key);
        }
      };
    };

    for (var _i6 = 0, _Object$keys5 = Object.keys(ansiStyles); _i6 < _Object$keys5.length; _i6++) {
      _loop();
    }

    styles.visible = {
      get: function get() {
        return build.call(this, this._styles || [], true, "visible");
      }
    };
    ansiStyles.color.closeRe = new RegExp(escapeStringRegexp(ansiStyles.color.close), "g");

    var _loop2 = function _loop2() {
      var model = _Object$keys6[_i7];

      if (skipModels.has(model)) {
        return "continue";
      }

      styles[model] = {
        get: function get() {
          var level = this.level;
          return function () {
            var open = ansiStyles.color[levelMapping[level]][model].apply(null, arguments);
            var codes = {
              open: open,
              close: ansiStyles.color.close,
              closeRe: ansiStyles.color.closeRe
            };
            return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, model);
          };
        }
      };
    };

    for (var _i7 = 0, _Object$keys6 = Object.keys(ansiStyles.color.ansi); _i7 < _Object$keys6.length; _i7++) {
      var _ret = _loop2();

      if (_ret === "continue") continue;
    }

    ansiStyles.bgColor.closeRe = new RegExp(escapeStringRegexp(ansiStyles.bgColor.close), "g");

    var _loop3 = function _loop3() {
      var model = _Object$keys7[_i8];

      if (skipModels.has(model)) {
        return "continue";
      }

      var bgModel = "bg" + model[0].toUpperCase() + model.slice(1);
      styles[bgModel] = {
        get: function get() {
          var level = this.level;
          return function () {
            var open = ansiStyles.bgColor[levelMapping[level]][model].apply(null, arguments);
            var codes = {
              open: open,
              close: ansiStyles.bgColor.close,
              closeRe: ansiStyles.bgColor.closeRe
            };
            return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, model);
          };
        }
      };
    };

    for (var _i8 = 0, _Object$keys7 = Object.keys(ansiStyles.bgColor.ansi); _i8 < _Object$keys7.length; _i8++) {
      var _ret2 = _loop3();

      if (_ret2 === "continue") continue;
    }

    var proto = Object.defineProperties(function () {}, styles);

    function build(_styles, _empty, key) {
      var builder = function builder() {
        return applyStyle.apply(builder, arguments);
      };

      builder._styles = _styles;
      builder._empty = _empty;
      var self = this;
      Object.defineProperty(builder, "level", {
        enumerable: true,
        get: function get() {
          return self.level;
        },
        set: function set(level) {
          self.level = level;
        }
      });
      Object.defineProperty(builder, "enabled", {
        enumerable: true,
        get: function get() {
          return self.enabled;
        },
        set: function set(enabled) {
          self.enabled = enabled;
        }
      });
      builder.hasGrey = this.hasGrey || key === "gray" || key === "grey";
      builder.__proto__ = proto;
      return builder;
    }

    function applyStyle() {
      var args = arguments;
      var argsLen = args.length;
      var str = String(arguments[0]);

      if (argsLen === 0) {
        return "";
      }

      if (argsLen > 1) {
        for (var a = 1; a < argsLen; a++) {
          str += " " + args[a];
        }
      }

      if (!this.enabled || this.level <= 0 || !str) {
        return this._empty ? "" : str;
      }

      var originalDim = ansiStyles.dim.open;

      if (isSimpleWindowsTerm && this.hasGrey) {
        ansiStyles.dim.open = "";
      }

      var _iteratorNormalCompletion7 = true;
      var _didIteratorError7 = false;
      var _iteratorError7 = undefined;

      try {
        for (var _iterator7 = this._styles.slice().reverse()[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
          var code = _step7.value;
          str = code.open + str.replace(code.closeRe, code.open) + code.close;
          str = str.replace(/\r?\n/g, "".concat(code.close, "$&").concat(code.open));
        }
      } catch (err) {
        _didIteratorError7 = true;
        _iteratorError7 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion7 && _iterator7["return"] != null) {
            _iterator7["return"]();
          }
        } finally {
          if (_didIteratorError7) {
            throw _iteratorError7;
          }
        }
      }

      ansiStyles.dim.open = originalDim;
      return str;
    }

    function chalkTag(chalk, strings) {
      if (!Array.isArray(strings)) {
        return [].slice.call(arguments, 1).join(" ");
      }

      var args = [].slice.call(arguments, 2);
      var parts = [strings.raw[0]];

      for (var i = 1; i < strings.length; i++) {
        parts.push(String(args[i - 1]).replace(/[{}\\]/g, "\\$&"));
        parts.push(String(strings.raw[i]));
      }

      return template(chalk, parts.join(""));
    }

    Object.defineProperties(Chalk.prototype, styles);
    module2.exports = Chalk();
    module2.exports.supportsColor = stdoutColor;
    module2.exports["default"] = module2.exports;
  }
});

var require_lib2 = __commonJS({
  "node_modules/@babel/highlight/lib/index.js": function node_modulesBabelHighlightLibIndexJs(exports2) {
    "use strict";

    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2["default"] = highlight;
    exports2.getChalk = getChalk;
    exports2.shouldHighlight = shouldHighlight;

    var _jsTokens = require_js_tokens();

    var _helperValidatorIdentifier = require_lib();

    var _chalk = require_chalk();

    var sometimesKeywords =
    /* @__PURE__ */
    new Set(["as", "async", "from", "get", "of", "set"]);

    function getDefs(chalk) {
      return {
        keyword: chalk.cyan,
        capitalized: chalk.yellow,
        jsxIdentifier: chalk.yellow,
        punctuator: chalk.yellow,
        number: chalk.magenta,
        string: chalk.green,
        regex: chalk.magenta,
        comment: chalk.grey,
        invalid: chalk.white.bgRed.bold
      };
    }

    var NEWLINE = /\r\n|[\n\r\u2028\u2029]/;
    var BRACKET = /^[()[\]{}]$/;
    var tokenize;
    {
      var JSX_TAG = /^[a-z][\w-]*$/i;

      var getTokenType = function getTokenType(token, offset, text) {
        if (token.type === "name") {
          if ((0, _helperValidatorIdentifier.isKeyword)(token.value) || (0, _helperValidatorIdentifier.isStrictReservedWord)(token.value, true) || sometimesKeywords.has(token.value)) {
            return "keyword";
          }

          if (JSX_TAG.test(token.value) && (text[offset - 1] === "<" || text.slice(offset - 2, offset) == "</")) {
            return "jsxIdentifier";
          }

          if (token.value[0] !== token.value[0].toLowerCase()) {
            return "capitalized";
          }
        }

        if (token.type === "punctuator" && BRACKET.test(token.value)) {
          return "bracket";
        }

        if (token.type === "invalid" && (token.value === "@" || token.value === "#")) {
          return "punctuator";
        }

        return token.type;
      };

      tokenize =
      /*#__PURE__*/
      regeneratorRuntime.mark(function tokenize(text) {
        var match, token;
        return regeneratorRuntime.wrap(function tokenize$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(match = _jsTokens["default"].exec(text))) {
                  _context.next = 6;
                  break;
                }

                token = _jsTokens.matchToToken(match);
                _context.next = 4;
                return {
                  type: getTokenType(token, match.index, text),
                  value: token.value
                };

              case 4:
                _context.next = 0;
                break;

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, tokenize);
      });
    }

    function highlightTokens(defs, text) {
      var highlighted = "";
      var _iteratorNormalCompletion8 = true;
      var _didIteratorError8 = false;
      var _iteratorError8 = undefined;

      try {
        var _loop4 = function _loop4() {
          var _step8$value = _step8.value,
              type = _step8$value.type,
              value = _step8$value.value;
          var colorize = defs[type];

          if (colorize) {
            highlighted += value.split(NEWLINE).map(function (str) {
              return colorize(str);
            }).join("\n");
          } else {
            highlighted += value;
          }
        };

        for (var _iterator8 = tokenize(text)[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
          _loop4();
        }
      } catch (err) {
        _didIteratorError8 = true;
        _iteratorError8 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion8 && _iterator8["return"] != null) {
            _iterator8["return"]();
          }
        } finally {
          if (_didIteratorError8) {
            throw _iteratorError8;
          }
        }
      }

      return highlighted;
    }

    function shouldHighlight(options) {
      return !!_chalk.supportsColor || options.forceColor;
    }

    function getChalk(options) {
      return options.forceColor ? new _chalk.constructor({
        enabled: true,
        level: 1
      }) : _chalk;
    }

    function highlight(code) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      if (code !== "" && shouldHighlight(options)) {
        var chalk = getChalk(options);
        var defs = getDefs(chalk);
        return highlightTokens(defs, code);
      } else {
        return code;
      }
    }
  }
});

var require_lib3 = __commonJS({
  "node_modules/@babel/code-frame/lib/index.js": function node_modulesBabelCodeFrameLibIndexJs(exports2) {
    "use strict";

    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.codeFrameColumns = codeFrameColumns;
    exports2["default"] = _default;

    var _highlight = require_lib2();

    var deprecationWarningShown = false;

    function getDefs(chalk) {
      return {
        gutter: chalk.grey,
        marker: chalk.red.bold,
        message: chalk.red.bold
      };
    }

    var NEWLINE = /\r\n|[\n\r\u2028\u2029]/;

    function getMarkerLines(loc, source, opts) {
      var startLoc = Object.assign({
        column: 0,
        line: -1
      }, loc.start);
      var endLoc = Object.assign({}, startLoc, loc.end);

      var _ref3 = opts || {},
          _ref3$linesAbove = _ref3.linesAbove,
          linesAbove = _ref3$linesAbove === void 0 ? 2 : _ref3$linesAbove,
          _ref3$linesBelow = _ref3.linesBelow,
          linesBelow = _ref3$linesBelow === void 0 ? 3 : _ref3$linesBelow;

      var startLine = startLoc.line;
      var startColumn = startLoc.column;
      var endLine = endLoc.line;
      var endColumn = endLoc.column;
      var start = Math.max(startLine - (linesAbove + 1), 0);
      var end = Math.min(source.length, endLine + linesBelow);

      if (startLine === -1) {
        start = 0;
      }

      if (endLine === -1) {
        end = source.length;
      }

      var lineDiff = endLine - startLine;
      var markerLines = {};

      if (lineDiff) {
        for (var i = 0; i <= lineDiff; i++) {
          var lineNumber = i + startLine;

          if (!startColumn) {
            markerLines[lineNumber] = true;
          } else if (i === 0) {
            var sourceLength = source[lineNumber - 1].length;
            markerLines[lineNumber] = [startColumn, sourceLength - startColumn + 1];
          } else if (i === lineDiff) {
            markerLines[lineNumber] = [0, endColumn];
          } else {
            var _sourceLength = source[lineNumber - i].length;
            markerLines[lineNumber] = [0, _sourceLength];
          }
        }
      } else {
        if (startColumn === endColumn) {
          if (startColumn) {
            markerLines[startLine] = [startColumn, 0];
          } else {
            markerLines[startLine] = true;
          }
        } else {
          markerLines[startLine] = [startColumn, endColumn - startColumn];
        }
      }

      return {
        start: start,
        end: end,
        markerLines: markerLines
      };
    }

    function codeFrameColumns(rawLines, loc) {
      var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var highlighted = (opts.highlightCode || opts.forceColor) && (0, _highlight.shouldHighlight)(opts);
      var chalk = (0, _highlight.getChalk)(opts);
      var defs = getDefs(chalk);

      var maybeHighlight = function maybeHighlight(chalkFn, string) {
        return highlighted ? chalkFn(string) : string;
      };

      var lines = rawLines.split(NEWLINE);

      var _getMarkerLines = getMarkerLines(loc, lines, opts),
          start = _getMarkerLines.start,
          end = _getMarkerLines.end,
          markerLines = _getMarkerLines.markerLines;

      var hasColumns = loc.start && typeof loc.start.column === "number";
      var numberMaxWidth = String(end).length;
      var highlightedLines = highlighted ? (0, _highlight["default"])(rawLines, opts) : rawLines;
      var frame = highlightedLines.split(NEWLINE, end).slice(start, end).map(function (line, index) {
        var number = start + 1 + index;
        var paddedNumber = " ".concat(number).slice(-numberMaxWidth);
        var gutter = " ".concat(paddedNumber, " |");
        var hasMarker = markerLines[number];
        var lastMarkerLine = !markerLines[number + 1];

        if (hasMarker) {
          var markerLine = "";

          if (Array.isArray(hasMarker)) {
            var markerSpacing = line.slice(0, Math.max(hasMarker[0] - 1, 0)).replace(/[^\t]/g, " ");
            var numberOfMarkers = hasMarker[1] || 1;
            markerLine = ["\n ", maybeHighlight(defs.gutter, gutter.replace(/\d/g, " ")), " ", markerSpacing, maybeHighlight(defs.marker, "^").repeat(numberOfMarkers)].join("");

            if (lastMarkerLine && opts.message) {
              markerLine += " " + maybeHighlight(defs.message, opts.message);
            }
          }

          return [maybeHighlight(defs.marker, ">"), maybeHighlight(defs.gutter, gutter), line.length > 0 ? " ".concat(line) : "", markerLine].join("");
        } else {
          return " ".concat(maybeHighlight(defs.gutter, gutter)).concat(line.length > 0 ? " ".concat(line) : "");
        }
      }).join("\n");

      if (opts.message && !hasColumns) {
        frame = "".concat(" ".repeat(numberMaxWidth + 1)).concat(opts.message, "\n").concat(frame);
      }

      if (highlighted) {
        return chalk.reset(frame);
      } else {
        return frame;
      }
    }

    function _default(rawLines, lineNumber, colNumber) {
      var opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

      if (!deprecationWarningShown) {
        deprecationWarningShown = true;
        var message = "Passing lineNumber and colNumber is deprecated to @babel/code-frame. Please use `codeFrameColumns`.";

        if (process.emitWarning) {
          process.emitWarning(message, "DeprecationWarning");
        } else {
          var deprecationError = new Error(message);
          deprecationError.name = "DeprecationWarning";
          console.warn(new Error(message));
        }
      }

      colNumber = Math.max(colNumber, 0);
      var location = {
        start: {
          column: colNumber,
          line: lineNumber
        }
      };
      return codeFrameColumns(rawLines, location, opts);
    }
  }
});

var require_parse_json = __commonJS({
  "node_modules/parse-json/index.js": function node_modulesParseJsonIndexJs(exports2, module2) {
    "use strict";

    var errorEx = require_error_ex();
    var fallback = require_json_parse_even_better_errors();

    var _require_build = require_build(),
        LinesAndColumns = _require_build["default"];

    var _require_lib = require_lib3(),
        codeFrameColumns = _require_lib.codeFrameColumns;

    var JSONError = errorEx("JSONError", {
      fileName: errorEx.append("in %s"),
      codeFrame: errorEx.append("\n\n%s\n")
    });

    var parseJson = function parseJson(string, reviver, filename) {
      if (typeof reviver === "string") {
        filename = reviver;
        reviver = null;
      }

      try {
        try {
          return JSON.parse(string, reviver);
        } catch (error) {
          fallback(string, reviver);
          throw error;
        }
      } catch (error) {
        error.message = error.message.replace(/\n/g, "");
        var indexMatch = error.message.match(/in JSON at position (\d+) while parsing/);
        var jsonError = new JSONError(error);

        if (filename) {
          jsonError.fileName = filename;
        }

        if (indexMatch && indexMatch.length > 0) {
          var lines = new LinesAndColumns(string);
          var index = Number(indexMatch[1]);
          var location = lines.locationForIndex(index);
          var codeFrame = codeFrameColumns(string, {
            start: {
              line: location.line + 1,
              column: location.column + 1
            }
          }, {
            highlightCode: true
          });
          jsonError.codeFrame = codeFrame;
        }

        throw jsonError;
      }
    };

    parseJson.JSONError = JSONError;
    module2.exports = parseJson;
  }
});

var require_PlainValue_ec8e588e = __commonJS({
  "node_modules/yaml/dist/PlainValue-ec8e588e.js": function node_modulesYamlDistPlainValueEc8e588eJs(exports2) {
    "use strict";

    var Char = {
      ANCHOR: "&",
      COMMENT: "#",
      TAG: "!",
      DIRECTIVES_END: "-",
      DOCUMENT_END: "."
    };
    var Type = {
      ALIAS: "ALIAS",
      BLANK_LINE: "BLANK_LINE",
      BLOCK_FOLDED: "BLOCK_FOLDED",
      BLOCK_LITERAL: "BLOCK_LITERAL",
      COMMENT: "COMMENT",
      DIRECTIVE: "DIRECTIVE",
      DOCUMENT: "DOCUMENT",
      FLOW_MAP: "FLOW_MAP",
      FLOW_SEQ: "FLOW_SEQ",
      MAP: "MAP",
      MAP_KEY: "MAP_KEY",
      MAP_VALUE: "MAP_VALUE",
      PLAIN: "PLAIN",
      QUOTE_DOUBLE: "QUOTE_DOUBLE",
      QUOTE_SINGLE: "QUOTE_SINGLE",
      SEQ: "SEQ",
      SEQ_ITEM: "SEQ_ITEM"
    };
    var defaultTagPrefix = "tag:yaml.org,2002:";
    var defaultTags = {
      MAP: "tag:yaml.org,2002:map",
      SEQ: "tag:yaml.org,2002:seq",
      STR: "tag:yaml.org,2002:str"
    };

    function findLineStarts(src) {
      var ls = [0];
      var offset = src.indexOf("\n");

      while (offset !== -1) {
        offset += 1;
        ls.push(offset);
        offset = src.indexOf("\n", offset);
      }

      return ls;
    }

    function getSrcInfo(cst) {
      var lineStarts, src;

      if (typeof cst === "string") {
        lineStarts = findLineStarts(cst);
        src = cst;
      } else {
        if (Array.isArray(cst)) cst = cst[0];

        if (cst && cst.context) {
          if (!cst.lineStarts) cst.lineStarts = findLineStarts(cst.context.src);
          lineStarts = cst.lineStarts;
          src = cst.context.src;
        }
      }

      return {
        lineStarts: lineStarts,
        src: src
      };
    }

    function getLinePos(offset, cst) {
      if (typeof offset !== "number" || offset < 0) return null;

      var _getSrcInfo = getSrcInfo(cst),
          lineStarts = _getSrcInfo.lineStarts,
          src = _getSrcInfo.src;

      if (!lineStarts || !src || offset > src.length) return null;

      for (var i = 0; i < lineStarts.length; ++i) {
        var start = lineStarts[i];

        if (offset < start) {
          return {
            line: i,
            col: offset - lineStarts[i - 1] + 1
          };
        }

        if (offset === start) return {
          line: i + 1,
          col: 1
        };
      }

      var line = lineStarts.length;
      return {
        line: line,
        col: offset - lineStarts[line - 1] + 1
      };
    }

    function getLine(line, cst) {
      var _getSrcInfo2 = getSrcInfo(cst),
          lineStarts = _getSrcInfo2.lineStarts,
          src = _getSrcInfo2.src;

      if (!lineStarts || !(line >= 1) || line > lineStarts.length) return null;
      var start = lineStarts[line - 1];
      var end = lineStarts[line];

      while (end && end > start && src[end - 1] === "\n") {
        --end;
      }

      return src.slice(start, end);
    }

    function getPrettyContext(_ref4, cst) {
      var start = _ref4.start,
          end = _ref4.end;
      var maxWidth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 80;
      var src = getLine(start.line, cst);
      if (!src) return null;
      var col = start.col;

      if (src.length > maxWidth) {
        if (col <= maxWidth - 10) {
          src = src.substr(0, maxWidth - 1) + "\u2026";
        } else {
          var halfWidth = Math.round(maxWidth / 2);
          if (src.length > col + halfWidth) src = src.substr(0, col + halfWidth - 1) + "\u2026";
          col -= src.length - maxWidth;
          src = "\u2026" + src.substr(1 - maxWidth);
        }
      }

      var errLen = 1;
      var errEnd = "";

      if (end) {
        if (end.line === start.line && col + (end.col - start.col) <= maxWidth + 1) {
          errLen = end.col - start.col;
        } else {
          errLen = Math.min(src.length + 1, maxWidth) - col;
          errEnd = "\u2026";
        }
      }

      var offset = col > 1 ? " ".repeat(col - 1) : "";
      var err = "^".repeat(errLen);
      return "".concat(src, "\n").concat(offset).concat(err).concat(errEnd);
    }

    var Range =
    /*#__PURE__*/
    function () {
      _createClass(Range, null, [{
        key: "copy",
        value: function copy(orig) {
          return new Range(orig.start, orig.end);
        }
      }]);

      function Range(start, end) {
        _classCallCheck(this, Range);

        this.start = start;
        this.end = end || start;
      }

      _createClass(Range, [{
        key: "isEmpty",
        value: function isEmpty() {
          return typeof this.start !== "number" || !this.end || this.end <= this.start;
        }
      }, {
        key: "setOrigRange",
        value: function setOrigRange(cr, offset) {
          var start = this.start,
              end = this.end;

          if (cr.length === 0 || end <= cr[0]) {
            this.origStart = start;
            this.origEnd = end;
            return offset;
          }

          var i = offset;

          while (i < cr.length) {
            if (cr[i] > start) break;else ++i;
          }

          this.origStart = start + i;
          var nextOffset = i;

          while (i < cr.length) {
            if (cr[i] >= end) break;else ++i;
          }

          this.origEnd = end + i;
          return nextOffset;
        }
      }]);

      return Range;
    }();

    var Node =
    /*#__PURE__*/
    function () {
      _createClass(Node, null, [{
        key: "addStringTerminator",
        value: function addStringTerminator(src, offset, str) {
          if (str[str.length - 1] === "\n") return str;
          var next = Node.endOfWhiteSpace(src, offset);
          return next >= src.length || src[next] === "\n" ? str + "\n" : str;
        }
      }, {
        key: "atDocumentBoundary",
        value: function atDocumentBoundary(src, offset, sep) {
          var ch0 = src[offset];
          if (!ch0) return true;
          var prev = src[offset - 1];
          if (prev && prev !== "\n") return false;

          if (sep) {
            if (ch0 !== sep) return false;
          } else {
            if (ch0 !== Char.DIRECTIVES_END && ch0 !== Char.DOCUMENT_END) return false;
          }

          var ch1 = src[offset + 1];
          var ch2 = src[offset + 2];
          if (ch1 !== ch0 || ch2 !== ch0) return false;
          var ch3 = src[offset + 3];
          return !ch3 || ch3 === "\n" || ch3 === "	" || ch3 === " ";
        }
      }, {
        key: "endOfIdentifier",
        value: function endOfIdentifier(src, offset) {
          var ch = src[offset];
          var isVerbatim = ch === "<";
          var notOk = isVerbatim ? ["\n", "	", " ", ">"] : ["\n", "	", " ", "[", "]", "{", "}", ","];

          while (ch && notOk.indexOf(ch) === -1) {
            ch = src[offset += 1];
          }

          if (isVerbatim && ch === ">") offset += 1;
          return offset;
        }
      }, {
        key: "endOfIndent",
        value: function endOfIndent(src, offset) {
          var ch = src[offset];

          while (ch === " ") {
            ch = src[offset += 1];
          }

          return offset;
        }
      }, {
        key: "endOfLine",
        value: function endOfLine(src, offset) {
          var ch = src[offset];

          while (ch && ch !== "\n") {
            ch = src[offset += 1];
          }

          return offset;
        }
      }, {
        key: "endOfWhiteSpace",
        value: function endOfWhiteSpace(src, offset) {
          var ch = src[offset];

          while (ch === "	" || ch === " ") {
            ch = src[offset += 1];
          }

          return offset;
        }
      }, {
        key: "startOfLine",
        value: function startOfLine(src, offset) {
          var ch = src[offset - 1];
          if (ch === "\n") return offset;

          while (ch && ch !== "\n") {
            ch = src[offset -= 1];
          }

          return offset + 1;
        }
      }, {
        key: "endOfBlockIndent",
        value: function endOfBlockIndent(src, indent, lineStart) {
          var inEnd = Node.endOfIndent(src, lineStart);

          if (inEnd > lineStart + indent) {
            return inEnd;
          } else {
            var wsEnd = Node.endOfWhiteSpace(src, inEnd);
            var ch = src[wsEnd];
            if (!ch || ch === "\n") return wsEnd;
          }

          return null;
        }
      }, {
        key: "atBlank",
        value: function atBlank(src, offset, endAsBlank) {
          var ch = src[offset];
          return ch === "\n" || ch === "	" || ch === " " || endAsBlank && !ch;
        }
      }, {
        key: "nextNodeIsIndented",
        value: function nextNodeIsIndented(ch, indentDiff, indicatorAsIndent) {
          if (!ch || indentDiff < 0) return false;
          if (indentDiff > 0) return true;
          return indicatorAsIndent && ch === "-";
        }
      }, {
        key: "normalizeOffset",
        value: function normalizeOffset(src, offset) {
          var ch = src[offset];
          return !ch ? offset : ch !== "\n" && src[offset - 1] === "\n" ? offset - 1 : Node.endOfWhiteSpace(src, offset);
        }
      }, {
        key: "foldNewline",
        value: function foldNewline(src, offset, indent) {
          var inCount = 0;
          var error = false;
          var fold = "";
          var ch = src[offset + 1];

          while (ch === " " || ch === "	" || ch === "\n") {
            switch (ch) {
              case "\n":
                inCount = 0;
                offset += 1;
                fold += "\n";
                break;

              case "	":
                if (inCount <= indent) error = true;
                offset = Node.endOfWhiteSpace(src, offset + 2) - 1;
                break;

              case " ":
                inCount += 1;
                offset += 1;
                break;
            }

            ch = src[offset + 1];
          }

          if (!fold) fold = " ";
          if (ch && inCount <= indent) error = true;
          return {
            fold: fold,
            offset: offset,
            error: error
          };
        }
      }]);

      function Node(type, props, context) {
        _classCallCheck(this, Node);

        Object.defineProperty(this, "context", {
          value: context || null,
          writable: true
        });
        this.error = null;
        this.range = null;
        this.valueRange = null;
        this.props = props || [];
        this.type = type;
        this.value = null;
      }

      _createClass(Node, [{
        key: "getPropValue",
        value: function getPropValue(idx, key, skipKey) {
          if (!this.context) return null;
          var src = this.context.src;
          var prop = this.props[idx];
          return prop && src[prop.start] === key ? src.slice(prop.start + (skipKey ? 1 : 0), prop.end) : null;
        }
      }, {
        key: "commentHasRequiredWhitespace",
        value: function commentHasRequiredWhitespace(start) {
          var src = this.context.src;
          if (this.header && start === this.header.end) return false;
          if (!this.valueRange) return false;
          var end = this.valueRange.end;
          return start !== end || Node.atBlank(src, end - 1);
        }
      }, {
        key: "parseComment",
        value: function parseComment(start) {
          var src = this.context.src;

          if (src[start] === Char.COMMENT) {
            var end = Node.endOfLine(src, start + 1);
            var commentRange = new Range(start, end);
            this.props.push(commentRange);
            return end;
          }

          return start;
        }
      }, {
        key: "setOrigRanges",
        value: function setOrigRanges(cr, offset) {
          if (this.range) offset = this.range.setOrigRange(cr, offset);
          if (this.valueRange) this.valueRange.setOrigRange(cr, offset);
          this.props.forEach(function (prop) {
            return prop.setOrigRange(cr, offset);
          });
          return offset;
        }
      }, {
        key: "toString",
        value: function toString() {
          var src = this.context.src,
              range = this.range,
              value = this.value;
          if (value != null) return value;
          var str = src.slice(range.start, range.end);
          return Node.addStringTerminator(src, range.end, str);
        }
      }, {
        key: "anchor",
        get: function get() {
          for (var i = 0; i < this.props.length; ++i) {
            var anchor = this.getPropValue(i, Char.ANCHOR, true);
            if (anchor != null) return anchor;
          }

          return null;
        }
      }, {
        key: "comment",
        get: function get() {
          var comments = [];

          for (var i = 0; i < this.props.length; ++i) {
            var comment = this.getPropValue(i, Char.COMMENT, true);
            if (comment != null) comments.push(comment);
          }

          return comments.length > 0 ? comments.join("\n") : null;
        }
      }, {
        key: "hasComment",
        get: function get() {
          if (this.context) {
            var src = this.context.src;

            for (var i = 0; i < this.props.length; ++i) {
              if (src[this.props[i].start] === Char.COMMENT) return true;
            }
          }

          return false;
        }
      }, {
        key: "hasProps",
        get: function get() {
          if (this.context) {
            var src = this.context.src;

            for (var i = 0; i < this.props.length; ++i) {
              if (src[this.props[i].start] !== Char.COMMENT) return true;
            }
          }

          return false;
        }
      }, {
        key: "includesTrailingLines",
        get: function get() {
          return false;
        }
      }, {
        key: "jsonLike",
        get: function get() {
          var jsonLikeTypes = [Type.FLOW_MAP, Type.FLOW_SEQ, Type.QUOTE_DOUBLE, Type.QUOTE_SINGLE];
          return jsonLikeTypes.indexOf(this.type) !== -1;
        }
      }, {
        key: "rangeAsLinePos",
        get: function get() {
          if (!this.range || !this.context) return void 0;
          var start = getLinePos(this.range.start, this.context.root);
          if (!start) return void 0;
          var end = getLinePos(this.range.end, this.context.root);
          return {
            start: start,
            end: end
          };
        }
      }, {
        key: "rawValue",
        get: function get() {
          if (!this.valueRange || !this.context) return null;
          var _this$valueRange = this.valueRange,
              start = _this$valueRange.start,
              end = _this$valueRange.end;
          return this.context.src.slice(start, end);
        }
      }, {
        key: "tag",
        get: function get() {
          for (var i = 0; i < this.props.length; ++i) {
            var tag = this.getPropValue(i, Char.TAG, false);

            if (tag != null) {
              if (tag[1] === "<") {
                return {
                  verbatim: tag.slice(2, -1)
                };
              } else {
                var _tag$match = tag.match(/^(.*!)([^!]*)$/),
                    _tag$match2 = _slicedToArray(_tag$match, 3),
                    _ = _tag$match2[0],
                    handle = _tag$match2[1],
                    suffix = _tag$match2[2];

                return {
                  handle: handle,
                  suffix: suffix
                };
              }
            }
          }

          return null;
        }
      }, {
        key: "valueRangeContainsNewline",
        get: function get() {
          if (!this.valueRange || !this.context) return false;
          var _this$valueRange2 = this.valueRange,
              start = _this$valueRange2.start,
              end = _this$valueRange2.end;
          var src = this.context.src;

          for (var i = start; i < end; ++i) {
            if (src[i] === "\n") return true;
          }

          return false;
        }
      }]);

      return Node;
    }();

    var YAMLError =
    /*#__PURE__*/
    function (_Error) {
      _inherits(YAMLError, _Error);

      function YAMLError(name, source, message) {
        var _this2;

        _classCallCheck(this, YAMLError);

        if (!message || !(source instanceof Node)) throw new Error("Invalid arguments for new ".concat(name));
        _this2 = _possibleConstructorReturn(this, _getPrototypeOf(YAMLError).call(this));
        _this2.name = name;
        _this2.message = message;
        _this2.source = source;
        return _this2;
      }

      _createClass(YAMLError, [{
        key: "makePretty",
        value: function makePretty() {
          if (!this.source) return;
          this.nodeType = this.source.type;
          var cst = this.source.context && this.source.context.root;

          if (typeof this.offset === "number") {
            this.range = new Range(this.offset, this.offset + 1);
            var start = cst && getLinePos(this.offset, cst);

            if (start) {
              var end = {
                line: start.line,
                col: start.col + 1
              };
              this.linePos = {
                start: start,
                end: end
              };
            }

            delete this.offset;
          } else {
            this.range = this.source.range;
            this.linePos = this.source.rangeAsLinePos;
          }

          if (this.linePos) {
            var _this$linePos$start = this.linePos.start,
                line = _this$linePos$start.line,
                col = _this$linePos$start.col;
            this.message += " at line ".concat(line, ", column ").concat(col);
            var ctx = cst && getPrettyContext(this.linePos, cst);
            if (ctx) this.message += ":\n\n".concat(ctx, "\n");
          }

          delete this.source;
        }
      }]);

      return YAMLError;
    }(_wrapNativeSuper(Error));

    var YAMLReferenceError =
    /*#__PURE__*/
    function (_YAMLError) {
      _inherits(YAMLReferenceError, _YAMLError);

      function YAMLReferenceError(source, message) {
        _classCallCheck(this, YAMLReferenceError);

        return _possibleConstructorReturn(this, _getPrototypeOf(YAMLReferenceError).call(this, "YAMLReferenceError", source, message));
      }

      return YAMLReferenceError;
    }(YAMLError);

    var YAMLSemanticError =
    /*#__PURE__*/
    function (_YAMLError2) {
      _inherits(YAMLSemanticError, _YAMLError2);

      function YAMLSemanticError(source, message) {
        _classCallCheck(this, YAMLSemanticError);

        return _possibleConstructorReturn(this, _getPrototypeOf(YAMLSemanticError).call(this, "YAMLSemanticError", source, message));
      }

      return YAMLSemanticError;
    }(YAMLError);

    var YAMLSyntaxError =
    /*#__PURE__*/
    function (_YAMLError3) {
      _inherits(YAMLSyntaxError, _YAMLError3);

      function YAMLSyntaxError(source, message) {
        _classCallCheck(this, YAMLSyntaxError);

        return _possibleConstructorReturn(this, _getPrototypeOf(YAMLSyntaxError).call(this, "YAMLSyntaxError", source, message));
      }

      return YAMLSyntaxError;
    }(YAMLError);

    var YAMLWarning =
    /*#__PURE__*/
    function (_YAMLError4) {
      _inherits(YAMLWarning, _YAMLError4);

      function YAMLWarning(source, message) {
        _classCallCheck(this, YAMLWarning);

        return _possibleConstructorReturn(this, _getPrototypeOf(YAMLWarning).call(this, "YAMLWarning", source, message));
      }

      return YAMLWarning;
    }(YAMLError);

    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }

      return obj;
    }

    var PlainValue =
    /*#__PURE__*/
    function (_Node) {
      _inherits(PlainValue, _Node);

      function PlainValue() {
        _classCallCheck(this, PlainValue);

        return _possibleConstructorReturn(this, _getPrototypeOf(PlainValue).apply(this, arguments));
      }

      _createClass(PlainValue, [{
        key: "parseBlockValue",
        value: function parseBlockValue(start) {
          var _this$context = this.context,
              indent = _this$context.indent,
              inFlow = _this$context.inFlow,
              src = _this$context.src;
          var offset = start;
          var valueEnd = start;

          for (var ch = src[offset]; ch === "\n"; ch = src[offset]) {
            if (Node.atDocumentBoundary(src, offset + 1)) break;
            var end = Node.endOfBlockIndent(src, indent, offset + 1);
            if (end === null || src[end] === "#") break;

            if (src[end] === "\n") {
              offset = end;
            } else {
              valueEnd = PlainValue.endOfLine(src, end, inFlow);
              offset = valueEnd;
            }
          }

          if (this.valueRange.isEmpty()) this.valueRange.start = start;
          this.valueRange.end = valueEnd;
          return valueEnd;
        }
      }, {
        key: "parse",
        value: function parse(context, start) {
          this.context = context;
          var inFlow = context.inFlow,
              src = context.src;
          var offset = start;
          var ch = src[offset];

          if (ch && ch !== "#" && ch !== "\n") {
            offset = PlainValue.endOfLine(src, start, inFlow);
          }

          this.valueRange = new Range(start, offset);
          offset = Node.endOfWhiteSpace(src, offset);
          offset = this.parseComment(offset);

          if (!this.hasComment || this.valueRange.isEmpty()) {
            offset = this.parseBlockValue(offset);
          }

          return offset;
        }
      }, {
        key: "strValue",
        get: function get() {
          if (!this.valueRange || !this.context) return null;
          var _this$valueRange3 = this.valueRange,
              start = _this$valueRange3.start,
              end = _this$valueRange3.end;
          var src = this.context.src;
          var ch = src[end - 1];

          while (start < end && (ch === "\n" || ch === "	" || ch === " ")) {
            ch = src[--end - 1];
          }

          var str = "";

          for (var i = start; i < end; ++i) {
            var ch2 = src[i];

            if (ch2 === "\n") {
              var _Node$foldNewline = Node.foldNewline(src, i, -1),
                  fold = _Node$foldNewline.fold,
                  offset = _Node$foldNewline.offset;

              str += fold;
              i = offset;
            } else if (ch2 === " " || ch2 === "	") {
              var wsStart = i;
              var next = src[i + 1];

              while (i < end && (next === " " || next === "	")) {
                i += 1;
                next = src[i + 1];
              }

              if (next !== "\n") str += i > wsStart ? src.slice(wsStart, i + 1) : ch2;
            } else {
              str += ch2;
            }
          }

          var ch0 = src[start];

          switch (ch0) {
            case "	":
              {
                var msg = "Plain value cannot start with a tab character";
                var errors = [new YAMLSemanticError(this, msg)];
                return {
                  errors: errors,
                  str: str
                };
              }

            case "@":
            case "`":
              {
                var _msg = "Plain value cannot start with reserved character ".concat(ch0);

                var _errors = [new YAMLSemanticError(this, _msg)];
                return {
                  errors: _errors,
                  str: str
                };
              }

            default:
              return str;
          }
        }
      }], [{
        key: "endOfLine",
        value: function endOfLine(src, start, inFlow) {
          var ch = src[start];
          var offset = start;

          while (ch && ch !== "\n") {
            if (inFlow && (ch === "[" || ch === "]" || ch === "{" || ch === "}" || ch === ",")) break;
            var next = src[offset + 1];
            if (ch === ":" && (!next || next === "\n" || next === "	" || next === " " || inFlow && next === ",")) break;
            if ((ch === " " || ch === "	") && next === "#") break;
            offset += 1;
            ch = next;
          }

          return offset;
        }
      }]);

      return PlainValue;
    }(Node);

    exports2.Char = Char;
    exports2.Node = Node;
    exports2.PlainValue = PlainValue;
    exports2.Range = Range;
    exports2.Type = Type;
    exports2.YAMLError = YAMLError;
    exports2.YAMLReferenceError = YAMLReferenceError;
    exports2.YAMLSemanticError = YAMLSemanticError;
    exports2.YAMLSyntaxError = YAMLSyntaxError;
    exports2.YAMLWarning = YAMLWarning;
    exports2._defineProperty = _defineProperty;
    exports2.defaultTagPrefix = defaultTagPrefix;
    exports2.defaultTags = defaultTags;
  }
});

var require_parse_cst = __commonJS({
  "node_modules/yaml/dist/parse-cst.js": function node_modulesYamlDistParseCstJs(exports2) {
    "use strict";

    var PlainValue = require_PlainValue_ec8e588e();

    var BlankLine =
    /*#__PURE__*/
    function (_PlainValue$Node) {
      _inherits(BlankLine, _PlainValue$Node);

      function BlankLine() {
        _classCallCheck(this, BlankLine);

        return _possibleConstructorReturn(this, _getPrototypeOf(BlankLine).call(this, PlainValue.Type.BLANK_LINE));
      }

      _createClass(BlankLine, [{
        key: "parse",
        value: function parse(context, start) {
          this.context = context;
          this.range = new PlainValue.Range(start, start + 1);
          return start + 1;
        }
      }, {
        key: "includesTrailingLines",
        get: function get() {
          return true;
        }
      }]);

      return BlankLine;
    }(PlainValue.Node);

    var CollectionItem =
    /*#__PURE__*/
    function (_PlainValue$Node2) {
      _inherits(CollectionItem, _PlainValue$Node2);

      function CollectionItem(type, props) {
        var _this3;

        _classCallCheck(this, CollectionItem);

        _this3 = _possibleConstructorReturn(this, _getPrototypeOf(CollectionItem).call(this, type, props));
        _this3.node = null;
        return _this3;
      }

      _createClass(CollectionItem, [{
        key: "parse",
        value: function parse(context, start) {
          this.context = context;
          var parseNode = context.parseNode,
              src = context.src;
          var atLineStart = context.atLineStart,
              lineStart = context.lineStart;
          if (!atLineStart && this.type === PlainValue.Type.SEQ_ITEM) this.error = new PlainValue.YAMLSemanticError(this, "Sequence items must not have preceding content on the same line");
          var indent = atLineStart ? start - lineStart : context.indent;
          var offset = PlainValue.Node.endOfWhiteSpace(src, start + 1);
          var ch = src[offset];
          var inlineComment = ch === "#";
          var comments = [];
          var blankLine = null;

          while (ch === "\n" || ch === "#") {
            if (ch === "#") {
              var end2 = PlainValue.Node.endOfLine(src, offset + 1);
              comments.push(new PlainValue.Range(offset, end2));
              offset = end2;
            } else {
              atLineStart = true;
              lineStart = offset + 1;
              var wsEnd = PlainValue.Node.endOfWhiteSpace(src, lineStart);

              if (src[wsEnd] === "\n" && comments.length === 0) {
                blankLine = new BlankLine();
                lineStart = blankLine.parse({
                  src: src
                }, lineStart);
              }

              offset = PlainValue.Node.endOfIndent(src, lineStart);
            }

            ch = src[offset];
          }

          if (PlainValue.Node.nextNodeIsIndented(ch, offset - (lineStart + indent), this.type !== PlainValue.Type.SEQ_ITEM)) {
            this.node = parseNode({
              atLineStart: atLineStart,
              inCollection: false,
              indent: indent,
              lineStart: lineStart,
              parent: this
            }, offset);
          } else if (ch && lineStart > start + 1) {
            offset = lineStart - 1;
          }

          if (this.node) {
            if (blankLine) {
              var items = context.parent.items || context.parent.contents;
              if (items) items.push(blankLine);
            }

            if (comments.length) Array.prototype.push.apply(this.props, comments);
            offset = this.node.range.end;
          } else {
            if (inlineComment) {
              var c = comments[0];
              this.props.push(c);
              offset = c.end;
            } else {
              offset = PlainValue.Node.endOfLine(src, start + 1);
            }
          }

          var end = this.node ? this.node.valueRange.end : offset;
          this.valueRange = new PlainValue.Range(start, end);
          return offset;
        }
      }, {
        key: "setOrigRanges",
        value: function setOrigRanges(cr, offset) {
          offset = _get(_getPrototypeOf(CollectionItem.prototype), "setOrigRanges", this).call(this, cr, offset);
          return this.node ? this.node.setOrigRanges(cr, offset) : offset;
        }
      }, {
        key: "toString",
        value: function toString() {
          var src = this.context.src,
              node = this.node,
              range = this.range,
              value = this.value;
          if (value != null) return value;
          var str = node ? src.slice(range.start, node.range.start) + String(node) : src.slice(range.start, range.end);
          return PlainValue.Node.addStringTerminator(src, range.end, str);
        }
      }, {
        key: "includesTrailingLines",
        get: function get() {
          return !!this.node && this.node.includesTrailingLines;
        }
      }]);

      return CollectionItem;
    }(PlainValue.Node);

    var Comment =
    /*#__PURE__*/
    function (_PlainValue$Node3) {
      _inherits(Comment, _PlainValue$Node3);

      function Comment() {
        _classCallCheck(this, Comment);

        return _possibleConstructorReturn(this, _getPrototypeOf(Comment).call(this, PlainValue.Type.COMMENT));
      }

      _createClass(Comment, [{
        key: "parse",
        value: function parse(context, start) {
          this.context = context;
          var offset = this.parseComment(start);
          this.range = new PlainValue.Range(start, offset);
          return offset;
        }
      }]);

      return Comment;
    }(PlainValue.Node);

    function grabCollectionEndComments(node) {
      var cnode = node;

      while (cnode instanceof CollectionItem) {
        cnode = cnode.node;
      }

      if (!(cnode instanceof Collection)) return null;
      var len = cnode.items.length;
      var ci = -1;

      for (var i = len - 1; i >= 0; --i) {
        var n = cnode.items[i];

        if (n.type === PlainValue.Type.COMMENT) {
          var _n$context = n.context,
              indent = _n$context.indent,
              lineStart = _n$context.lineStart;
          if (indent > 0 && n.range.start >= lineStart + indent) break;
          ci = i;
        } else if (n.type === PlainValue.Type.BLANK_LINE) ci = i;else break;
      }

      if (ci === -1) return null;
      var ca = cnode.items.splice(ci, len - ci);
      var prevEnd = ca[0].range.start;

      while (true) {
        cnode.range.end = prevEnd;
        if (cnode.valueRange && cnode.valueRange.end > prevEnd) cnode.valueRange.end = prevEnd;
        if (cnode === node) break;
        cnode = cnode.context.parent;
      }

      return ca;
    }

    var Collection =
    /*#__PURE__*/
    function (_PlainValue$Node4) {
      _inherits(Collection, _PlainValue$Node4);

      _createClass(Collection, null, [{
        key: "nextContentHasIndent",
        value: function nextContentHasIndent(src, offset, indent) {
          var lineStart = PlainValue.Node.endOfLine(src, offset) + 1;
          offset = PlainValue.Node.endOfWhiteSpace(src, lineStart);
          var ch = src[offset];
          if (!ch) return false;
          if (offset >= lineStart + indent) return true;
          if (ch !== "#" && ch !== "\n") return false;
          return Collection.nextContentHasIndent(src, offset, indent);
        }
      }]);

      function Collection(firstItem) {
        var _this4;

        _classCallCheck(this, Collection);

        _this4 = _possibleConstructorReturn(this, _getPrototypeOf(Collection).call(this, firstItem.type === PlainValue.Type.SEQ_ITEM ? PlainValue.Type.SEQ : PlainValue.Type.MAP));

        for (var i = firstItem.props.length - 1; i >= 0; --i) {
          if (firstItem.props[i].start < firstItem.context.lineStart) {
            _this4.props = firstItem.props.slice(0, i + 1);
            firstItem.props = firstItem.props.slice(i + 1);
            var itemRange = firstItem.props[0] || firstItem.valueRange;
            firstItem.range.start = itemRange.start;
            break;
          }
        }

        _this4.items = [firstItem];
        var ec = grabCollectionEndComments(firstItem);
        if (ec) Array.prototype.push.apply(_this4.items, ec);
        return _this4;
      }

      _createClass(Collection, [{
        key: "parse",
        value: function parse(context, start) {
          this.context = context;
          var parseNode = context.parseNode,
              src = context.src;
          var lineStart = PlainValue.Node.startOfLine(src, start);
          var firstItem = this.items[0];
          firstItem.context.parent = this;
          this.valueRange = PlainValue.Range.copy(firstItem.valueRange);
          var indent = firstItem.range.start - firstItem.context.lineStart;
          var offset = start;
          offset = PlainValue.Node.normalizeOffset(src, offset);
          var ch = src[offset];
          var atLineStart = PlainValue.Node.endOfWhiteSpace(src, lineStart) === offset;
          var prevIncludesTrailingLines = false;

          while (ch) {
            while (ch === "\n" || ch === "#") {
              if (atLineStart && ch === "\n" && !prevIncludesTrailingLines) {
                var blankLine = new BlankLine();
                offset = blankLine.parse({
                  src: src
                }, offset);
                this.valueRange.end = offset;

                if (offset >= src.length) {
                  ch = null;
                  break;
                }

                this.items.push(blankLine);
                offset -= 1;
              } else if (ch === "#") {
                if (offset < lineStart + indent && !Collection.nextContentHasIndent(src, offset, indent)) {
                  return offset;
                }

                var comment = new Comment();
                offset = comment.parse({
                  indent: indent,
                  lineStart: lineStart,
                  src: src
                }, offset);
                this.items.push(comment);
                this.valueRange.end = offset;

                if (offset >= src.length) {
                  ch = null;
                  break;
                }
              }

              lineStart = offset + 1;
              offset = PlainValue.Node.endOfIndent(src, lineStart);

              if (PlainValue.Node.atBlank(src, offset)) {
                var wsEnd = PlainValue.Node.endOfWhiteSpace(src, offset);
                var next = src[wsEnd];

                if (!next || next === "\n" || next === "#") {
                  offset = wsEnd;
                }
              }

              ch = src[offset];
              atLineStart = true;
            }

            if (!ch) {
              break;
            }

            if (offset !== lineStart + indent && (atLineStart || ch !== ":")) {
              if (offset < lineStart + indent) {
                if (lineStart > start) offset = lineStart;
                break;
              } else if (!this.error) {
                var msg = "All collection items must start at the same column";
                this.error = new PlainValue.YAMLSyntaxError(this, msg);
              }
            }

            if (firstItem.type === PlainValue.Type.SEQ_ITEM) {
              if (ch !== "-") {
                if (lineStart > start) offset = lineStart;
                break;
              }
            } else if (ch === "-" && !this.error) {
              var _next = src[offset + 1];

              if (!_next || _next === "\n" || _next === "	" || _next === " ") {
                var _msg2 = "A collection cannot be both a mapping and a sequence";
                this.error = new PlainValue.YAMLSyntaxError(this, _msg2);
              }
            }

            var node = parseNode({
              atLineStart: atLineStart,
              inCollection: true,
              indent: indent,
              lineStart: lineStart,
              parent: this
            }, offset);
            if (!node) return offset;
            this.items.push(node);
            this.valueRange.end = node.valueRange.end;
            offset = PlainValue.Node.normalizeOffset(src, node.range.end);
            ch = src[offset];
            atLineStart = false;
            prevIncludesTrailingLines = node.includesTrailingLines;

            if (ch) {
              var ls = offset - 1;
              var prev = src[ls];

              while (prev === " " || prev === "	") {
                prev = src[--ls];
              }

              if (prev === "\n") {
                lineStart = ls + 1;
                atLineStart = true;
              }
            }

            var ec = grabCollectionEndComments(node);
            if (ec) Array.prototype.push.apply(this.items, ec);
          }

          return offset;
        }
      }, {
        key: "setOrigRanges",
        value: function setOrigRanges(cr, offset) {
          offset = _get(_getPrototypeOf(Collection.prototype), "setOrigRanges", this).call(this, cr, offset);
          this.items.forEach(function (node) {
            offset = node.setOrigRanges(cr, offset);
          });
          return offset;
        }
      }, {
        key: "toString",
        value: function toString() {
          var src = this.context.src,
              items = this.items,
              range = this.range,
              value = this.value;
          if (value != null) return value;
          var str = src.slice(range.start, items[0].range.start) + String(items[0]);

          for (var i = 1; i < items.length; ++i) {
            var item = items[i];
            var _item$context = item.context,
                atLineStart = _item$context.atLineStart,
                indent = _item$context.indent;
            if (atLineStart) for (var i2 = 0; i2 < indent; ++i2) {
              str += " ";
            }
            str += String(item);
          }

          return PlainValue.Node.addStringTerminator(src, range.end, str);
        }
      }, {
        key: "includesTrailingLines",
        get: function get() {
          return this.items.length > 0;
        }
      }]);

      return Collection;
    }(PlainValue.Node);

    var Directive =
    /*#__PURE__*/
    function (_PlainValue$Node5) {
      _inherits(Directive, _PlainValue$Node5);

      function Directive() {
        var _this5;

        _classCallCheck(this, Directive);

        _this5 = _possibleConstructorReturn(this, _getPrototypeOf(Directive).call(this, PlainValue.Type.DIRECTIVE));
        _this5.name = null;
        return _this5;
      }

      _createClass(Directive, [{
        key: "parseName",
        value: function parseName(start) {
          var src = this.context.src;
          var offset = start;
          var ch = src[offset];

          while (ch && ch !== "\n" && ch !== "	" && ch !== " ") {
            ch = src[offset += 1];
          }

          this.name = src.slice(start, offset);
          return offset;
        }
      }, {
        key: "parseParameters",
        value: function parseParameters(start) {
          var src = this.context.src;
          var offset = start;
          var ch = src[offset];

          while (ch && ch !== "\n" && ch !== "#") {
            ch = src[offset += 1];
          }

          this.valueRange = new PlainValue.Range(start, offset);
          return offset;
        }
      }, {
        key: "parse",
        value: function parse(context, start) {
          this.context = context;
          var offset = this.parseName(start + 1);
          offset = this.parseParameters(offset);
          offset = this.parseComment(offset);
          this.range = new PlainValue.Range(start, offset);
          return offset;
        }
      }, {
        key: "parameters",
        get: function get() {
          var raw = this.rawValue;
          return raw ? raw.trim().split(/[ \t]+/) : [];
        }
      }]);

      return Directive;
    }(PlainValue.Node);

    var Document =
    /*#__PURE__*/
    function (_PlainValue$Node6) {
      _inherits(Document, _PlainValue$Node6);

      _createClass(Document, null, [{
        key: "startCommentOrEndBlankLine",
        value: function startCommentOrEndBlankLine(src, start) {
          var offset = PlainValue.Node.endOfWhiteSpace(src, start);
          var ch = src[offset];
          return ch === "#" || ch === "\n" ? offset : start;
        }
      }]);

      function Document() {
        var _this6;

        _classCallCheck(this, Document);

        _this6 = _possibleConstructorReturn(this, _getPrototypeOf(Document).call(this, PlainValue.Type.DOCUMENT));
        _this6.directives = null;
        _this6.contents = null;
        _this6.directivesEndMarker = null;
        _this6.documentEndMarker = null;
        return _this6;
      }

      _createClass(Document, [{
        key: "parseDirectives",
        value: function parseDirectives(start) {
          var src = this.context.src;
          this.directives = [];
          var atLineStart = true;
          var hasDirectives = false;
          var offset = start;

          while (!PlainValue.Node.atDocumentBoundary(src, offset, PlainValue.Char.DIRECTIVES_END)) {
            offset = Document.startCommentOrEndBlankLine(src, offset);

            switch (src[offset]) {
              case "\n":
                if (atLineStart) {
                  var blankLine = new BlankLine();
                  offset = blankLine.parse({
                    src: src
                  }, offset);

                  if (offset < src.length) {
                    this.directives.push(blankLine);
                  }
                } else {
                  offset += 1;
                  atLineStart = true;
                }

                break;

              case "#":
                {
                  var comment = new Comment();
                  offset = comment.parse({
                    src: src
                  }, offset);
                  this.directives.push(comment);
                  atLineStart = false;
                }
                break;

              case "%":
                {
                  var directive = new Directive();
                  offset = directive.parse({
                    parent: this,
                    src: src
                  }, offset);
                  this.directives.push(directive);
                  hasDirectives = true;
                  atLineStart = false;
                }
                break;

              default:
                if (hasDirectives) {
                  this.error = new PlainValue.YAMLSemanticError(this, "Missing directives-end indicator line");
                } else if (this.directives.length > 0) {
                  this.contents = this.directives;
                  this.directives = [];
                }

                return offset;
            }
          }

          if (src[offset]) {
            this.directivesEndMarker = new PlainValue.Range(offset, offset + 3);
            return offset + 3;
          }

          if (hasDirectives) {
            this.error = new PlainValue.YAMLSemanticError(this, "Missing directives-end indicator line");
          } else if (this.directives.length > 0) {
            this.contents = this.directives;
            this.directives = [];
          }

          return offset;
        }
      }, {
        key: "parseContents",
        value: function parseContents(start) {
          var _this$context2 = this.context,
              parseNode = _this$context2.parseNode,
              src = _this$context2.src;
          if (!this.contents) this.contents = [];
          var lineStart = start;

          while (src[lineStart - 1] === "-") {
            lineStart -= 1;
          }

          var offset = PlainValue.Node.endOfWhiteSpace(src, start);
          var atLineStart = lineStart === start;
          this.valueRange = new PlainValue.Range(offset);

          while (!PlainValue.Node.atDocumentBoundary(src, offset, PlainValue.Char.DOCUMENT_END)) {
            switch (src[offset]) {
              case "\n":
                if (atLineStart) {
                  var blankLine = new BlankLine();
                  offset = blankLine.parse({
                    src: src
                  }, offset);

                  if (offset < src.length) {
                    this.contents.push(blankLine);
                  }
                } else {
                  offset += 1;
                  atLineStart = true;
                }

                lineStart = offset;
                break;

              case "#":
                {
                  var comment = new Comment();
                  offset = comment.parse({
                    src: src
                  }, offset);
                  this.contents.push(comment);
                  atLineStart = false;
                }
                break;

              default:
                {
                  var iEnd = PlainValue.Node.endOfIndent(src, offset);
                  var context = {
                    atLineStart: atLineStart,
                    indent: -1,
                    inFlow: false,
                    inCollection: false,
                    lineStart: lineStart,
                    parent: this
                  };
                  var node = parseNode(context, iEnd);
                  if (!node) return this.valueRange.end = iEnd;
                  this.contents.push(node);
                  offset = node.range.end;
                  atLineStart = false;
                  var ec = grabCollectionEndComments(node);
                  if (ec) Array.prototype.push.apply(this.contents, ec);
                }
            }

            offset = Document.startCommentOrEndBlankLine(src, offset);
          }

          this.valueRange.end = offset;

          if (src[offset]) {
            this.documentEndMarker = new PlainValue.Range(offset, offset + 3);
            offset += 3;

            if (src[offset]) {
              offset = PlainValue.Node.endOfWhiteSpace(src, offset);

              if (src[offset] === "#") {
                var _comment = new Comment();

                offset = _comment.parse({
                  src: src
                }, offset);
                this.contents.push(_comment);
              }

              switch (src[offset]) {
                case "\n":
                  offset += 1;
                  break;

                case void 0:
                  break;

                default:
                  this.error = new PlainValue.YAMLSyntaxError(this, "Document end marker line cannot have a non-comment suffix");
              }
            }
          }

          return offset;
        }
      }, {
        key: "parse",
        value: function parse(context, start) {
          context.root = this;
          this.context = context;
          var src = context.src;
          var offset = src.charCodeAt(start) === 65279 ? start + 1 : start;
          offset = this.parseDirectives(offset);
          offset = this.parseContents(offset);
          return offset;
        }
      }, {
        key: "setOrigRanges",
        value: function setOrigRanges(cr, offset) {
          offset = _get(_getPrototypeOf(Document.prototype), "setOrigRanges", this).call(this, cr, offset);
          this.directives.forEach(function (node) {
            offset = node.setOrigRanges(cr, offset);
          });
          if (this.directivesEndMarker) offset = this.directivesEndMarker.setOrigRange(cr, offset);
          this.contents.forEach(function (node) {
            offset = node.setOrigRanges(cr, offset);
          });
          if (this.documentEndMarker) offset = this.documentEndMarker.setOrigRange(cr, offset);
          return offset;
        }
      }, {
        key: "toString",
        value: function toString() {
          var contents = this.contents,
              directives = this.directives,
              value = this.value;
          if (value != null) return value;
          var str = directives.join("");

          if (contents.length > 0) {
            if (directives.length > 0 || contents[0].type === PlainValue.Type.COMMENT) str += "---\n";
            str += contents.join("");
          }

          if (str[str.length - 1] !== "\n") str += "\n";
          return str;
        }
      }]);

      return Document;
    }(PlainValue.Node);

    var Alias =
    /*#__PURE__*/
    function (_PlainValue$Node7) {
      _inherits(Alias, _PlainValue$Node7);

      function Alias() {
        _classCallCheck(this, Alias);

        return _possibleConstructorReturn(this, _getPrototypeOf(Alias).apply(this, arguments));
      }

      _createClass(Alias, [{
        key: "parse",
        value: function parse(context, start) {
          this.context = context;
          var src = context.src;
          var offset = PlainValue.Node.endOfIdentifier(src, start + 1);
          this.valueRange = new PlainValue.Range(start + 1, offset);
          offset = PlainValue.Node.endOfWhiteSpace(src, offset);
          offset = this.parseComment(offset);
          return offset;
        }
      }]);

      return Alias;
    }(PlainValue.Node);

    var Chomp = {
      CLIP: "CLIP",
      KEEP: "KEEP",
      STRIP: "STRIP"
    };

    var BlockValue =
    /*#__PURE__*/
    function (_PlainValue$Node8) {
      _inherits(BlockValue, _PlainValue$Node8);

      function BlockValue(type, props) {
        var _this7;

        _classCallCheck(this, BlockValue);

        _this7 = _possibleConstructorReturn(this, _getPrototypeOf(BlockValue).call(this, type, props));
        _this7.blockIndent = null;
        _this7.chomping = Chomp.CLIP;
        _this7.header = null;
        return _this7;
      }

      _createClass(BlockValue, [{
        key: "parseBlockHeader",
        value: function parseBlockHeader(start) {
          var src = this.context.src;
          var offset = start + 1;
          var bi = "";

          while (true) {
            var ch = src[offset];

            switch (ch) {
              case "-":
                this.chomping = Chomp.STRIP;
                break;

              case "+":
                this.chomping = Chomp.KEEP;
                break;

              case "0":
              case "1":
              case "2":
              case "3":
              case "4":
              case "5":
              case "6":
              case "7":
              case "8":
              case "9":
                bi += ch;
                break;

              default:
                this.blockIndent = Number(bi) || null;
                this.header = new PlainValue.Range(start, offset);
                return offset;
            }

            offset += 1;
          }
        }
      }, {
        key: "parseBlockValue",
        value: function parseBlockValue(start) {
          var _this$context3 = this.context,
              indent = _this$context3.indent,
              src = _this$context3.src;
          var explicit = !!this.blockIndent;
          var offset = start;
          var valueEnd = start;
          var minBlockIndent = 1;

          for (var ch = src[offset]; ch === "\n"; ch = src[offset]) {
            offset += 1;
            if (PlainValue.Node.atDocumentBoundary(src, offset)) break;
            var end = PlainValue.Node.endOfBlockIndent(src, indent, offset);
            if (end === null) break;
            var ch2 = src[end];
            var lineIndent = end - (offset + indent);

            if (!this.blockIndent) {
              if (src[end] !== "\n") {
                if (lineIndent < minBlockIndent) {
                  var msg = "Block scalars with more-indented leading empty lines must use an explicit indentation indicator";
                  this.error = new PlainValue.YAMLSemanticError(this, msg);
                }

                this.blockIndent = lineIndent;
              } else if (lineIndent > minBlockIndent) {
                minBlockIndent = lineIndent;
              }
            } else if (ch2 && ch2 !== "\n" && lineIndent < this.blockIndent) {
              if (src[end] === "#") break;

              if (!this.error) {
                var src2 = explicit ? "explicit indentation indicator" : "first line";

                var _msg3 = "Block scalars must not be less indented than their ".concat(src2);

                this.error = new PlainValue.YAMLSemanticError(this, _msg3);
              }
            }

            if (src[end] === "\n") {
              offset = end;
            } else {
              offset = valueEnd = PlainValue.Node.endOfLine(src, end);
            }
          }

          if (this.chomping !== Chomp.KEEP) {
            offset = src[valueEnd] ? valueEnd + 1 : valueEnd;
          }

          this.valueRange = new PlainValue.Range(start + 1, offset);
          return offset;
        }
      }, {
        key: "parse",
        value: function parse(context, start) {
          this.context = context;
          var src = context.src;
          var offset = this.parseBlockHeader(start);
          offset = PlainValue.Node.endOfWhiteSpace(src, offset);
          offset = this.parseComment(offset);
          offset = this.parseBlockValue(offset);
          return offset;
        }
      }, {
        key: "setOrigRanges",
        value: function setOrigRanges(cr, offset) {
          offset = _get(_getPrototypeOf(BlockValue.prototype), "setOrigRanges", this).call(this, cr, offset);
          return this.header ? this.header.setOrigRange(cr, offset) : offset;
        }
      }, {
        key: "includesTrailingLines",
        get: function get() {
          return this.chomping === Chomp.KEEP;
        }
      }, {
        key: "strValue",
        get: function get() {
          if (!this.valueRange || !this.context) return null;
          var _this$valueRange4 = this.valueRange,
              start = _this$valueRange4.start,
              end = _this$valueRange4.end;
          var _this$context4 = this.context,
              indent = _this$context4.indent,
              src = _this$context4.src;
          if (this.valueRange.isEmpty()) return "";
          var lastNewLine = null;
          var ch = src[end - 1];

          while (ch === "\n" || ch === "	" || ch === " ") {
            end -= 1;

            if (end <= start) {
              if (this.chomping === Chomp.KEEP) break;else return "";
            }

            if (ch === "\n") lastNewLine = end;
            ch = src[end - 1];
          }

          var keepStart = end + 1;

          if (lastNewLine) {
            if (this.chomping === Chomp.KEEP) {
              keepStart = lastNewLine;
              end = this.valueRange.end;
            } else {
              end = lastNewLine;
            }
          }

          var bi = indent + this.blockIndent;
          var folded = this.type === PlainValue.Type.BLOCK_FOLDED;
          var atStart = true;
          var str = "";
          var sep = "";
          var prevMoreIndented = false;

          for (var i = start; i < end; ++i) {
            for (var j = 0; j < bi; ++j) {
              if (src[i] !== " ") break;
              i += 1;
            }

            var ch2 = src[i];

            if (ch2 === "\n") {
              if (sep === "\n") str += "\n";else sep = "\n";
            } else {
              var lineEnd = PlainValue.Node.endOfLine(src, i);
              var line = src.slice(i, lineEnd);
              i = lineEnd;

              if (folded && (ch2 === " " || ch2 === "	") && i < keepStart) {
                if (sep === " ") sep = "\n";else if (!prevMoreIndented && !atStart && sep === "\n") sep = "\n\n";
                str += sep + line;
                sep = lineEnd < end && src[lineEnd] || "";
                prevMoreIndented = true;
              } else {
                str += sep + line;
                sep = folded && i < keepStart ? " " : "\n";
                prevMoreIndented = false;
              }

              if (atStart && line !== "") atStart = false;
            }
          }

          return this.chomping === Chomp.STRIP ? str : str + "\n";
        }
      }]);

      return BlockValue;
    }(PlainValue.Node);

    var FlowCollection =
    /*#__PURE__*/
    function (_PlainValue$Node9) {
      _inherits(FlowCollection, _PlainValue$Node9);

      function FlowCollection(type, props) {
        var _this8;

        _classCallCheck(this, FlowCollection);

        _this8 = _possibleConstructorReturn(this, _getPrototypeOf(FlowCollection).call(this, type, props));
        _this8.items = null;
        return _this8;
      }

      _createClass(FlowCollection, [{
        key: "prevNodeIsJsonLike",
        value: function prevNodeIsJsonLike() {
          var idx = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.items.length;
          var node = this.items[idx - 1];
          return !!node && (node.jsonLike || node.type === PlainValue.Type.COMMENT && this.prevNodeIsJsonLike(idx - 1));
        }
      }, {
        key: "parse",
        value: function parse(context, start) {
          this.context = context;
          var parseNode = context.parseNode,
              src = context.src;
          var indent = context.indent,
              lineStart = context.lineStart;
          var _char3 = src[start];
          this.items = [{
            "char": _char3,
            offset: start
          }];
          var offset = PlainValue.Node.endOfWhiteSpace(src, start + 1);
          _char3 = src[offset];

          while (_char3 && _char3 !== "]" && _char3 !== "}") {
            switch (_char3) {
              case "\n":
                {
                  lineStart = offset + 1;
                  var wsEnd = PlainValue.Node.endOfWhiteSpace(src, lineStart);

                  if (src[wsEnd] === "\n") {
                    var blankLine = new BlankLine();
                    lineStart = blankLine.parse({
                      src: src
                    }, lineStart);
                    this.items.push(blankLine);
                  }

                  offset = PlainValue.Node.endOfIndent(src, lineStart);

                  if (offset <= lineStart + indent) {
                    _char3 = src[offset];

                    if (offset < lineStart + indent || _char3 !== "]" && _char3 !== "}") {
                      var msg = "Insufficient indentation in flow collection";
                      this.error = new PlainValue.YAMLSemanticError(this, msg);
                    }
                  }
                }
                break;

              case ",":
                {
                  this.items.push({
                    "char": _char3,
                    offset: offset
                  });
                  offset += 1;
                }
                break;

              case "#":
                {
                  var comment = new Comment();
                  offset = comment.parse({
                    src: src
                  }, offset);
                  this.items.push(comment);
                }
                break;

              case "?":
              case ":":
                {
                  var next = src[offset + 1];

                  if (next === "\n" || next === "	" || next === " " || next === "," || _char3 === ":" && this.prevNodeIsJsonLike()) {
                    this.items.push({
                      "char": _char3,
                      offset: offset
                    });
                    offset += 1;
                    break;
                  }
                }

              default:
                {
                  var node = parseNode({
                    atLineStart: false,
                    inCollection: false,
                    inFlow: true,
                    indent: -1,
                    lineStart: lineStart,
                    parent: this
                  }, offset);

                  if (!node) {
                    this.valueRange = new PlainValue.Range(start, offset);
                    return offset;
                  }

                  this.items.push(node);
                  offset = PlainValue.Node.normalizeOffset(src, node.range.end);
                }
            }

            offset = PlainValue.Node.endOfWhiteSpace(src, offset);
            _char3 = src[offset];
          }

          this.valueRange = new PlainValue.Range(start, offset + 1);

          if (_char3) {
            this.items.push({
              "char": _char3,
              offset: offset
            });
            offset = PlainValue.Node.endOfWhiteSpace(src, offset + 1);
            offset = this.parseComment(offset);
          }

          return offset;
        }
      }, {
        key: "setOrigRanges",
        value: function setOrigRanges(cr, offset) {
          offset = _get(_getPrototypeOf(FlowCollection.prototype), "setOrigRanges", this).call(this, cr, offset);
          this.items.forEach(function (node) {
            if (node instanceof PlainValue.Node) {
              offset = node.setOrigRanges(cr, offset);
            } else if (cr.length === 0) {
              node.origOffset = node.offset;
            } else {
              var i = offset;

              while (i < cr.length) {
                if (cr[i] > node.offset) break;else ++i;
              }

              node.origOffset = node.offset + i;
              offset = i;
            }
          });
          return offset;
        }
      }, {
        key: "toString",
        value: function toString() {
          var src = this.context.src,
              items = this.items,
              range = this.range,
              value = this.value;
          if (value != null) return value;
          var nodes = items.filter(function (item) {
            return item instanceof PlainValue.Node;
          });
          var str = "";
          var prevEnd = range.start;
          nodes.forEach(function (node) {
            var prefix = src.slice(prevEnd, node.range.start);
            prevEnd = node.range.end;
            str += prefix + String(node);

            if (str[str.length - 1] === "\n" && src[prevEnd - 1] !== "\n" && src[prevEnd] === "\n") {
              prevEnd += 1;
            }
          });
          str += src.slice(prevEnd, range.end);
          return PlainValue.Node.addStringTerminator(src, range.end, str);
        }
      }]);

      return FlowCollection;
    }(PlainValue.Node);

    var QuoteDouble =
    /*#__PURE__*/
    function (_PlainValue$Node10) {
      _inherits(QuoteDouble, _PlainValue$Node10);

      function QuoteDouble() {
        _classCallCheck(this, QuoteDouble);

        return _possibleConstructorReturn(this, _getPrototypeOf(QuoteDouble).apply(this, arguments));
      }

      _createClass(QuoteDouble, [{
        key: "parseCharCode",
        value: function parseCharCode(offset, length, errors) {
          var src = this.context.src;
          var cc = src.substr(offset, length);
          var ok = cc.length === length && /^[0-9a-fA-F]+$/.test(cc);
          var code = ok ? parseInt(cc, 16) : NaN;

          if (isNaN(code)) {
            errors.push(new PlainValue.YAMLSyntaxError(this, "Invalid escape sequence ".concat(src.substr(offset - 2, length + 2))));
            return src.substr(offset - 2, length + 2);
          }

          return String.fromCodePoint(code);
        }
      }, {
        key: "parse",
        value: function parse(context, start) {
          this.context = context;
          var src = context.src;
          var offset = QuoteDouble.endOfQuote(src, start + 1);
          this.valueRange = new PlainValue.Range(start, offset);
          offset = PlainValue.Node.endOfWhiteSpace(src, offset);
          offset = this.parseComment(offset);
          return offset;
        }
      }, {
        key: "strValue",
        get: function get() {
          if (!this.valueRange || !this.context) return null;
          var errors = [];
          var _this$valueRange5 = this.valueRange,
              start = _this$valueRange5.start,
              end = _this$valueRange5.end;
          var _this$context5 = this.context,
              indent = _this$context5.indent,
              src = _this$context5.src;
          if (src[end - 1] !== '"') errors.push(new PlainValue.YAMLSyntaxError(this, 'Missing closing "quote'));
          var str = "";

          for (var i = start + 1; i < end - 1; ++i) {
            var ch = src[i];

            if (ch === "\n") {
              if (PlainValue.Node.atDocumentBoundary(src, i + 1)) errors.push(new PlainValue.YAMLSemanticError(this, "Document boundary indicators are not allowed within string values"));

              var _PlainValue$Node$fold = PlainValue.Node.foldNewline(src, i, indent),
                  fold = _PlainValue$Node$fold.fold,
                  offset = _PlainValue$Node$fold.offset,
                  error = _PlainValue$Node$fold.error;

              str += fold;
              i = offset;
              if (error) errors.push(new PlainValue.YAMLSemanticError(this, "Multi-line double-quoted string needs to be sufficiently indented"));
            } else if (ch === "\\") {
              i += 1;

              switch (src[i]) {
                case "0":
                  str += "\0";
                  break;

                case "a":
                  str += "\x07";
                  break;

                case "b":
                  str += "\b";
                  break;

                case "e":
                  str += "\x1B";
                  break;

                case "f":
                  str += "\f";
                  break;

                case "n":
                  str += "\n";
                  break;

                case "r":
                  str += "\r";
                  break;

                case "t":
                  str += "	";
                  break;

                case "v":
                  str += "\v";
                  break;

                case "N":
                  str += "\x85";
                  break;

                case "_":
                  str += "\xA0";
                  break;

                case "L":
                  str += "\u2028";
                  break;

                case "P":
                  str += "\u2029";
                  break;

                case " ":
                  str += " ";
                  break;

                case '"':
                  str += '"';
                  break;

                case "/":
                  str += "/";
                  break;

                case "\\":
                  str += "\\";
                  break;

                case "	":
                  str += "	";
                  break;

                case "x":
                  str += this.parseCharCode(i + 1, 2, errors);
                  i += 2;
                  break;

                case "u":
                  str += this.parseCharCode(i + 1, 4, errors);
                  i += 4;
                  break;

                case "U":
                  str += this.parseCharCode(i + 1, 8, errors);
                  i += 8;
                  break;

                case "\n":
                  while (src[i + 1] === " " || src[i + 1] === "	") {
                    i += 1;
                  }

                  break;

                default:
                  errors.push(new PlainValue.YAMLSyntaxError(this, "Invalid escape sequence ".concat(src.substr(i - 1, 2))));
                  str += "\\" + src[i];
              }
            } else if (ch === " " || ch === "	") {
              var wsStart = i;
              var next = src[i + 1];

              while (next === " " || next === "	") {
                i += 1;
                next = src[i + 1];
              }

              if (next !== "\n") str += i > wsStart ? src.slice(wsStart, i + 1) : ch;
            } else {
              str += ch;
            }
          }

          return errors.length > 0 ? {
            errors: errors,
            str: str
          } : str;
        }
      }], [{
        key: "endOfQuote",
        value: function endOfQuote(src, offset) {
          var ch = src[offset];

          while (ch && ch !== '"') {
            offset += ch === "\\" ? 2 : 1;
            ch = src[offset];
          }

          return offset + 1;
        }
      }]);

      return QuoteDouble;
    }(PlainValue.Node);

    var QuoteSingle =
    /*#__PURE__*/
    function (_PlainValue$Node11) {
      _inherits(QuoteSingle, _PlainValue$Node11);

      function QuoteSingle() {
        _classCallCheck(this, QuoteSingle);

        return _possibleConstructorReturn(this, _getPrototypeOf(QuoteSingle).apply(this, arguments));
      }

      _createClass(QuoteSingle, [{
        key: "parse",
        value: function parse(context, start) {
          this.context = context;
          var src = context.src;
          var offset = QuoteSingle.endOfQuote(src, start + 1);
          this.valueRange = new PlainValue.Range(start, offset);
          offset = PlainValue.Node.endOfWhiteSpace(src, offset);
          offset = this.parseComment(offset);
          return offset;
        }
      }, {
        key: "strValue",
        get: function get() {
          if (!this.valueRange || !this.context) return null;
          var errors = [];
          var _this$valueRange6 = this.valueRange,
              start = _this$valueRange6.start,
              end = _this$valueRange6.end;
          var _this$context6 = this.context,
              indent = _this$context6.indent,
              src = _this$context6.src;
          if (src[end - 1] !== "'") errors.push(new PlainValue.YAMLSyntaxError(this, "Missing closing 'quote"));
          var str = "";

          for (var i = start + 1; i < end - 1; ++i) {
            var ch = src[i];

            if (ch === "\n") {
              if (PlainValue.Node.atDocumentBoundary(src, i + 1)) errors.push(new PlainValue.YAMLSemanticError(this, "Document boundary indicators are not allowed within string values"));

              var _PlainValue$Node$fold2 = PlainValue.Node.foldNewline(src, i, indent),
                  fold = _PlainValue$Node$fold2.fold,
                  offset = _PlainValue$Node$fold2.offset,
                  error = _PlainValue$Node$fold2.error;

              str += fold;
              i = offset;
              if (error) errors.push(new PlainValue.YAMLSemanticError(this, "Multi-line single-quoted string needs to be sufficiently indented"));
            } else if (ch === "'") {
              str += ch;
              i += 1;
              if (src[i] !== "'") errors.push(new PlainValue.YAMLSyntaxError(this, "Unescaped single quote? This should not happen."));
            } else if (ch === " " || ch === "	") {
              var wsStart = i;
              var next = src[i + 1];

              while (next === " " || next === "	") {
                i += 1;
                next = src[i + 1];
              }

              if (next !== "\n") str += i > wsStart ? src.slice(wsStart, i + 1) : ch;
            } else {
              str += ch;
            }
          }

          return errors.length > 0 ? {
            errors: errors,
            str: str
          } : str;
        }
      }], [{
        key: "endOfQuote",
        value: function endOfQuote(src, offset) {
          var ch = src[offset];

          while (ch) {
            if (ch === "'") {
              if (src[offset + 1] !== "'") break;
              ch = src[offset += 2];
            } else {
              ch = src[offset += 1];
            }
          }

          return offset + 1;
        }
      }]);

      return QuoteSingle;
    }(PlainValue.Node);

    function createNewNode(type, props) {
      switch (type) {
        case PlainValue.Type.ALIAS:
          return new Alias(type, props);

        case PlainValue.Type.BLOCK_FOLDED:
        case PlainValue.Type.BLOCK_LITERAL:
          return new BlockValue(type, props);

        case PlainValue.Type.FLOW_MAP:
        case PlainValue.Type.FLOW_SEQ:
          return new FlowCollection(type, props);

        case PlainValue.Type.MAP_KEY:
        case PlainValue.Type.MAP_VALUE:
        case PlainValue.Type.SEQ_ITEM:
          return new CollectionItem(type, props);

        case PlainValue.Type.COMMENT:
        case PlainValue.Type.PLAIN:
          return new PlainValue.PlainValue(type, props);

        case PlainValue.Type.QUOTE_DOUBLE:
          return new QuoteDouble(type, props);

        case PlainValue.Type.QUOTE_SINGLE:
          return new QuoteSingle(type, props);

        default:
          return null;
      }
    }

    var ParseContext =
    /*#__PURE__*/
    function () {
      _createClass(ParseContext, null, [{
        key: "parseType",
        value: function parseType(src, offset, inFlow) {
          switch (src[offset]) {
            case "*":
              return PlainValue.Type.ALIAS;

            case ">":
              return PlainValue.Type.BLOCK_FOLDED;

            case "|":
              return PlainValue.Type.BLOCK_LITERAL;

            case "{":
              return PlainValue.Type.FLOW_MAP;

            case "[":
              return PlainValue.Type.FLOW_SEQ;

            case "?":
              return !inFlow && PlainValue.Node.atBlank(src, offset + 1, true) ? PlainValue.Type.MAP_KEY : PlainValue.Type.PLAIN;

            case ":":
              return !inFlow && PlainValue.Node.atBlank(src, offset + 1, true) ? PlainValue.Type.MAP_VALUE : PlainValue.Type.PLAIN;

            case "-":
              return !inFlow && PlainValue.Node.atBlank(src, offset + 1, true) ? PlainValue.Type.SEQ_ITEM : PlainValue.Type.PLAIN;

            case '"':
              return PlainValue.Type.QUOTE_DOUBLE;

            case "'":
              return PlainValue.Type.QUOTE_SINGLE;

            default:
              return PlainValue.Type.PLAIN;
          }
        }
      }]);

      function ParseContext() {
        var _this9 = this;

        var orig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
            atLineStart = _ref5.atLineStart,
            inCollection = _ref5.inCollection,
            inFlow = _ref5.inFlow,
            indent = _ref5.indent,
            lineStart = _ref5.lineStart,
            parent = _ref5.parent;

        _classCallCheck(this, ParseContext);

        PlainValue._defineProperty(this, "parseNode", function (overlay, start) {
          if (PlainValue.Node.atDocumentBoundary(_this9.src, start)) return null;
          var context = new ParseContext(_this9, overlay);

          var _context$parseProps = context.parseProps(start),
              props = _context$parseProps.props,
              type = _context$parseProps.type,
              valueStart = _context$parseProps.valueStart;

          var node = createNewNode(type, props);
          var offset = node.parse(context, valueStart);
          node.range = new PlainValue.Range(start, offset);

          if (offset <= start) {
            node.error = new Error("Node#parse consumed no characters");
            node.error.parseEnd = offset;
            node.error.source = node;
            node.range.end = start + 1;
          }

          if (context.nodeStartsCollection(node)) {
            if (!node.error && !context.atLineStart && context.parent.type === PlainValue.Type.DOCUMENT) {
              node.error = new PlainValue.YAMLSyntaxError(node, "Block collection must not have preceding content here (e.g. directives-end indicator)");
            }

            var collection = new Collection(node);
            offset = collection.parse(new ParseContext(context), offset);
            collection.range = new PlainValue.Range(start, offset);
            return collection;
          }

          return node;
        });

        this.atLineStart = atLineStart != null ? atLineStart : orig.atLineStart || false;
        this.inCollection = inCollection != null ? inCollection : orig.inCollection || false;
        this.inFlow = inFlow != null ? inFlow : orig.inFlow || false;
        this.indent = indent != null ? indent : orig.indent;
        this.lineStart = lineStart != null ? lineStart : orig.lineStart;
        this.parent = parent != null ? parent : orig.parent || {};
        this.root = orig.root;
        this.src = orig.src;
      }

      _createClass(ParseContext, [{
        key: "nodeStartsCollection",
        value: function nodeStartsCollection(node) {
          var inCollection = this.inCollection,
              inFlow = this.inFlow,
              src = this.src;
          if (inCollection || inFlow) return false;
          if (node instanceof CollectionItem) return true;
          var offset = node.range.end;
          if (src[offset] === "\n" || src[offset - 1] === "\n") return false;
          offset = PlainValue.Node.endOfWhiteSpace(src, offset);
          return src[offset] === ":";
        }
      }, {
        key: "parseProps",
        value: function parseProps(offset) {
          var inFlow = this.inFlow,
              parent = this.parent,
              src = this.src;
          var props = [];
          var lineHasProps = false;
          offset = this.atLineStart ? PlainValue.Node.endOfIndent(src, offset) : PlainValue.Node.endOfWhiteSpace(src, offset);
          var ch = src[offset];

          while (ch === PlainValue.Char.ANCHOR || ch === PlainValue.Char.COMMENT || ch === PlainValue.Char.TAG || ch === "\n") {
            if (ch === "\n") {
              var inEnd = offset;
              var lineStart = void 0;

              do {
                lineStart = inEnd + 1;
                inEnd = PlainValue.Node.endOfIndent(src, lineStart);
              } while (src[inEnd] === "\n");

              var indentDiff = inEnd - (lineStart + this.indent);
              var noIndicatorAsIndent = parent.type === PlainValue.Type.SEQ_ITEM && parent.context.atLineStart;
              if (src[inEnd] !== "#" && !PlainValue.Node.nextNodeIsIndented(src[inEnd], indentDiff, !noIndicatorAsIndent)) break;
              this.atLineStart = true;
              this.lineStart = lineStart;
              lineHasProps = false;
              offset = inEnd;
            } else if (ch === PlainValue.Char.COMMENT) {
              var end = PlainValue.Node.endOfLine(src, offset + 1);
              props.push(new PlainValue.Range(offset, end));
              offset = end;
            } else {
              var _end = PlainValue.Node.endOfIdentifier(src, offset + 1);

              if (ch === PlainValue.Char.TAG && src[_end] === "," && /^[a-zA-Z0-9-]+\.[a-zA-Z0-9-]+,\d\d\d\d(-\d\d){0,2}\/\S/.test(src.slice(offset + 1, _end + 13))) {
                _end = PlainValue.Node.endOfIdentifier(src, _end + 5);
              }

              props.push(new PlainValue.Range(offset, _end));
              lineHasProps = true;
              offset = PlainValue.Node.endOfWhiteSpace(src, _end);
            }

            ch = src[offset];
          }

          if (lineHasProps && ch === ":" && PlainValue.Node.atBlank(src, offset + 1, true)) offset -= 1;
          var type = ParseContext.parseType(src, offset, inFlow);
          return {
            props: props,
            type: type,
            valueStart: offset
          };
        }
      }]);

      return ParseContext;
    }();

    function parse(src) {
      var cr = [];

      if (src.indexOf("\r") !== -1) {
        src = src.replace(/\r\n?/g, function (match, offset2) {
          if (match.length > 1) cr.push(offset2);
          return "\n";
        });
      }

      var documents = [];
      var offset = 0;

      do {
        var doc = new Document();
        var context = new ParseContext({
          src: src
        });
        offset = doc.parse(context, offset);
        documents.push(doc);
      } while (offset < src.length);

      documents.setOrigRanges = function () {
        if (cr.length === 0) return false;

        for (var i = 1; i < cr.length; ++i) {
          cr[i] -= i;
        }

        var crOffset = 0;

        for (var _i9 = 0; _i9 < documents.length; ++_i9) {
          crOffset = documents[_i9].setOrigRanges(cr, crOffset);
        }

        cr.splice(0, cr.length);
        return true;
      };

      documents.toString = function () {
        return documents.join("...\n");
      };

      return documents;
    }

    exports2.parse = parse;
  }
});

var require_resolveSeq_d03cb037 = __commonJS({
  "node_modules/yaml/dist/resolveSeq-d03cb037.js": function node_modulesYamlDistResolveSeqD03cb037Js(exports2) {
    "use strict";

    var PlainValue = require_PlainValue_ec8e588e();

    function addCommentBefore(str, indent, comment) {
      if (!comment) return str;
      var cc = comment.replace(/[\s\S]^/gm, "$&".concat(indent, "#"));
      return "#".concat(cc, "\n").concat(indent).concat(str);
    }

    function addComment(str, indent, comment) {
      return !comment ? str : comment.indexOf("\n") === -1 ? "".concat(str, " #").concat(comment) : "".concat(str, "\n") + comment.replace(/^/gm, "".concat(indent || "", "#"));
    }

    var Node = function Node() {
      _classCallCheck(this, Node);
    };

    function _toJSON(value, arg, ctx) {
      if (Array.isArray(value)) return value.map(function (v, i) {
        return _toJSON(v, String(i), ctx);
      });

      if (value && typeof value.toJSON === "function") {
        var anchor = ctx && ctx.anchors && ctx.anchors.get(value);
        if (anchor) ctx.onCreate = function (res2) {
          anchor.res = res2;
          delete ctx.onCreate;
        };
        var res = value.toJSON(arg, ctx);
        if (anchor && ctx.onCreate) ctx.onCreate(res);
        return res;
      }

      if ((!ctx || !ctx.keep) && typeof value === "bigint") return Number(value);
      return value;
    }

    var Scalar =
    /*#__PURE__*/
    function (_Node2) {
      _inherits(Scalar, _Node2);

      function Scalar(value) {
        var _this10;

        _classCallCheck(this, Scalar);

        _this10 = _possibleConstructorReturn(this, _getPrototypeOf(Scalar).call(this));
        _this10.value = value;
        return _this10;
      }

      _createClass(Scalar, [{
        key: "toJSON",
        value: function toJSON(arg, ctx) {
          return ctx && ctx.keep ? this.value : _toJSON(this.value, arg, ctx);
        }
      }, {
        key: "toString",
        value: function toString() {
          return String(this.value);
        }
      }]);

      return Scalar;
    }(Node);

    function collectionFromPath(schema, path, value) {
      var v = value;

      for (var i = path.length - 1; i >= 0; --i) {
        var k = path[i];

        if (Number.isInteger(k) && k >= 0) {
          var a = [];
          a[k] = v;
          v = a;
        } else {
          var o = {};
          Object.defineProperty(o, k, {
            value: v,
            writable: true,
            enumerable: true,
            configurable: true
          });
          v = o;
        }
      }

      return schema.createNode(v, false);
    }

    var isEmptyPath = function isEmptyPath(path) {
      return path == null || _typeof(path) === "object" && path[Symbol.iterator]().next().done;
    };

    var Collection =
    /*#__PURE__*/
    function (_Node3) {
      _inherits(Collection, _Node3);

      function Collection(schema) {
        var _this11;

        _classCallCheck(this, Collection);

        _this11 = _possibleConstructorReturn(this, _getPrototypeOf(Collection).call(this));

        PlainValue._defineProperty(_assertThisInitialized(_this11), "items", []);

        _this11.schema = schema;
        return _this11;
      }

      _createClass(Collection, [{
        key: "addIn",
        value: function addIn(path, value) {
          if (isEmptyPath(path)) this.add(value);else {
            var _path2 = _toArray(path),
                key = _path2[0],
                rest = _path2.slice(1);

            var node = this.get(key, true);
            if (node instanceof Collection) node.addIn(rest, value);else if (node === void 0 && this.schema) this.set(key, collectionFromPath(this.schema, rest, value));else throw new Error("Expected YAML collection at ".concat(key, ". Remaining path: ").concat(rest));
          }
        }
      }, {
        key: "deleteIn",
        value: function deleteIn(_ref6) {
          var _ref7 = _toArray(_ref6),
              key = _ref7[0],
              rest = _ref7.slice(1);

          if (rest.length === 0) return this["delete"](key);
          var node = this.get(key, true);
          if (node instanceof Collection) return node.deleteIn(rest);else throw new Error("Expected YAML collection at ".concat(key, ". Remaining path: ").concat(rest));
        }
      }, {
        key: "getIn",
        value: function getIn(_ref8, keepScalar) {
          var _ref9 = _toArray(_ref8),
              key = _ref9[0],
              rest = _ref9.slice(1);

          var node = this.get(key, true);
          if (rest.length === 0) return !keepScalar && node instanceof Scalar ? node.value : node;else return node instanceof Collection ? node.getIn(rest, keepScalar) : void 0;
        }
      }, {
        key: "hasAllNullValues",
        value: function hasAllNullValues() {
          return this.items.every(function (node) {
            if (!node || node.type !== "PAIR") return false;
            var n = node.value;
            return n == null || n instanceof Scalar && n.value == null && !n.commentBefore && !n.comment && !n.tag;
          });
        }
      }, {
        key: "hasIn",
        value: function hasIn(_ref10) {
          var _ref11 = _toArray(_ref10),
              key = _ref11[0],
              rest = _ref11.slice(1);

          if (rest.length === 0) return this.has(key);
          var node = this.get(key, true);
          return node instanceof Collection ? node.hasIn(rest) : false;
        }
      }, {
        key: "setIn",
        value: function setIn(_ref12, value) {
          var _ref13 = _toArray(_ref12),
              key = _ref13[0],
              rest = _ref13.slice(1);

          if (rest.length === 0) {
            this.set(key, value);
          } else {
            var node = this.get(key, true);
            if (node instanceof Collection) node.setIn(rest, value);else if (node === void 0 && this.schema) this.set(key, collectionFromPath(this.schema, rest, value));else throw new Error("Expected YAML collection at ".concat(key, ". Remaining path: ").concat(rest));
          }
        }
      }, {
        key: "toJSON",
        value: function toJSON() {
          return null;
        }
      }, {
        key: "toString",
        value: function toString(ctx, _ref14, onComment, onChompKeep) {
          var _this12 = this;

          var blockItem = _ref14.blockItem,
              flowChars = _ref14.flowChars,
              isMap = _ref14.isMap,
              itemIndent = _ref14.itemIndent;
          var _ctx = ctx,
              indent = _ctx.indent,
              indentStep = _ctx.indentStep,
              stringify = _ctx.stringify;
          var inFlow = this.type === PlainValue.Type.FLOW_MAP || this.type === PlainValue.Type.FLOW_SEQ || ctx.inFlow;
          if (inFlow) itemIndent += indentStep;
          var allNullValues = isMap && this.hasAllNullValues();
          ctx = Object.assign({}, ctx, {
            allNullValues: allNullValues,
            indent: itemIndent,
            inFlow: inFlow,
            type: null
          });
          var chompKeep = false;
          var hasItemWithNewLine = false;
          var nodes = this.items.reduce(function (nodes2, item, i) {
            var comment;

            if (item) {
              if (!chompKeep && item.spaceBefore) nodes2.push({
                type: "comment",
                str: ""
              });
              if (item.commentBefore) item.commentBefore.match(/^.*$/gm).forEach(function (line) {
                nodes2.push({
                  type: "comment",
                  str: "#".concat(line)
                });
              });
              if (item.comment) comment = item.comment;
              if (inFlow && (!chompKeep && item.spaceBefore || item.commentBefore || item.comment || item.key && (item.key.commentBefore || item.key.comment) || item.value && (item.value.commentBefore || item.value.comment))) hasItemWithNewLine = true;
            }

            chompKeep = false;
            var str2 = stringify(item, ctx, function () {
              return comment = null;
            }, function () {
              return chompKeep = true;
            });
            if (inFlow && !hasItemWithNewLine && str2.includes("\n")) hasItemWithNewLine = true;
            if (inFlow && i < _this12.items.length - 1) str2 += ",";
            str2 = addComment(str2, itemIndent, comment);
            if (chompKeep && (comment || inFlow)) chompKeep = false;
            nodes2.push({
              type: "item",
              str: str2
            });
            return nodes2;
          }, []);
          var str;

          if (nodes.length === 0) {
            str = flowChars.start + flowChars.end;
          } else if (inFlow) {
            var start = flowChars.start,
                end = flowChars.end;
            var strings = nodes.map(function (n) {
              return n.str;
            });

            if (hasItemWithNewLine || strings.reduce(function (sum, str2) {
              return sum + str2.length + 2;
            }, 2) > Collection.maxFlowStringSingleLineLength) {
              str = start;
              var _iteratorNormalCompletion9 = true;
              var _didIteratorError9 = false;
              var _iteratorError9 = undefined;

              try {
                for (var _iterator9 = strings[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
                  var s = _step9.value;
                  str += s ? "\n".concat(indentStep).concat(indent).concat(s) : "\n";
                }
              } catch (err) {
                _didIteratorError9 = true;
                _iteratorError9 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion9 && _iterator9["return"] != null) {
                    _iterator9["return"]();
                  }
                } finally {
                  if (_didIteratorError9) {
                    throw _iteratorError9;
                  }
                }
              }

              str += "\n".concat(indent).concat(end);
            } else {
              str = "".concat(start, " ").concat(strings.join(" "), " ").concat(end);
            }
          } else {
            var _strings = nodes.map(blockItem);

            str = _strings.shift();
            var _iteratorNormalCompletion10 = true;
            var _didIteratorError10 = false;
            var _iteratorError10 = undefined;

            try {
              for (var _iterator10 = _strings[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
                var _s2 = _step10.value;
                str += _s2 ? "\n".concat(indent).concat(_s2) : "\n";
              }
            } catch (err) {
              _didIteratorError10 = true;
              _iteratorError10 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion10 && _iterator10["return"] != null) {
                  _iterator10["return"]();
                }
              } finally {
                if (_didIteratorError10) {
                  throw _iteratorError10;
                }
              }
            }
          }

          if (this.comment) {
            str += "\n" + this.comment.replace(/^/gm, "".concat(indent, "#"));
            if (onComment) onComment();
          } else if (chompKeep && onChompKeep) onChompKeep();

          return str;
        }
      }]);

      return Collection;
    }(Node);

    PlainValue._defineProperty(Collection, "maxFlowStringSingleLineLength", 60);

    function asItemIndex(key) {
      var idx = key instanceof Scalar ? key.value : key;
      if (idx && typeof idx === "string") idx = Number(idx);
      return Number.isInteger(idx) && idx >= 0 ? idx : null;
    }

    var YAMLSeq =
    /*#__PURE__*/
    function (_Collection) {
      _inherits(YAMLSeq, _Collection);

      function YAMLSeq() {
        _classCallCheck(this, YAMLSeq);

        return _possibleConstructorReturn(this, _getPrototypeOf(YAMLSeq).apply(this, arguments));
      }

      _createClass(YAMLSeq, [{
        key: "add",
        value: function add(value) {
          this.items.push(value);
        }
      }, {
        key: "delete",
        value: function _delete(key) {
          var idx = asItemIndex(key);
          if (typeof idx !== "number") return false;
          var del = this.items.splice(idx, 1);
          return del.length > 0;
        }
      }, {
        key: "get",
        value: function get(key, keepScalar) {
          var idx = asItemIndex(key);
          if (typeof idx !== "number") return void 0;
          var it = this.items[idx];
          return !keepScalar && it instanceof Scalar ? it.value : it;
        }
      }, {
        key: "has",
        value: function has(key) {
          var idx = asItemIndex(key);
          return typeof idx === "number" && idx < this.items.length;
        }
      }, {
        key: "set",
        value: function set(key, value) {
          var idx = asItemIndex(key);
          if (typeof idx !== "number") throw new Error("Expected a valid index, not ".concat(key, "."));
          this.items[idx] = value;
        }
      }, {
        key: "toJSON",
        value: function toJSON(_, ctx) {
          var seq = [];
          if (ctx && ctx.onCreate) ctx.onCreate(seq);
          var i = 0;
          var _iteratorNormalCompletion11 = true;
          var _didIteratorError11 = false;
          var _iteratorError11 = undefined;

          try {
            for (var _iterator11 = this.items[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
              var item = _step11.value;
              seq.push(_toJSON(item, String(i++), ctx));
            }
          } catch (err) {
            _didIteratorError11 = true;
            _iteratorError11 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion11 && _iterator11["return"] != null) {
                _iterator11["return"]();
              }
            } finally {
              if (_didIteratorError11) {
                throw _iteratorError11;
              }
            }
          }

          return seq;
        }
      }, {
        key: "toString",
        value: function toString(ctx, onComment, onChompKeep) {
          if (!ctx) return JSON.stringify(this);
          return _get(_getPrototypeOf(YAMLSeq.prototype), "toString", this).call(this, ctx, {
            blockItem: function blockItem(n) {
              return n.type === "comment" ? n.str : "- ".concat(n.str);
            },
            flowChars: {
              start: "[",
              end: "]"
            },
            isMap: false,
            itemIndent: (ctx.indent || "") + "  "
          }, onComment, onChompKeep);
        }
      }]);

      return YAMLSeq;
    }(Collection);

    var stringifyKey = function stringifyKey(key, jsKey, ctx) {
      if (jsKey === null) return "";
      if (_typeof(jsKey) !== "object") return String(jsKey);
      if (key instanceof Node && ctx && ctx.doc) return key.toString({
        anchors:
        /* @__PURE__ */
        Object.create(null),
        doc: ctx.doc,
        indent: "",
        indentStep: ctx.indentStep,
        inFlow: true,
        inStringifyKey: true,
        stringify: ctx.stringify
      });
      return JSON.stringify(jsKey);
    };

    var Pair =
    /*#__PURE__*/
    function (_Node4) {
      _inherits(Pair, _Node4);

      function Pair(key) {
        var _this13;

        var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

        _classCallCheck(this, Pair);

        _this13 = _possibleConstructorReturn(this, _getPrototypeOf(Pair).call(this));
        _this13.key = key;
        _this13.value = value;
        _this13.type = Pair.Type.PAIR;
        return _this13;
      }

      _createClass(Pair, [{
        key: "addToJSMap",
        value: function addToJSMap(ctx, map) {
          var key = _toJSON(this.key, "", ctx);

          if (map instanceof Map) {
            var value = _toJSON(this.value, key, ctx);

            map.set(key, value);
          } else if (map instanceof Set) {
            map.add(key);
          } else {
            var stringKey = stringifyKey(this.key, key, ctx);

            var _value4 = _toJSON(this.value, stringKey, ctx);

            if (stringKey in map) Object.defineProperty(map, stringKey, {
              value: _value4,
              writable: true,
              enumerable: true,
              configurable: true
            });else map[stringKey] = _value4;
          }

          return map;
        }
      }, {
        key: "toJSON",
        value: function toJSON(_, ctx) {
          var pair = ctx && ctx.mapAsMap ?
          /* @__PURE__ */
          new Map() : {};
          return this.addToJSMap(ctx, pair);
        }
      }, {
        key: "toString",
        value: function toString(ctx, onComment, onChompKeep) {
          if (!ctx || !ctx.doc) return JSON.stringify(this);
          var _ctx$doc$options = ctx.doc.options,
              indentSize = _ctx$doc$options.indent,
              indentSeq = _ctx$doc$options.indentSeq,
              simpleKeys = _ctx$doc$options.simpleKeys;
          var key = this.key,
              value = this.value;
          var keyComment = key instanceof Node && key.comment;

          if (simpleKeys) {
            if (keyComment) {
              throw new Error("With simple keys, key nodes cannot have comments");
            }

            if (key instanceof Collection) {
              var msg = "With simple keys, collection cannot be used as a key value";
              throw new Error(msg);
            }
          }

          var explicitKey = !simpleKeys && (!key || keyComment || (key instanceof Node ? key instanceof Collection || key.type === PlainValue.Type.BLOCK_FOLDED || key.type === PlainValue.Type.BLOCK_LITERAL : _typeof(key) === "object"));
          var _ctx2 = ctx,
              doc = _ctx2.doc,
              indent = _ctx2.indent,
              indentStep = _ctx2.indentStep,
              stringify = _ctx2.stringify;
          ctx = Object.assign({}, ctx, {
            implicitKey: !explicitKey,
            indent: indent + indentStep
          });
          var chompKeep = false;
          var str = stringify(key, ctx, function () {
            return keyComment = null;
          }, function () {
            return chompKeep = true;
          });
          str = addComment(str, ctx.indent, keyComment);

          if (!explicitKey && str.length > 1024) {
            if (simpleKeys) throw new Error("With simple keys, single line scalar must not span more than 1024 characters");
            explicitKey = true;
          }

          if (ctx.allNullValues && !simpleKeys) {
            if (this.comment) {
              str = addComment(str, ctx.indent, this.comment);
              if (onComment) onComment();
            } else if (chompKeep && !keyComment && onChompKeep) onChompKeep();

            return ctx.inFlow && !explicitKey ? str : "? ".concat(str);
          }

          str = explicitKey ? "? ".concat(str, "\n").concat(indent, ":") : "".concat(str, ":");

          if (this.comment) {
            str = addComment(str, ctx.indent, this.comment);
            if (onComment) onComment();
          }

          var vcb = "";
          var valueComment = null;

          if (value instanceof Node) {
            if (value.spaceBefore) vcb = "\n";

            if (value.commentBefore) {
              var cs = value.commentBefore.replace(/^/gm, "".concat(ctx.indent, "#"));
              vcb += "\n".concat(cs);
            }

            valueComment = value.comment;
          } else if (value && _typeof(value) === "object") {
            value = doc.schema.createNode(value, true);
          }

          ctx.implicitKey = false;
          if (!explicitKey && !this.comment && value instanceof Scalar) ctx.indentAtStart = str.length + 1;
          chompKeep = false;

          if (!indentSeq && indentSize >= 2 && !ctx.inFlow && !explicitKey && value instanceof YAMLSeq && value.type !== PlainValue.Type.FLOW_SEQ && !value.tag && !doc.anchors.getName(value)) {
            ctx.indent = ctx.indent.substr(2);
          }

          var valueStr = stringify(value, ctx, function () {
            return valueComment = null;
          }, function () {
            return chompKeep = true;
          });
          var ws = " ";

          if (vcb || this.comment) {
            ws = "".concat(vcb, "\n").concat(ctx.indent);
          } else if (!explicitKey && value instanceof Collection) {
            var flow = valueStr[0] === "[" || valueStr[0] === "{";
            if (!flow || valueStr.includes("\n")) ws = "\n".concat(ctx.indent);
          } else if (valueStr[0] === "\n") ws = "";

          if (chompKeep && !valueComment && onChompKeep) onChompKeep();
          return addComment(str + ws + valueStr, ctx.indent, valueComment);
        }
      }, {
        key: "commentBefore",
        get: function get() {
          return this.key instanceof Node ? this.key.commentBefore : void 0;
        },
        set: function set(cb) {
          if (this.key == null) this.key = new Scalar(null);
          if (this.key instanceof Node) this.key.commentBefore = cb;else {
            var msg = "Pair.commentBefore is an alias for Pair.key.commentBefore. To set it, the key must be a Node.";
            throw new Error(msg);
          }
        }
      }]);

      return Pair;
    }(Node);

    PlainValue._defineProperty(Pair, "Type", {
      PAIR: "PAIR",
      MERGE_PAIR: "MERGE_PAIR"
    });

    var getAliasCount = function getAliasCount(node, anchors) {
      if (node instanceof Alias) {
        var anchor = anchors.get(node.source);
        return anchor.count * anchor.aliasCount;
      } else if (node instanceof Collection) {
        var count = 0;
        var _iteratorNormalCompletion12 = true;
        var _didIteratorError12 = false;
        var _iteratorError12 = undefined;

        try {
          for (var _iterator12 = node.items[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {
            var item = _step12.value;
            var c = getAliasCount(item, anchors);
            if (c > count) count = c;
          }
        } catch (err) {
          _didIteratorError12 = true;
          _iteratorError12 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion12 && _iterator12["return"] != null) {
              _iterator12["return"]();
            }
          } finally {
            if (_didIteratorError12) {
              throw _iteratorError12;
            }
          }
        }

        return count;
      } else if (node instanceof Pair) {
        var kc = getAliasCount(node.key, anchors);
        var vc = getAliasCount(node.value, anchors);
        return Math.max(kc, vc);
      }

      return 1;
    };

    var Alias =
    /*#__PURE__*/
    function (_Node5) {
      _inherits(Alias, _Node5);

      _createClass(Alias, null, [{
        key: "stringify",
        value: function stringify(_ref15, _ref16) {
          var range = _ref15.range,
              source = _ref15.source;
          var anchors = _ref16.anchors,
              doc = _ref16.doc,
              implicitKey = _ref16.implicitKey,
              inStringifyKey = _ref16.inStringifyKey;
          var anchor = Object.keys(anchors).find(function (a) {
            return anchors[a] === source;
          });
          if (!anchor && inStringifyKey) anchor = doc.anchors.getName(source) || doc.anchors.newName();
          if (anchor) return "*".concat(anchor).concat(implicitKey ? " " : "");
          var msg = doc.anchors.getName(source) ? "Alias node must be after source node" : "Source node not found for alias node";
          throw new Error("".concat(msg, " [").concat(range, "]"));
        }
      }]);

      function Alias(source) {
        var _this14;

        _classCallCheck(this, Alias);

        _this14 = _possibleConstructorReturn(this, _getPrototypeOf(Alias).call(this));
        _this14.source = source;
        _this14.type = PlainValue.Type.ALIAS;
        return _this14;
      }

      _createClass(Alias, [{
        key: "toJSON",
        value: function toJSON(arg, ctx) {
          if (!ctx) return _toJSON(this.source, arg, ctx);
          var anchors = ctx.anchors,
              maxAliasCount = ctx.maxAliasCount;
          var anchor = anchors.get(this.source);

          if (!anchor || anchor.res === void 0) {
            var msg = "This should not happen: Alias anchor was not resolved?";
            if (this.cstNode) throw new PlainValue.YAMLReferenceError(this.cstNode, msg);else throw new ReferenceError(msg);
          }

          if (maxAliasCount >= 0) {
            anchor.count += 1;
            if (anchor.aliasCount === 0) anchor.aliasCount = getAliasCount(this.source, anchors);

            if (anchor.count * anchor.aliasCount > maxAliasCount) {
              var _msg4 = "Excessive alias count indicates a resource exhaustion attack";
              if (this.cstNode) throw new PlainValue.YAMLReferenceError(this.cstNode, _msg4);else throw new ReferenceError(_msg4);
            }
          }

          return anchor.res;
        }
      }, {
        key: "toString",
        value: function toString(ctx) {
          return Alias.stringify(this, ctx);
        }
      }, {
        key: "tag",
        set: function set(t) {
          throw new Error("Alias nodes cannot have tags");
        }
      }]);

      return Alias;
    }(Node);

    PlainValue._defineProperty(Alias, "default", true);

    function findPair(items, key) {
      var k = key instanceof Scalar ? key.value : key;
      var _iteratorNormalCompletion13 = true;
      var _didIteratorError13 = false;
      var _iteratorError13 = undefined;

      try {
        for (var _iterator13 = items[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {
          var it = _step13.value;

          if (it instanceof Pair) {
            if (it.key === key || it.key === k) return it;
            if (it.key && it.key.value === k) return it;
          }
        }
      } catch (err) {
        _didIteratorError13 = true;
        _iteratorError13 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion13 && _iterator13["return"] != null) {
            _iterator13["return"]();
          }
        } finally {
          if (_didIteratorError13) {
            throw _iteratorError13;
          }
        }
      }

      return void 0;
    }

    var YAMLMap =
    /*#__PURE__*/
    function (_Collection2) {
      _inherits(YAMLMap, _Collection2);

      function YAMLMap() {
        _classCallCheck(this, YAMLMap);

        return _possibleConstructorReturn(this, _getPrototypeOf(YAMLMap).apply(this, arguments));
      }

      _createClass(YAMLMap, [{
        key: "add",
        value: function add(pair, overwrite) {
          if (!pair) pair = new Pair(pair);else if (!(pair instanceof Pair)) pair = new Pair(pair.key || pair, pair.value);
          var prev = findPair(this.items, pair.key);
          var sortEntries = this.schema && this.schema.sortMapEntries;

          if (prev) {
            if (overwrite) prev.value = pair.value;else throw new Error("Key ".concat(pair.key, " already set"));
          } else if (sortEntries) {
            var i = this.items.findIndex(function (item) {
              return sortEntries(pair, item) < 0;
            });
            if (i === -1) this.items.push(pair);else this.items.splice(i, 0, pair);
          } else {
            this.items.push(pair);
          }
        }
      }, {
        key: "delete",
        value: function _delete(key) {
          var it = findPair(this.items, key);
          if (!it) return false;
          var del = this.items.splice(this.items.indexOf(it), 1);
          return del.length > 0;
        }
      }, {
        key: "get",
        value: function get(key, keepScalar) {
          var it = findPair(this.items, key);
          var node = it && it.value;
          return !keepScalar && node instanceof Scalar ? node.value : node;
        }
      }, {
        key: "has",
        value: function has(key) {
          return !!findPair(this.items, key);
        }
      }, {
        key: "set",
        value: function set(key, value) {
          this.add(new Pair(key, value), true);
        }
      }, {
        key: "toJSON",
        value: function toJSON(_, ctx, Type) {
          var map = Type ? new Type() : ctx && ctx.mapAsMap ?
          /* @__PURE__ */
          new Map() : {};
          if (ctx && ctx.onCreate) ctx.onCreate(map);
          var _iteratorNormalCompletion14 = true;
          var _didIteratorError14 = false;
          var _iteratorError14 = undefined;

          try {
            for (var _iterator14 = this.items[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {
              var item = _step14.value;
              item.addToJSMap(ctx, map);
            }
          } catch (err) {
            _didIteratorError14 = true;
            _iteratorError14 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion14 && _iterator14["return"] != null) {
                _iterator14["return"]();
              }
            } finally {
              if (_didIteratorError14) {
                throw _iteratorError14;
              }
            }
          }

          return map;
        }
      }, {
        key: "toString",
        value: function toString(ctx, onComment, onChompKeep) {
          if (!ctx) return JSON.stringify(this);
          var _iteratorNormalCompletion15 = true;
          var _didIteratorError15 = false;
          var _iteratorError15 = undefined;

          try {
            for (var _iterator15 = this.items[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {
              var item = _step15.value;
              if (!(item instanceof Pair)) throw new Error("Map items must all be pairs; found ".concat(JSON.stringify(item), " instead"));
            }
          } catch (err) {
            _didIteratorError15 = true;
            _iteratorError15 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion15 && _iterator15["return"] != null) {
                _iterator15["return"]();
              }
            } finally {
              if (_didIteratorError15) {
                throw _iteratorError15;
              }
            }
          }

          return _get(_getPrototypeOf(YAMLMap.prototype), "toString", this).call(this, ctx, {
            blockItem: function blockItem(n) {
              return n.str;
            },
            flowChars: {
              start: "{",
              end: "}"
            },
            isMap: true,
            itemIndent: ctx.indent || ""
          }, onComment, onChompKeep);
        }
      }]);

      return YAMLMap;
    }(Collection);

    var MERGE_KEY = "<<";

    var Merge =
    /*#__PURE__*/
    function (_Pair) {
      _inherits(Merge, _Pair);

      function Merge(pair) {
        var _this15;

        _classCallCheck(this, Merge);

        if (pair instanceof Pair) {
          var seq = pair.value;

          if (!(seq instanceof YAMLSeq)) {
            seq = new YAMLSeq();
            seq.items.push(pair.value);
            seq.range = pair.value.range;
          }

          _this15 = _possibleConstructorReturn(this, _getPrototypeOf(Merge).call(this, pair.key, seq));
          _this15.range = pair.range;
        } else {
          _this15 = _possibleConstructorReturn(this, _getPrototypeOf(Merge).call(this, new Scalar(MERGE_KEY), new YAMLSeq()));
        }

        _this15.type = Pair.Type.MERGE_PAIR;
        return _possibleConstructorReturn(_this15);
      }

      _createClass(Merge, [{
        key: "addToJSMap",
        value: function addToJSMap(ctx, map) {
          var _iteratorNormalCompletion16 = true;
          var _didIteratorError16 = false;
          var _iteratorError16 = undefined;

          try {
            for (var _iterator16 = this.value.items[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {
              var source = _step16.value.source;
              if (!(source instanceof YAMLMap)) throw new Error("Merge sources must be maps");
              var srcMap = source.toJSON(null, ctx, Map);
              var _iteratorNormalCompletion17 = true;
              var _didIteratorError17 = false;
              var _iteratorError17 = undefined;

              try {
                for (var _iterator17 = srcMap[Symbol.iterator](), _step17; !(_iteratorNormalCompletion17 = (_step17 = _iterator17.next()).done); _iteratorNormalCompletion17 = true) {
                  var _step17$value = _slicedToArray(_step17.value, 2),
                      key = _step17$value[0],
                      value = _step17$value[1];

                  if (map instanceof Map) {
                    if (!map.has(key)) map.set(key, value);
                  } else if (map instanceof Set) {
                    map.add(key);
                  } else if (!Object.prototype.hasOwnProperty.call(map, key)) {
                    Object.defineProperty(map, key, {
                      value: value,
                      writable: true,
                      enumerable: true,
                      configurable: true
                    });
                  }
                }
              } catch (err) {
                _didIteratorError17 = true;
                _iteratorError17 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion17 && _iterator17["return"] != null) {
                    _iterator17["return"]();
                  }
                } finally {
                  if (_didIteratorError17) {
                    throw _iteratorError17;
                  }
                }
              }
            }
          } catch (err) {
            _didIteratorError16 = true;
            _iteratorError16 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion16 && _iterator16["return"] != null) {
                _iterator16["return"]();
              }
            } finally {
              if (_didIteratorError16) {
                throw _iteratorError16;
              }
            }
          }

          return map;
        }
      }, {
        key: "toString",
        value: function toString(ctx, onComment) {
          var seq = this.value;
          if (seq.items.length > 1) return _get(_getPrototypeOf(Merge.prototype), "toString", this).call(this, ctx, onComment);
          this.value = seq.items[0];

          var str = _get(_getPrototypeOf(Merge.prototype), "toString", this).call(this, ctx, onComment);

          this.value = seq;
          return str;
        }
      }]);

      return Merge;
    }(Pair);

    var binaryOptions = {
      defaultType: PlainValue.Type.BLOCK_LITERAL,
      lineWidth: 76
    };
    var boolOptions = {
      trueStr: "true",
      falseStr: "false"
    };
    var intOptions = {
      asBigInt: false
    };
    var nullOptions = {
      nullStr: "null"
    };
    var strOptions = {
      defaultType: PlainValue.Type.PLAIN,
      doubleQuoted: {
        jsonEncoding: false,
        minMultiLineLength: 40
      },
      fold: {
        lineWidth: 80,
        minContentWidth: 20
      }
    };

    function resolveScalar(str, tags, scalarFallback) {
      var _iteratorNormalCompletion18 = true;
      var _didIteratorError18 = false;
      var _iteratorError18 = undefined;

      try {
        for (var _iterator18 = tags[Symbol.iterator](), _step18; !(_iteratorNormalCompletion18 = (_step18 = _iterator18.next()).done); _iteratorNormalCompletion18 = true) {
          var _step18$value = _step18.value,
              format = _step18$value.format,
              test = _step18$value.test,
              resolve = _step18$value.resolve;

          if (test) {
            var match = str.match(test);

            if (match) {
              var res = resolve.apply(null, match);
              if (!(res instanceof Scalar)) res = new Scalar(res);
              if (format) res.format = format;
              return res;
            }
          }
        }
      } catch (err) {
        _didIteratorError18 = true;
        _iteratorError18 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion18 && _iterator18["return"] != null) {
            _iterator18["return"]();
          }
        } finally {
          if (_didIteratorError18) {
            throw _iteratorError18;
          }
        }
      }

      if (scalarFallback) str = scalarFallback(str);
      return new Scalar(str);
    }

    var FOLD_FLOW = "flow";
    var FOLD_BLOCK = "block";
    var FOLD_QUOTED = "quoted";

    var consumeMoreIndentedLines = function consumeMoreIndentedLines(text, i) {
      var ch = text[i + 1];

      while (ch === " " || ch === "	") {
        do {
          ch = text[i += 1];
        } while (ch && ch !== "\n");

        ch = text[i + 1];
      }

      return i;
    };

    function foldFlowLines(text, indent, mode, _ref17) {
      var indentAtStart = _ref17.indentAtStart,
          _ref17$lineWidth = _ref17.lineWidth,
          lineWidth = _ref17$lineWidth === void 0 ? 80 : _ref17$lineWidth,
          _ref17$minContentWidt = _ref17.minContentWidth,
          minContentWidth = _ref17$minContentWidt === void 0 ? 20 : _ref17$minContentWidt,
          onFold = _ref17.onFold,
          onOverflow = _ref17.onOverflow;
      if (!lineWidth || lineWidth < 0) return text;
      var endStep = Math.max(1 + minContentWidth, 1 + lineWidth - indent.length);
      if (text.length <= endStep) return text;
      var folds = [];
      var escapedFolds = {};
      var end = lineWidth - indent.length;

      if (typeof indentAtStart === "number") {
        if (indentAtStart > lineWidth - Math.max(2, minContentWidth)) folds.push(0);else end = lineWidth - indentAtStart;
      }

      var split = void 0;
      var prev = void 0;
      var overflow = false;
      var i = -1;
      var escStart = -1;
      var escEnd = -1;

      if (mode === FOLD_BLOCK) {
        i = consumeMoreIndentedLines(text, i);
        if (i !== -1) end = i + endStep;
      }

      for (var ch; ch = text[i += 1];) {
        if (mode === FOLD_QUOTED && ch === "\\") {
          escStart = i;

          switch (text[i + 1]) {
            case "x":
              i += 3;
              break;

            case "u":
              i += 5;
              break;

            case "U":
              i += 9;
              break;

            default:
              i += 1;
          }

          escEnd = i;
        }

        if (ch === "\n") {
          if (mode === FOLD_BLOCK) i = consumeMoreIndentedLines(text, i);
          end = i + endStep;
          split = void 0;
        } else {
          if (ch === " " && prev && prev !== " " && prev !== "\n" && prev !== "	") {
            var next = text[i + 1];
            if (next && next !== " " && next !== "\n" && next !== "	") split = i;
          }

          if (i >= end) {
            if (split) {
              folds.push(split);
              end = split + endStep;
              split = void 0;
            } else if (mode === FOLD_QUOTED) {
              while (prev === " " || prev === "	") {
                prev = ch;
                ch = text[i += 1];
                overflow = true;
              }

              var j = i > escEnd + 1 ? i - 2 : escStart - 1;
              if (escapedFolds[j]) return text;
              folds.push(j);
              escapedFolds[j] = true;
              end = j + endStep;
              split = void 0;
            } else {
              overflow = true;
            }
          }
        }

        prev = ch;
      }

      if (overflow && onOverflow) onOverflow();
      if (folds.length === 0) return text;
      if (onFold) onFold();
      var res = text.slice(0, folds[0]);

      for (var i2 = 0; i2 < folds.length; ++i2) {
        var fold = folds[i2];
        var end2 = folds[i2 + 1] || text.length;
        if (fold === 0) res = "\n".concat(indent).concat(text.slice(0, end2));else {
          if (mode === FOLD_QUOTED && escapedFolds[fold]) res += "".concat(text[fold], "\\");
          res += "\n".concat(indent).concat(text.slice(fold + 1, end2));
        }
      }

      return res;
    }

    var getFoldOptions = function getFoldOptions(_ref18) {
      var indentAtStart = _ref18.indentAtStart;
      return indentAtStart ? Object.assign({
        indentAtStart: indentAtStart
      }, strOptions.fold) : strOptions.fold;
    };

    var containsDocumentMarker = function containsDocumentMarker(str) {
      return /^(%|---|\.\.\.)/m.test(str);
    };

    function lineLengthOverLimit(str, lineWidth, indentLength) {
      if (!lineWidth || lineWidth < 0) return false;
      var limit = lineWidth - indentLength;
      var strLen = str.length;
      if (strLen <= limit) return false;

      for (var i = 0, start = 0; i < strLen; ++i) {
        if (str[i] === "\n") {
          if (i - start > limit) return true;
          start = i + 1;
          if (strLen - start <= limit) return false;
        }
      }

      return true;
    }

    function doubleQuotedString(value, ctx) {
      var implicitKey = ctx.implicitKey;
      var _strOptions$doubleQuo = strOptions.doubleQuoted,
          jsonEncoding = _strOptions$doubleQuo.jsonEncoding,
          minMultiLineLength = _strOptions$doubleQuo.minMultiLineLength;
      var json = JSON.stringify(value);
      if (jsonEncoding) return json;
      var indent = ctx.indent || (containsDocumentMarker(value) ? "  " : "");
      var str = "";
      var start = 0;

      for (var i = 0, ch = json[i]; ch; ch = json[++i]) {
        if (ch === " " && json[i + 1] === "\\" && json[i + 2] === "n") {
          str += json.slice(start, i) + "\\ ";
          i += 1;
          start = i;
          ch = "\\";
        }

        if (ch === "\\") switch (json[i + 1]) {
          case "u":
            {
              str += json.slice(start, i);
              var code = json.substr(i + 2, 4);

              switch (code) {
                case "0000":
                  str += "\\0";
                  break;

                case "0007":
                  str += "\\a";
                  break;

                case "000b":
                  str += "\\v";
                  break;

                case "001b":
                  str += "\\e";
                  break;

                case "0085":
                  str += "\\N";
                  break;

                case "00a0":
                  str += "\\_";
                  break;

                case "2028":
                  str += "\\L";
                  break;

                case "2029":
                  str += "\\P";
                  break;

                default:
                  if (code.substr(0, 2) === "00") str += "\\x" + code.substr(2);else str += json.substr(i, 6);
              }

              i += 5;
              start = i + 1;
            }
            break;

          case "n":
            if (implicitKey || json[i + 2] === '"' || json.length < minMultiLineLength) {
              i += 1;
            } else {
              str += json.slice(start, i) + "\n\n";

              while (json[i + 2] === "\\" && json[i + 3] === "n" && json[i + 4] !== '"') {
                str += "\n";
                i += 2;
              }

              str += indent;
              if (json[i + 2] === " ") str += "\\";
              i += 1;
              start = i + 1;
            }

            break;

          default:
            i += 1;
        }
      }

      str = start ? str + json.slice(start) : json;
      return implicitKey ? str : foldFlowLines(str, indent, FOLD_QUOTED, getFoldOptions(ctx));
    }

    function singleQuotedString(value, ctx) {
      if (ctx.implicitKey) {
        if (/\n/.test(value)) return doubleQuotedString(value, ctx);
      } else {
        if (/[ \t]\n|\n[ \t]/.test(value)) return doubleQuotedString(value, ctx);
      }

      var indent = ctx.indent || (containsDocumentMarker(value) ? "  " : "");
      var res = "'" + value.replace(/'/g, "''").replace(/\n+/g, "$&\n".concat(indent)) + "'";
      return ctx.implicitKey ? res : foldFlowLines(res, indent, FOLD_FLOW, getFoldOptions(ctx));
    }

    function blockString(_ref19, ctx, onComment, onChompKeep) {
      var comment = _ref19.comment,
          type = _ref19.type,
          value = _ref19.value;

      if (/\n[\t ]+$/.test(value) || /^\s*$/.test(value)) {
        return doubleQuotedString(value, ctx);
      }

      var indent = ctx.indent || (ctx.forceBlockIndent || containsDocumentMarker(value) ? "  " : "");
      var indentSize = indent ? "2" : "1";
      var literal = type === PlainValue.Type.BLOCK_FOLDED ? false : type === PlainValue.Type.BLOCK_LITERAL ? true : !lineLengthOverLimit(value, strOptions.fold.lineWidth, indent.length);
      var header = literal ? "|" : ">";
      if (!value) return header + "\n";
      var wsStart = "";
      var wsEnd = "";
      value = value.replace(/[\n\t ]*$/, function (ws) {
        var n = ws.indexOf("\n");

        if (n === -1) {
          header += "-";
        } else if (value === ws || n !== ws.length - 1) {
          header += "+";
          if (onChompKeep) onChompKeep();
        }

        wsEnd = ws.replace(/\n$/, "");
        return "";
      }).replace(/^[\n ]*/, function (ws) {
        if (ws.indexOf(" ") !== -1) header += indentSize;
        var m = ws.match(/ +$/);

        if (m) {
          wsStart = ws.slice(0, -m[0].length);
          return m[0];
        } else {
          wsStart = ws;
          return "";
        }
      });
      if (wsEnd) wsEnd = wsEnd.replace(/\n+(?!\n|$)/g, "$&".concat(indent));
      if (wsStart) wsStart = wsStart.replace(/\n+/g, "$&".concat(indent));

      if (comment) {
        header += " #" + comment.replace(/ ?[\r\n]+/g, " ");
        if (onComment) onComment();
      }

      if (!value) return "".concat(header).concat(indentSize, "\n").concat(indent).concat(wsEnd);

      if (literal) {
        value = value.replace(/\n+/g, "$&".concat(indent));
        return "".concat(header, "\n").concat(indent).concat(wsStart).concat(value).concat(wsEnd);
      }

      value = value.replace(/\n+/g, "\n$&").replace(/(?:^|\n)([\t ].*)(?:([\n\t ]*)\n(?![\n\t ]))?/g, "$1$2").replace(/\n+/g, "$&".concat(indent));
      var body = foldFlowLines("".concat(wsStart).concat(value).concat(wsEnd), indent, FOLD_BLOCK, strOptions.fold);
      return "".concat(header, "\n").concat(indent).concat(body);
    }

    function plainString(item, ctx, onComment, onChompKeep) {
      var comment = item.comment,
          type = item.type,
          value = item.value;
      var actualString = ctx.actualString,
          implicitKey = ctx.implicitKey,
          indent = ctx.indent,
          inFlow = ctx.inFlow;

      if (implicitKey && /[\n[\]{},]/.test(value) || inFlow && /[[\]{},]/.test(value)) {
        return doubleQuotedString(value, ctx);
      }

      if (!value || /^[\n\t ,[\]{}#&*!|>'"%@`]|^[?-]$|^[?-][ \t]|[\n:][ \t]|[ \t]\n|[\n\t ]#|[\n\t :]$/.test(value)) {
        return implicitKey || inFlow || value.indexOf("\n") === -1 ? value.indexOf('"') !== -1 && value.indexOf("'") === -1 ? singleQuotedString(value, ctx) : doubleQuotedString(value, ctx) : blockString(item, ctx, onComment, onChompKeep);
      }

      if (!implicitKey && !inFlow && type !== PlainValue.Type.PLAIN && value.indexOf("\n") !== -1) {
        return blockString(item, ctx, onComment, onChompKeep);
      }

      if (indent === "" && containsDocumentMarker(value)) {
        ctx.forceBlockIndent = true;
        return blockString(item, ctx, onComment, onChompKeep);
      }

      var str = value.replace(/\n+/g, "$&\n".concat(indent));

      if (actualString) {
        var tags = ctx.doc.schema.tags;
        var resolved = resolveScalar(str, tags, tags.scalarFallback).value;
        if (typeof resolved !== "string") return doubleQuotedString(value, ctx);
      }

      var body = implicitKey ? str : foldFlowLines(str, indent, FOLD_FLOW, getFoldOptions(ctx));

      if (comment && !inFlow && (body.indexOf("\n") !== -1 || comment.indexOf("\n") !== -1)) {
        if (onComment) onComment();
        return addCommentBefore(body, indent, comment);
      }

      return body;
    }

    function stringifyString(item, ctx, onComment, onChompKeep) {
      var defaultType = strOptions.defaultType;
      var implicitKey = ctx.implicitKey,
          inFlow = ctx.inFlow;
      var _item = item,
          type = _item.type,
          value = _item.value;

      if (typeof value !== "string") {
        value = String(value);
        item = Object.assign({}, item, {
          value: value
        });
      }

      var _stringify = function _stringify(_type) {
        switch (_type) {
          case PlainValue.Type.BLOCK_FOLDED:
          case PlainValue.Type.BLOCK_LITERAL:
            return blockString(item, ctx, onComment, onChompKeep);

          case PlainValue.Type.QUOTE_DOUBLE:
            return doubleQuotedString(value, ctx);

          case PlainValue.Type.QUOTE_SINGLE:
            return singleQuotedString(value, ctx);

          case PlainValue.Type.PLAIN:
            return plainString(item, ctx, onComment, onChompKeep);

          default:
            return null;
        }
      };

      if (type !== PlainValue.Type.QUOTE_DOUBLE && /[\x00-\x08\x0b-\x1f\x7f-\x9f]/.test(value)) {
        type = PlainValue.Type.QUOTE_DOUBLE;
      } else if ((implicitKey || inFlow) && (type === PlainValue.Type.BLOCK_FOLDED || type === PlainValue.Type.BLOCK_LITERAL)) {
        type = PlainValue.Type.QUOTE_DOUBLE;
      }

      var res = _stringify(type);

      if (res === null) {
        res = _stringify(defaultType);
        if (res === null) throw new Error("Unsupported default string type ".concat(defaultType));
      }

      return res;
    }

    function stringifyNumber(_ref20) {
      var format = _ref20.format,
          minFractionDigits = _ref20.minFractionDigits,
          tag = _ref20.tag,
          value = _ref20.value;
      if (typeof value === "bigint") return String(value);
      if (!isFinite(value)) return isNaN(value) ? ".nan" : value < 0 ? "-.inf" : ".inf";
      var n = JSON.stringify(value);

      if (!format && minFractionDigits && (!tag || tag === "tag:yaml.org,2002:float") && /^\d/.test(n)) {
        var i = n.indexOf(".");

        if (i < 0) {
          i = n.length;
          n += ".";
        }

        var d = minFractionDigits - (n.length - i - 1);

        while (d-- > 0) {
          n += "0";
        }
      }

      return n;
    }

    function checkFlowCollectionEnd(errors, cst) {
      var _char4, name;

      switch (cst.type) {
        case PlainValue.Type.FLOW_MAP:
          _char4 = "}";
          name = "flow map";
          break;

        case PlainValue.Type.FLOW_SEQ:
          _char4 = "]";
          name = "flow sequence";
          break;

        default:
          errors.push(new PlainValue.YAMLSemanticError(cst, "Not a flow collection!?"));
          return;
      }

      var lastItem;

      for (var i = cst.items.length - 1; i >= 0; --i) {
        var item = cst.items[i];

        if (!item || item.type !== PlainValue.Type.COMMENT) {
          lastItem = item;
          break;
        }
      }

      if (lastItem && lastItem["char"] !== _char4) {
        var msg = "Expected ".concat(name, " to end with ").concat(_char4);
        var err;

        if (typeof lastItem.offset === "number") {
          err = new PlainValue.YAMLSemanticError(cst, msg);
          err.offset = lastItem.offset + 1;
        } else {
          err = new PlainValue.YAMLSemanticError(lastItem, msg);
          if (lastItem.range && lastItem.range.end) err.offset = lastItem.range.end - lastItem.range.start;
        }

        errors.push(err);
      }
    }

    function checkFlowCommentSpace(errors, comment) {
      var prev = comment.context.src[comment.range.start - 1];

      if (prev !== "\n" && prev !== "	" && prev !== " ") {
        var msg = "Comments must be separated from other tokens by white space characters";
        errors.push(new PlainValue.YAMLSemanticError(comment, msg));
      }
    }

    function getLongKeyError(source, key) {
      var sk = String(key);
      var k = sk.substr(0, 8) + "..." + sk.substr(-8);
      return new PlainValue.YAMLSemanticError(source, "The \"".concat(k, "\" key is too long"));
    }

    function resolveComments(collection, comments) {
      var _iteratorNormalCompletion19 = true;
      var _didIteratorError19 = false;
      var _iteratorError19 = undefined;

      try {
        for (var _iterator19 = comments[Symbol.iterator](), _step19; !(_iteratorNormalCompletion19 = (_step19 = _iterator19.next()).done); _iteratorNormalCompletion19 = true) {
          var _step19$value = _step19.value,
              afterKey = _step19$value.afterKey,
              before = _step19$value.before,
              comment = _step19$value.comment;
          var item = collection.items[before];

          if (!item) {
            if (comment !== void 0) {
              if (collection.comment) collection.comment += "\n" + comment;else collection.comment = comment;
            }
          } else {
            if (afterKey && item.value) item = item.value;

            if (comment === void 0) {
              if (afterKey || !item.commentBefore) item.spaceBefore = true;
            } else {
              if (item.commentBefore) item.commentBefore += "\n" + comment;else item.commentBefore = comment;
            }
          }
        }
      } catch (err) {
        _didIteratorError19 = true;
        _iteratorError19 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion19 && _iterator19["return"] != null) {
            _iterator19["return"]();
          }
        } finally {
          if (_didIteratorError19) {
            throw _iteratorError19;
          }
        }
      }
    }

    function resolveString(doc, node) {
      var res = node.strValue;
      if (!res) return "";
      if (typeof res === "string") return res;
      res.errors.forEach(function (error) {
        if (!error.source) error.source = node;
        doc.errors.push(error);
      });
      return res.str;
    }

    function resolveTagHandle(doc, node) {
      var _node$tag = node.tag,
          handle = _node$tag.handle,
          suffix = _node$tag.suffix;
      var prefix = doc.tagPrefixes.find(function (p) {
        return p.handle === handle;
      });

      if (!prefix) {
        var dtp = doc.getDefaults().tagPrefixes;
        if (dtp) prefix = dtp.find(function (p) {
          return p.handle === handle;
        });
        if (!prefix) throw new PlainValue.YAMLSemanticError(node, "The ".concat(handle, " tag handle is non-default and was not declared."));
      }

      if (!suffix) throw new PlainValue.YAMLSemanticError(node, "The ".concat(handle, " tag has no suffix."));

      if (handle === "!" && (doc.version || doc.options.version) === "1.0") {
        if (suffix[0] === "^") {
          doc.warnings.push(new PlainValue.YAMLWarning(node, "YAML 1.0 ^ tag expansion is not supported"));
          return suffix;
        }

        if (/[:/]/.test(suffix)) {
          var vocab = suffix.match(/^([a-z0-9-]+)\/(.*)/i);
          return vocab ? "tag:".concat(vocab[1], ".yaml.org,2002:").concat(vocab[2]) : "tag:".concat(suffix);
        }
      }

      return prefix.prefix + decodeURIComponent(suffix);
    }

    function resolveTagName(doc, node) {
      var tag = node.tag,
          type = node.type;
      var nonSpecific = false;

      if (tag) {
        var handle = tag.handle,
            suffix = tag.suffix,
            verbatim = tag.verbatim;

        if (verbatim) {
          if (verbatim !== "!" && verbatim !== "!!") return verbatim;
          var msg = "Verbatim tags aren't resolved, so ".concat(verbatim, " is invalid.");
          doc.errors.push(new PlainValue.YAMLSemanticError(node, msg));
        } else if (handle === "!" && !suffix) {
          nonSpecific = true;
        } else {
          try {
            return resolveTagHandle(doc, node);
          } catch (error) {
            doc.errors.push(error);
          }
        }
      }

      switch (type) {
        case PlainValue.Type.BLOCK_FOLDED:
        case PlainValue.Type.BLOCK_LITERAL:
        case PlainValue.Type.QUOTE_DOUBLE:
        case PlainValue.Type.QUOTE_SINGLE:
          return PlainValue.defaultTags.STR;

        case PlainValue.Type.FLOW_MAP:
        case PlainValue.Type.MAP:
          return PlainValue.defaultTags.MAP;

        case PlainValue.Type.FLOW_SEQ:
        case PlainValue.Type.SEQ:
          return PlainValue.defaultTags.SEQ;

        case PlainValue.Type.PLAIN:
          return nonSpecific ? PlainValue.defaultTags.STR : null;

        default:
          return null;
      }
    }

    function resolveByTagName(doc, node, tagName) {
      var tags = doc.schema.tags;
      var matchWithTest = [];
      var _iteratorNormalCompletion20 = true;
      var _didIteratorError20 = false;
      var _iteratorError20 = undefined;

      try {
        for (var _iterator20 = tags[Symbol.iterator](), _step20; !(_iteratorNormalCompletion20 = (_step20 = _iterator20.next()).done); _iteratorNormalCompletion20 = true) {
          var tag = _step20.value;

          if (tag.tag === tagName) {
            if (tag.test) matchWithTest.push(tag);else {
              var res = tag.resolve(doc, node);
              return res instanceof Collection ? res : new Scalar(res);
            }
          }
        }
      } catch (err) {
        _didIteratorError20 = true;
        _iteratorError20 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion20 && _iterator20["return"] != null) {
            _iterator20["return"]();
          }
        } finally {
          if (_didIteratorError20) {
            throw _iteratorError20;
          }
        }
      }

      var str = resolveString(doc, node);
      if (typeof str === "string" && matchWithTest.length > 0) return resolveScalar(str, matchWithTest, tags.scalarFallback);
      return null;
    }

    function getFallbackTagName(_ref21) {
      var type = _ref21.type;

      switch (type) {
        case PlainValue.Type.FLOW_MAP:
        case PlainValue.Type.MAP:
          return PlainValue.defaultTags.MAP;

        case PlainValue.Type.FLOW_SEQ:
        case PlainValue.Type.SEQ:
          return PlainValue.defaultTags.SEQ;

        default:
          return PlainValue.defaultTags.STR;
      }
    }

    function resolveTag(doc, node, tagName) {
      try {
        var res = resolveByTagName(doc, node, tagName);

        if (res) {
          if (tagName && node.tag) res.tag = tagName;
          return res;
        }
      } catch (error) {
        if (!error.source) error.source = node;
        doc.errors.push(error);
        return null;
      }

      try {
        var fallback = getFallbackTagName(node);
        if (!fallback) throw new Error("The tag ".concat(tagName, " is unavailable"));
        var msg = "The tag ".concat(tagName, " is unavailable, falling back to ").concat(fallback);
        doc.warnings.push(new PlainValue.YAMLWarning(node, msg));

        var _res = resolveByTagName(doc, node, fallback);

        _res.tag = tagName;
        return _res;
      } catch (error) {
        var refError = new PlainValue.YAMLReferenceError(node, error.message);
        refError.stack = error.stack;
        doc.errors.push(refError);
        return null;
      }
    }

    var isCollectionItem = function isCollectionItem(node) {
      if (!node) return false;
      var type = node.type;
      return type === PlainValue.Type.MAP_KEY || type === PlainValue.Type.MAP_VALUE || type === PlainValue.Type.SEQ_ITEM;
    };

    function resolveNodeProps(errors, node) {
      var comments = {
        before: [],
        after: []
      };
      var hasAnchor = false;
      var hasTag = false;
      var props = isCollectionItem(node.context.parent) ? node.context.parent.props.concat(node.props) : node.props;
      var _iteratorNormalCompletion21 = true;
      var _didIteratorError21 = false;
      var _iteratorError21 = undefined;

      try {
        for (var _iterator21 = props[Symbol.iterator](), _step21; !(_iteratorNormalCompletion21 = (_step21 = _iterator21.next()).done); _iteratorNormalCompletion21 = true) {
          var _step21$value = _step21.value,
              start = _step21$value.start,
              end = _step21$value.end;

          switch (node.context.src[start]) {
            case PlainValue.Char.COMMENT:
              {
                if (!node.commentHasRequiredWhitespace(start)) {
                  var msg = "Comments must be separated from other tokens by white space characters";
                  errors.push(new PlainValue.YAMLSemanticError(node, msg));
                }

                var header = node.header,
                    valueRange = node.valueRange;
                var cc = valueRange && (start > valueRange.start || header && start > header.start) ? comments.after : comments.before;
                cc.push(node.context.src.slice(start + 1, end));
                break;
              }

            case PlainValue.Char.ANCHOR:
              if (hasAnchor) {
                var _msg5 = "A node can have at most one anchor";
                errors.push(new PlainValue.YAMLSemanticError(node, _msg5));
              }

              hasAnchor = true;
              break;

            case PlainValue.Char.TAG:
              if (hasTag) {
                var _msg6 = "A node can have at most one tag";
                errors.push(new PlainValue.YAMLSemanticError(node, _msg6));
              }

              hasTag = true;
              break;
          }
        }
      } catch (err) {
        _didIteratorError21 = true;
        _iteratorError21 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion21 && _iterator21["return"] != null) {
            _iterator21["return"]();
          }
        } finally {
          if (_didIteratorError21) {
            throw _iteratorError21;
          }
        }
      }

      return {
        comments: comments,
        hasAnchor: hasAnchor,
        hasTag: hasTag
      };
    }

    function resolveNodeValue(doc, node) {
      var anchors = doc.anchors,
          errors = doc.errors,
          schema = doc.schema;

      if (node.type === PlainValue.Type.ALIAS) {
        var name = node.rawValue;
        var src = anchors.getNode(name);

        if (!src) {
          var msg = "Aliased anchor not found: ".concat(name);
          errors.push(new PlainValue.YAMLReferenceError(node, msg));
          return null;
        }

        var res = new Alias(src);

        anchors._cstAliases.push(res);

        return res;
      }

      var tagName = resolveTagName(doc, node);
      if (tagName) return resolveTag(doc, node, tagName);

      if (node.type !== PlainValue.Type.PLAIN) {
        var _msg7 = "Failed to resolve ".concat(node.type, " node here");

        errors.push(new PlainValue.YAMLSyntaxError(node, _msg7));
        return null;
      }

      try {
        var str = resolveString(doc, node);
        return resolveScalar(str, schema.tags, schema.tags.scalarFallback);
      } catch (error) {
        if (!error.source) error.source = node;
        errors.push(error);
        return null;
      }
    }

    function resolveNode(doc, node) {
      if (!node) return null;
      if (node.error) doc.errors.push(node.error);

      var _resolveNodeProps = resolveNodeProps(doc.errors, node),
          comments = _resolveNodeProps.comments,
          hasAnchor = _resolveNodeProps.hasAnchor,
          hasTag = _resolveNodeProps.hasTag;

      if (hasAnchor) {
        var anchors = doc.anchors;
        var name = node.anchor;
        var prev = anchors.getNode(name);
        if (prev) anchors.map[anchors.newName(name)] = prev;
        anchors.map[name] = node;
      }

      if (node.type === PlainValue.Type.ALIAS && (hasAnchor || hasTag)) {
        var msg = "An alias node must not specify any properties";
        doc.errors.push(new PlainValue.YAMLSemanticError(node, msg));
      }

      var res = resolveNodeValue(doc, node);

      if (res) {
        res.range = [node.range.start, node.range.end];
        if (doc.options.keepCstNodes) res.cstNode = node;
        if (doc.options.keepNodeTypes) res.type = node.type;
        var cb = comments.before.join("\n");

        if (cb) {
          res.commentBefore = res.commentBefore ? "".concat(res.commentBefore, "\n").concat(cb) : cb;
        }

        var ca = comments.after.join("\n");
        if (ca) res.comment = res.comment ? "".concat(res.comment, "\n").concat(ca) : ca;
      }

      return node.resolved = res;
    }

    function resolveMap(doc, cst) {
      if (cst.type !== PlainValue.Type.MAP && cst.type !== PlainValue.Type.FLOW_MAP) {
        var msg = "A ".concat(cst.type, " node cannot be resolved as a mapping");
        doc.errors.push(new PlainValue.YAMLSyntaxError(cst, msg));
        return null;
      }

      var _ref22 = cst.type === PlainValue.Type.FLOW_MAP ? resolveFlowMapItems(doc, cst) : resolveBlockMapItems(doc, cst),
          comments = _ref22.comments,
          items = _ref22.items;

      var map = new YAMLMap();
      map.items = items;
      resolveComments(map, comments);
      var hasCollectionKey = false;

      for (var i = 0; i < items.length; ++i) {
        var iKey = items[i].key;
        if (iKey instanceof Collection) hasCollectionKey = true;

        if (doc.schema.merge && iKey && iKey.value === MERGE_KEY) {
          items[i] = new Merge(items[i]);
          var sources = items[i].value.items;
          var error = null;
          sources.some(function (node) {
            if (node instanceof Alias) {
              var type = node.source.type;
              if (type === PlainValue.Type.MAP || type === PlainValue.Type.FLOW_MAP) return false;
              return error = "Merge nodes aliases can only point to maps";
            }

            return error = "Merge nodes can only have Alias nodes as values";
          });
          if (error) doc.errors.push(new PlainValue.YAMLSemanticError(cst, error));
        } else {
          for (var j = i + 1; j < items.length; ++j) {
            var jKey = items[j].key;

            if (iKey === jKey || iKey && jKey && Object.prototype.hasOwnProperty.call(iKey, "value") && iKey.value === jKey.value) {
              var _msg8 = "Map keys must be unique; \"".concat(iKey, "\" is repeated");

              doc.errors.push(new PlainValue.YAMLSemanticError(cst, _msg8));
              break;
            }
          }
        }
      }

      if (hasCollectionKey && !doc.options.mapAsMap) {
        var warn = "Keys with collection values will be stringified as YAML due to JS Object restrictions. Use mapAsMap: true to avoid this.";
        doc.warnings.push(new PlainValue.YAMLWarning(cst, warn));
      }

      cst.resolved = map;
      return map;
    }

    var valueHasPairComment = function valueHasPairComment(_ref23) {
      var _ref23$context = _ref23.context,
          lineStart = _ref23$context.lineStart,
          node = _ref23$context.node,
          src = _ref23$context.src,
          props = _ref23.props;
      if (props.length === 0) return false;
      var start = props[0].start;
      if (node && start > node.valueRange.start) return false;
      if (src[start] !== PlainValue.Char.COMMENT) return false;

      for (var i = lineStart; i < start; ++i) {
        if (src[i] === "\n") return false;
      }

      return true;
    };

    function resolvePairComment(item, pair) {
      if (!valueHasPairComment(item)) return;
      var comment = item.getPropValue(0, PlainValue.Char.COMMENT, true);
      var found = false;
      var cb = pair.value.commentBefore;

      if (cb && cb.startsWith(comment)) {
        pair.value.commentBefore = cb.substr(comment.length + 1);
        found = true;
      } else {
        var cc = pair.value.comment;

        if (!item.node && cc && cc.startsWith(comment)) {
          pair.value.comment = cc.substr(comment.length + 1);
          found = true;
        }
      }

      if (found) pair.comment = comment;
    }

    function resolveBlockMapItems(doc, cst) {
      var comments = [];
      var items = [];
      var key = void 0;
      var keyStart = null;

      for (var i = 0; i < cst.items.length; ++i) {
        var item = cst.items[i];

        switch (item.type) {
          case PlainValue.Type.BLANK_LINE:
            comments.push({
              afterKey: !!key,
              before: items.length
            });
            break;

          case PlainValue.Type.COMMENT:
            comments.push({
              afterKey: !!key,
              before: items.length,
              comment: item.comment
            });
            break;

          case PlainValue.Type.MAP_KEY:
            if (key !== void 0) items.push(new Pair(key));
            if (item.error) doc.errors.push(item.error);
            key = resolveNode(doc, item.node);
            keyStart = null;
            break;

          case PlainValue.Type.MAP_VALUE:
            {
              if (key === void 0) key = null;
              if (item.error) doc.errors.push(item.error);

              if (!item.context.atLineStart && item.node && item.node.type === PlainValue.Type.MAP && !item.node.context.atLineStart) {
                var msg = "Nested mappings are not allowed in compact mappings";
                doc.errors.push(new PlainValue.YAMLSemanticError(item.node, msg));
              }

              var valueNode = item.node;

              if (!valueNode && item.props.length > 0) {
                valueNode = new PlainValue.PlainValue(PlainValue.Type.PLAIN, []);
                valueNode.context = {
                  parent: item,
                  src: item.context.src
                };
                var pos = item.range.start + 1;
                valueNode.range = {
                  start: pos,
                  end: pos
                };
                valueNode.valueRange = {
                  start: pos,
                  end: pos
                };

                if (typeof item.range.origStart === "number") {
                  var origPos = item.range.origStart + 1;
                  valueNode.range.origStart = valueNode.range.origEnd = origPos;
                  valueNode.valueRange.origStart = valueNode.valueRange.origEnd = origPos;
                }
              }

              var pair = new Pair(key, resolveNode(doc, valueNode));
              resolvePairComment(item, pair);
              items.push(pair);

              if (key && typeof keyStart === "number") {
                if (item.range.start > keyStart + 1024) doc.errors.push(getLongKeyError(cst, key));
              }

              key = void 0;
              keyStart = null;
            }
            break;

          default:
            if (key !== void 0) items.push(new Pair(key));
            key = resolveNode(doc, item);
            keyStart = item.range.start;
            if (item.error) doc.errors.push(item.error);

            next: for (var j = i + 1;; ++j) {
              var nextItem = cst.items[j];

              switch (nextItem && nextItem.type) {
                case PlainValue.Type.BLANK_LINE:
                case PlainValue.Type.COMMENT:
                  continue next;

                case PlainValue.Type.MAP_VALUE:
                  break next;

                default:
                  {
                    var _msg9 = "Implicit map keys need to be followed by map values";
                    doc.errors.push(new PlainValue.YAMLSemanticError(item, _msg9));
                    break next;
                  }
              }
            }

            if (item.valueRangeContainsNewline) {
              var _msg10 = "Implicit map keys need to be on a single line";
              doc.errors.push(new PlainValue.YAMLSemanticError(item, _msg10));
            }

        }
      }

      if (key !== void 0) items.push(new Pair(key));
      return {
        comments: comments,
        items: items
      };
    }

    function resolveFlowMapItems(doc, cst) {
      var comments = [];
      var items = [];
      var key = void 0;
      var explicitKey = false;
      var next = "{";

      for (var i = 0; i < cst.items.length; ++i) {
        var item = cst.items[i];

        if (typeof item["char"] === "string") {
          var _char5 = item["char"],
              offset = item.offset;

          if (_char5 === "?" && key === void 0 && !explicitKey) {
            explicitKey = true;
            next = ":";
            continue;
          }

          if (_char5 === ":") {
            if (key === void 0) key = null;

            if (next === ":") {
              next = ",";
              continue;
            }
          } else {
            if (explicitKey) {
              if (key === void 0 && _char5 !== ",") key = null;
              explicitKey = false;
            }

            if (key !== void 0) {
              items.push(new Pair(key));
              key = void 0;

              if (_char5 === ",") {
                next = ":";
                continue;
              }
            }
          }

          if (_char5 === "}") {
            if (i === cst.items.length - 1) continue;
          } else if (_char5 === next) {
            next = ":";
            continue;
          }

          var msg = "Flow map contains an unexpected ".concat(_char5);
          var err = new PlainValue.YAMLSyntaxError(cst, msg);
          err.offset = offset;
          doc.errors.push(err);
        } else if (item.type === PlainValue.Type.BLANK_LINE) {
          comments.push({
            afterKey: !!key,
            before: items.length
          });
        } else if (item.type === PlainValue.Type.COMMENT) {
          checkFlowCommentSpace(doc.errors, item);
          comments.push({
            afterKey: !!key,
            before: items.length,
            comment: item.comment
          });
        } else if (key === void 0) {
          if (next === ",") doc.errors.push(new PlainValue.YAMLSemanticError(item, "Separator , missing in flow map"));
          key = resolveNode(doc, item);
        } else {
          if (next !== ",") doc.errors.push(new PlainValue.YAMLSemanticError(item, "Indicator : missing in flow map entry"));
          items.push(new Pair(key, resolveNode(doc, item)));
          key = void 0;
          explicitKey = false;
        }
      }

      checkFlowCollectionEnd(doc.errors, cst);
      if (key !== void 0) items.push(new Pair(key));
      return {
        comments: comments,
        items: items
      };
    }

    function resolveSeq(doc, cst) {
      if (cst.type !== PlainValue.Type.SEQ && cst.type !== PlainValue.Type.FLOW_SEQ) {
        var msg = "A ".concat(cst.type, " node cannot be resolved as a sequence");
        doc.errors.push(new PlainValue.YAMLSyntaxError(cst, msg));
        return null;
      }

      var _ref24 = cst.type === PlainValue.Type.FLOW_SEQ ? resolveFlowSeqItems(doc, cst) : resolveBlockSeqItems(doc, cst),
          comments = _ref24.comments,
          items = _ref24.items;

      var seq = new YAMLSeq();
      seq.items = items;
      resolveComments(seq, comments);

      if (!doc.options.mapAsMap && items.some(function (it) {
        return it instanceof Pair && it.key instanceof Collection;
      })) {
        var warn = "Keys with collection values will be stringified as YAML due to JS Object restrictions. Use mapAsMap: true to avoid this.";
        doc.warnings.push(new PlainValue.YAMLWarning(cst, warn));
      }

      cst.resolved = seq;
      return seq;
    }

    function resolveBlockSeqItems(doc, cst) {
      var comments = [];
      var items = [];

      for (var i = 0; i < cst.items.length; ++i) {
        var item = cst.items[i];

        switch (item.type) {
          case PlainValue.Type.BLANK_LINE:
            comments.push({
              before: items.length
            });
            break;

          case PlainValue.Type.COMMENT:
            comments.push({
              comment: item.comment,
              before: items.length
            });
            break;

          case PlainValue.Type.SEQ_ITEM:
            if (item.error) doc.errors.push(item.error);
            items.push(resolveNode(doc, item.node));

            if (item.hasProps) {
              var msg = "Sequence items cannot have tags or anchors before the - indicator";
              doc.errors.push(new PlainValue.YAMLSemanticError(item, msg));
            }

            break;

          default:
            if (item.error) doc.errors.push(item.error);
            doc.errors.push(new PlainValue.YAMLSyntaxError(item, "Unexpected ".concat(item.type, " node in sequence")));
        }
      }

      return {
        comments: comments,
        items: items
      };
    }

    function resolveFlowSeqItems(doc, cst) {
      var comments = [];
      var items = [];
      var explicitKey = false;
      var key = void 0;
      var keyStart = null;
      var next = "[";
      var prevItem = null;

      for (var i = 0; i < cst.items.length; ++i) {
        var item = cst.items[i];

        if (typeof item["char"] === "string") {
          var _char6 = item["char"],
              offset = item.offset;

          if (_char6 !== ":" && (explicitKey || key !== void 0)) {
            if (explicitKey && key === void 0) key = next ? items.pop() : null;
            items.push(new Pair(key));
            explicitKey = false;
            key = void 0;
            keyStart = null;
          }

          if (_char6 === next) {
            next = null;
          } else if (!next && _char6 === "?") {
            explicitKey = true;
          } else if (next !== "[" && _char6 === ":" && key === void 0) {
            if (next === ",") {
              key = items.pop();

              if (key instanceof Pair) {
                var msg = "Chaining flow sequence pairs is invalid";
                var err = new PlainValue.YAMLSemanticError(cst, msg);
                err.offset = offset;
                doc.errors.push(err);
              }

              if (!explicitKey && typeof keyStart === "number") {
                var keyEnd = item.range ? item.range.start : item.offset;
                if (keyEnd > keyStart + 1024) doc.errors.push(getLongKeyError(cst, key));
                var src = prevItem.context.src;

                for (var i2 = keyStart; i2 < keyEnd; ++i2) {
                  if (src[i2] === "\n") {
                    var _msg11 = "Implicit keys of flow sequence pairs need to be on a single line";
                    doc.errors.push(new PlainValue.YAMLSemanticError(prevItem, _msg11));
                    break;
                  }
                }
              }
            } else {
              key = null;
            }

            keyStart = null;
            explicitKey = false;
            next = null;
          } else if (next === "[" || _char6 !== "]" || i < cst.items.length - 1) {
            var _msg12 = "Flow sequence contains an unexpected ".concat(_char6);

            var _err = new PlainValue.YAMLSyntaxError(cst, _msg12);

            _err.offset = offset;
            doc.errors.push(_err);
          }
        } else if (item.type === PlainValue.Type.BLANK_LINE) {
          comments.push({
            before: items.length
          });
        } else if (item.type === PlainValue.Type.COMMENT) {
          checkFlowCommentSpace(doc.errors, item);
          comments.push({
            comment: item.comment,
            before: items.length
          });
        } else {
          if (next) {
            var _msg13 = "Expected a ".concat(next, " in flow sequence");

            doc.errors.push(new PlainValue.YAMLSemanticError(item, _msg13));
          }

          var value = resolveNode(doc, item);

          if (key === void 0) {
            items.push(value);
            prevItem = item;
          } else {
            items.push(new Pair(key, value));
            key = void 0;
          }

          keyStart = item.range.start;
          next = ",";
        }
      }

      checkFlowCollectionEnd(doc.errors, cst);
      if (key !== void 0) items.push(new Pair(key));
      return {
        comments: comments,
        items: items
      };
    }

    exports2.Alias = Alias;
    exports2.Collection = Collection;
    exports2.Merge = Merge;
    exports2.Node = Node;
    exports2.Pair = Pair;
    exports2.Scalar = Scalar;
    exports2.YAMLMap = YAMLMap;
    exports2.YAMLSeq = YAMLSeq;
    exports2.addComment = addComment;
    exports2.binaryOptions = binaryOptions;
    exports2.boolOptions = boolOptions;
    exports2.findPair = findPair;
    exports2.intOptions = intOptions;
    exports2.isEmptyPath = isEmptyPath;
    exports2.nullOptions = nullOptions;
    exports2.resolveMap = resolveMap;
    exports2.resolveNode = resolveNode;
    exports2.resolveSeq = resolveSeq;
    exports2.resolveString = resolveString;
    exports2.strOptions = strOptions;
    exports2.stringifyNumber = stringifyNumber;
    exports2.stringifyString = stringifyString;
    exports2.toJSON = _toJSON;
  }
});

var require_warnings_1000a372 = __commonJS({
  "node_modules/yaml/dist/warnings-1000a372.js": function node_modulesYamlDistWarnings1000a372Js(exports2) {
    "use strict";

    var PlainValue = require_PlainValue_ec8e588e();
    var resolveSeq = require_resolveSeq_d03cb037();
    var binary = {
      identify: function identify(value) {
        return value instanceof Uint8Array;
      },
      "default": false,
      tag: "tag:yaml.org,2002:binary",
      resolve: function resolve(doc, node) {
        var src = resolveSeq.resolveString(doc, node);

        if (typeof Buffer === "function") {
          return Buffer.from(src, "base64");
        } else if (typeof atob === "function") {
          var str = atob(src.replace(/[\n\r]/g, ""));
          var buffer = new Uint8Array(str.length);

          for (var i = 0; i < str.length; ++i) {
            buffer[i] = str.charCodeAt(i);
          }

          return buffer;
        } else {
          var msg = "This environment does not support reading binary tags; either Buffer or atob is required";
          doc.errors.push(new PlainValue.YAMLReferenceError(node, msg));
          return null;
        }
      },
      options: resolveSeq.binaryOptions,
      stringify: function stringify(_ref25, ctx, onComment, onChompKeep) {
        var comment = _ref25.comment,
            type = _ref25.type,
            value = _ref25.value;
        var src;

        if (typeof Buffer === "function") {
          src = value instanceof Buffer ? value.toString("base64") : Buffer.from(value.buffer).toString("base64");
        } else if (typeof btoa === "function") {
          var s = "";

          for (var i = 0; i < value.length; ++i) {
            s += String.fromCharCode(value[i]);
          }

          src = btoa(s);
        } else {
          throw new Error("This environment does not support writing binary tags; either Buffer or btoa is required");
        }

        if (!type) type = resolveSeq.binaryOptions.defaultType;

        if (type === PlainValue.Type.QUOTE_DOUBLE) {
          value = src;
        } else {
          var lineWidth = resolveSeq.binaryOptions.lineWidth;
          var n = Math.ceil(src.length / lineWidth);
          var lines = new Array(n);

          for (var _i10 = 0, o = 0; _i10 < n; ++_i10, o += lineWidth) {
            lines[_i10] = src.substr(o, lineWidth);
          }

          value = lines.join(type === PlainValue.Type.BLOCK_LITERAL ? "\n" : " ");
        }

        return resolveSeq.stringifyString({
          comment: comment,
          type: type,
          value: value
        }, ctx, onComment, onChompKeep);
      }
    };

    function parsePairs(doc, cst) {
      var seq = resolveSeq.resolveSeq(doc, cst);

      for (var i = 0; i < seq.items.length; ++i) {
        var item = seq.items[i];
        if (item instanceof resolveSeq.Pair) continue;else if (item instanceof resolveSeq.YAMLMap) {
          if (item.items.length > 1) {
            var msg = "Each pair must have its own sequence indicator";
            throw new PlainValue.YAMLSemanticError(cst, msg);
          }

          var pair = item.items[0] || new resolveSeq.Pair();
          if (item.commentBefore) pair.commentBefore = pair.commentBefore ? "".concat(item.commentBefore, "\n").concat(pair.commentBefore) : item.commentBefore;
          if (item.comment) pair.comment = pair.comment ? "".concat(item.comment, "\n").concat(pair.comment) : item.comment;
          item = pair;
        }
        seq.items[i] = item instanceof resolveSeq.Pair ? item : new resolveSeq.Pair(item);
      }

      return seq;
    }

    function createPairs(schema, iterable, ctx) {
      var pairs2 = new resolveSeq.YAMLSeq(schema);
      pairs2.tag = "tag:yaml.org,2002:pairs";
      var _iteratorNormalCompletion22 = true;
      var _didIteratorError22 = false;
      var _iteratorError22 = undefined;

      try {
        for (var _iterator22 = iterable[Symbol.iterator](), _step22; !(_iteratorNormalCompletion22 = (_step22 = _iterator22.next()).done); _iteratorNormalCompletion22 = true) {
          var it = _step22.value;
          var key = void 0,
              value = void 0;

          if (Array.isArray(it)) {
            if (it.length === 2) {
              key = it[0];
              value = it[1];
            } else throw new TypeError("Expected [key, value] tuple: ".concat(it));
          } else if (it && it instanceof Object) {
            var keys = Object.keys(it);

            if (keys.length === 1) {
              key = keys[0];
              value = it[key];
            } else throw new TypeError("Expected { key: value } tuple: ".concat(it));
          } else {
            key = it;
          }

          var pair = schema.createPair(key, value, ctx);
          pairs2.items.push(pair);
        }
      } catch (err) {
        _didIteratorError22 = true;
        _iteratorError22 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion22 && _iterator22["return"] != null) {
            _iterator22["return"]();
          }
        } finally {
          if (_didIteratorError22) {
            throw _iteratorError22;
          }
        }
      }

      return pairs2;
    }

    var pairs = {
      "default": false,
      tag: "tag:yaml.org,2002:pairs",
      resolve: parsePairs,
      createNode: createPairs
    };

    var YAMLOMap =
    /*#__PURE__*/
    function (_resolveSeq$YAMLSeq) {
      _inherits(YAMLOMap, _resolveSeq$YAMLSeq);

      function YAMLOMap() {
        var _this16;

        _classCallCheck(this, YAMLOMap);

        _this16 = _possibleConstructorReturn(this, _getPrototypeOf(YAMLOMap).call(this));

        PlainValue._defineProperty(_assertThisInitialized(_this16), "add", resolveSeq.YAMLMap.prototype.add.bind(_assertThisInitialized(_this16)));

        PlainValue._defineProperty(_assertThisInitialized(_this16), "delete", resolveSeq.YAMLMap.prototype["delete"].bind(_assertThisInitialized(_this16)));

        PlainValue._defineProperty(_assertThisInitialized(_this16), "get", resolveSeq.YAMLMap.prototype.get.bind(_assertThisInitialized(_this16)));

        PlainValue._defineProperty(_assertThisInitialized(_this16), "has", resolveSeq.YAMLMap.prototype.has.bind(_assertThisInitialized(_this16)));

        PlainValue._defineProperty(_assertThisInitialized(_this16), "set", resolveSeq.YAMLMap.prototype.set.bind(_assertThisInitialized(_this16)));

        _this16.tag = YAMLOMap.tag;
        return _this16;
      }

      _createClass(YAMLOMap, [{
        key: "toJSON",
        value: function toJSON(_, ctx) {
          var map =
          /* @__PURE__ */
          new Map();
          if (ctx && ctx.onCreate) ctx.onCreate(map);
          var _iteratorNormalCompletion23 = true;
          var _didIteratorError23 = false;
          var _iteratorError23 = undefined;

          try {
            for (var _iterator23 = this.items[Symbol.iterator](), _step23; !(_iteratorNormalCompletion23 = (_step23 = _iterator23.next()).done); _iteratorNormalCompletion23 = true) {
              var pair = _step23.value;
              var key = void 0,
                  value = void 0;

              if (pair instanceof resolveSeq.Pair) {
                key = resolveSeq.toJSON(pair.key, "", ctx);
                value = resolveSeq.toJSON(pair.value, key, ctx);
              } else {
                key = resolveSeq.toJSON(pair, "", ctx);
              }

              if (map.has(key)) throw new Error("Ordered maps must not include duplicate keys");
              map.set(key, value);
            }
          } catch (err) {
            _didIteratorError23 = true;
            _iteratorError23 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion23 && _iterator23["return"] != null) {
                _iterator23["return"]();
              }
            } finally {
              if (_didIteratorError23) {
                throw _iteratorError23;
              }
            }
          }

          return map;
        }
      }]);

      return YAMLOMap;
    }(resolveSeq.YAMLSeq);

    PlainValue._defineProperty(YAMLOMap, "tag", "tag:yaml.org,2002:omap");

    function parseOMap(doc, cst) {
      var pairs2 = parsePairs(doc, cst);
      var seenKeys = [];
      var _iteratorNormalCompletion24 = true;
      var _didIteratorError24 = false;
      var _iteratorError24 = undefined;

      try {
        for (var _iterator24 = pairs2.items[Symbol.iterator](), _step24; !(_iteratorNormalCompletion24 = (_step24 = _iterator24.next()).done); _iteratorNormalCompletion24 = true) {
          var key = _step24.value.key;

          if (key instanceof resolveSeq.Scalar) {
            if (seenKeys.includes(key.value)) {
              var msg = "Ordered maps must not include duplicate keys";
              throw new PlainValue.YAMLSemanticError(cst, msg);
            } else {
              seenKeys.push(key.value);
            }
          }
        }
      } catch (err) {
        _didIteratorError24 = true;
        _iteratorError24 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion24 && _iterator24["return"] != null) {
            _iterator24["return"]();
          }
        } finally {
          if (_didIteratorError24) {
            throw _iteratorError24;
          }
        }
      }

      return Object.assign(new YAMLOMap(), pairs2);
    }

    function createOMap(schema, iterable, ctx) {
      var pairs2 = createPairs(schema, iterable, ctx);
      var omap2 = new YAMLOMap();
      omap2.items = pairs2.items;
      return omap2;
    }

    var omap = {
      identify: function identify(value) {
        return value instanceof Map;
      },
      nodeClass: YAMLOMap,
      "default": false,
      tag: "tag:yaml.org,2002:omap",
      resolve: parseOMap,
      createNode: createOMap
    };

    var YAMLSet =
    /*#__PURE__*/
    function (_resolveSeq$YAMLMap) {
      _inherits(YAMLSet, _resolveSeq$YAMLMap);

      function YAMLSet() {
        var _this17;

        _classCallCheck(this, YAMLSet);

        _this17 = _possibleConstructorReturn(this, _getPrototypeOf(YAMLSet).call(this));
        _this17.tag = YAMLSet.tag;
        return _this17;
      }

      _createClass(YAMLSet, [{
        key: "add",
        value: function add(key) {
          var pair = key instanceof resolveSeq.Pair ? key : new resolveSeq.Pair(key);
          var prev = resolveSeq.findPair(this.items, pair.key);
          if (!prev) this.items.push(pair);
        }
      }, {
        key: "get",
        value: function get(key, keepPair) {
          var pair = resolveSeq.findPair(this.items, key);
          return !keepPair && pair instanceof resolveSeq.Pair ? pair.key instanceof resolveSeq.Scalar ? pair.key.value : pair.key : pair;
        }
      }, {
        key: "set",
        value: function set(key, value) {
          if (typeof value !== "boolean") throw new Error("Expected boolean value for set(key, value) in a YAML set, not ".concat(_typeof(value)));
          var prev = resolveSeq.findPair(this.items, key);

          if (prev && !value) {
            this.items.splice(this.items.indexOf(prev), 1);
          } else if (!prev && value) {
            this.items.push(new resolveSeq.Pair(key));
          }
        }
      }, {
        key: "toJSON",
        value: function toJSON(_, ctx) {
          return _get(_getPrototypeOf(YAMLSet.prototype), "toJSON", this).call(this, _, ctx, Set);
        }
      }, {
        key: "toString",
        value: function toString(ctx, onComment, onChompKeep) {
          if (!ctx) return JSON.stringify(this);
          if (this.hasAllNullValues()) return _get(_getPrototypeOf(YAMLSet.prototype), "toString", this).call(this, ctx, onComment, onChompKeep);else throw new Error("Set items must all have null values");
        }
      }]);

      return YAMLSet;
    }(resolveSeq.YAMLMap);

    PlainValue._defineProperty(YAMLSet, "tag", "tag:yaml.org,2002:set");

    function parseSet(doc, cst) {
      var map = resolveSeq.resolveMap(doc, cst);
      if (!map.hasAllNullValues()) throw new PlainValue.YAMLSemanticError(cst, "Set items must all have null values");
      return Object.assign(new YAMLSet(), map);
    }

    function createSet(schema, iterable, ctx) {
      var set2 = new YAMLSet();
      var _iteratorNormalCompletion25 = true;
      var _didIteratorError25 = false;
      var _iteratorError25 = undefined;

      try {
        for (var _iterator25 = iterable[Symbol.iterator](), _step25; !(_iteratorNormalCompletion25 = (_step25 = _iterator25.next()).done); _iteratorNormalCompletion25 = true) {
          var value = _step25.value;
          set2.items.push(schema.createPair(value, null, ctx));
        }
      } catch (err) {
        _didIteratorError25 = true;
        _iteratorError25 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion25 && _iterator25["return"] != null) {
            _iterator25["return"]();
          }
        } finally {
          if (_didIteratorError25) {
            throw _iteratorError25;
          }
        }
      }

      return set2;
    }

    var set = {
      identify: function identify(value) {
        return value instanceof Set;
      },
      nodeClass: YAMLSet,
      "default": false,
      tag: "tag:yaml.org,2002:set",
      resolve: parseSet,
      createNode: createSet
    };

    var parseSexagesimal = function parseSexagesimal(sign, parts) {
      var n = parts.split(":").reduce(function (n2, p) {
        return n2 * 60 + Number(p);
      }, 0);
      return sign === "-" ? -n : n;
    };

    var stringifySexagesimal = function stringifySexagesimal(_ref26) {
      var value = _ref26.value;
      if (isNaN(value) || !isFinite(value)) return resolveSeq.stringifyNumber(value);
      var sign = "";

      if (value < 0) {
        sign = "-";
        value = Math.abs(value);
      }

      var parts = [value % 60];

      if (value < 60) {
        parts.unshift(0);
      } else {
        value = Math.round((value - parts[0]) / 60);
        parts.unshift(value % 60);

        if (value >= 60) {
          value = Math.round((value - parts[0]) / 60);
          parts.unshift(value);
        }
      }

      return sign + parts.map(function (n) {
        return n < 10 ? "0" + String(n) : String(n);
      }).join(":").replace(/000000\d*$/, "");
    };

    var intTime = {
      identify: function identify(value) {
        return typeof value === "number";
      },
      "default": true,
      tag: "tag:yaml.org,2002:int",
      format: "TIME",
      test: /^([-+]?)([0-9][0-9_]*(?::[0-5]?[0-9])+)$/,
      resolve: function resolve(str, sign, parts) {
        return parseSexagesimal(sign, parts.replace(/_/g, ""));
      },
      stringify: stringifySexagesimal
    };
    var floatTime = {
      identify: function identify(value) {
        return typeof value === "number";
      },
      "default": true,
      tag: "tag:yaml.org,2002:float",
      format: "TIME",
      test: /^([-+]?)([0-9][0-9_]*(?::[0-5]?[0-9])+\.[0-9_]*)$/,
      resolve: function resolve(str, sign, parts) {
        return parseSexagesimal(sign, parts.replace(/_/g, ""));
      },
      stringify: stringifySexagesimal
    };
    var timestamp = {
      identify: function identify(value) {
        return value instanceof Date;
      },
      "default": true,
      tag: "tag:yaml.org,2002:timestamp",
      test: RegExp("^(?:([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})(?:(?:t|T|[ \\t]+)([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2}(\\.[0-9]+)?)(?:[ \\t]*(Z|[-+][012]?[0-9](?::[0-9]{2})?))?)?)$"),
      resolve: function resolve(str, year, month, day, hour, minute, second, millisec, tz) {
        if (millisec) millisec = (millisec + "00").substr(1, 3);
        var date = Date.UTC(year, month - 1, day, hour || 0, minute || 0, second || 0, millisec || 0);

        if (tz && tz !== "Z") {
          var d = parseSexagesimal(tz[0], tz.slice(1));
          if (Math.abs(d) < 30) d *= 60;
          date -= 6e4 * d;
        }

        return new Date(date);
      },
      stringify: function stringify(_ref27) {
        var value = _ref27.value;
        return value.toISOString().replace(/((T00:00)?:00)?\.000Z$/, "");
      }
    };

    function shouldWarn(deprecation) {
      var env = typeof process !== "undefined" && process.env || {};

      if (deprecation) {
        if (typeof YAML_SILENCE_DEPRECATION_WARNINGS !== "undefined") return !YAML_SILENCE_DEPRECATION_WARNINGS;
        return !env.YAML_SILENCE_DEPRECATION_WARNINGS;
      }

      if (typeof YAML_SILENCE_WARNINGS !== "undefined") return !YAML_SILENCE_WARNINGS;
      return !env.YAML_SILENCE_WARNINGS;
    }

    function warn(warning, type) {
      if (shouldWarn(false)) {
        var emit = typeof process !== "undefined" && process.emitWarning;
        if (emit) emit(warning, type);else {
          console.warn(type ? "".concat(type, ": ").concat(warning) : warning);
        }
      }
    }

    function warnFileDeprecation(filename) {
      if (shouldWarn(true)) {
        var path = filename.replace(/.*yaml[/\\]/i, "").replace(/\.js$/, "").replace(/\\/g, "/");
        warn("The endpoint 'yaml/".concat(path, "' will be removed in a future release."), "DeprecationWarning");
      }
    }

    var warned = {};

    function warnOptionDeprecation(name, alternative) {
      if (!warned[name] && shouldWarn(true)) {
        warned[name] = true;
        var msg = "The option '".concat(name, "' will be removed in a future release");
        msg += alternative ? ", use '".concat(alternative, "' instead.") : ".";
        warn(msg, "DeprecationWarning");
      }
    }

    exports2.binary = binary;
    exports2.floatTime = floatTime;
    exports2.intTime = intTime;
    exports2.omap = omap;
    exports2.pairs = pairs;
    exports2.set = set;
    exports2.timestamp = timestamp;
    exports2.warn = warn;
    exports2.warnFileDeprecation = warnFileDeprecation;
    exports2.warnOptionDeprecation = warnOptionDeprecation;
  }
});

var require_Schema_88e323a7 = __commonJS({
  "node_modules/yaml/dist/Schema-88e323a7.js": function node_modulesYamlDistSchema88e323a7Js(exports2) {
    "use strict";

    var PlainValue = require_PlainValue_ec8e588e();
    var resolveSeq = require_resolveSeq_d03cb037();
    var warnings = require_warnings_1000a372();

    function createMap(schema, obj, ctx) {
      var map2 = new resolveSeq.YAMLMap(schema);

      if (obj instanceof Map) {
        var _iteratorNormalCompletion26 = true;
        var _didIteratorError26 = false;
        var _iteratorError26 = undefined;

        try {
          for (var _iterator26 = obj[Symbol.iterator](), _step26; !(_iteratorNormalCompletion26 = (_step26 = _iterator26.next()).done); _iteratorNormalCompletion26 = true) {
            var _step26$value = _slicedToArray(_step26.value, 2),
                key = _step26$value[0],
                value = _step26$value[1];

            map2.items.push(schema.createPair(key, value, ctx));
          }
        } catch (err) {
          _didIteratorError26 = true;
          _iteratorError26 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion26 && _iterator26["return"] != null) {
              _iterator26["return"]();
            }
          } finally {
            if (_didIteratorError26) {
              throw _iteratorError26;
            }
          }
        }
      } else if (obj && _typeof(obj) === "object") {
        for (var _i11 = 0, _Object$keys8 = Object.keys(obj); _i11 < _Object$keys8.length; _i11++) {
          var _key = _Object$keys8[_i11];
          map2.items.push(schema.createPair(_key, obj[_key], ctx));
        }
      }

      if (typeof schema.sortMapEntries === "function") {
        map2.items.sort(schema.sortMapEntries);
      }

      return map2;
    }

    var map = {
      createNode: createMap,
      "default": true,
      nodeClass: resolveSeq.YAMLMap,
      tag: "tag:yaml.org,2002:map",
      resolve: resolveSeq.resolveMap
    };

    function createSeq(schema, obj, ctx) {
      var seq2 = new resolveSeq.YAMLSeq(schema);

      if (obj && obj[Symbol.iterator]) {
        var _iteratorNormalCompletion27 = true;
        var _didIteratorError27 = false;
        var _iteratorError27 = undefined;

        try {
          for (var _iterator27 = obj[Symbol.iterator](), _step27; !(_iteratorNormalCompletion27 = (_step27 = _iterator27.next()).done); _iteratorNormalCompletion27 = true) {
            var it = _step27.value;
            var v = schema.createNode(it, ctx.wrapScalars, null, ctx);
            seq2.items.push(v);
          }
        } catch (err) {
          _didIteratorError27 = true;
          _iteratorError27 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion27 && _iterator27["return"] != null) {
              _iterator27["return"]();
            }
          } finally {
            if (_didIteratorError27) {
              throw _iteratorError27;
            }
          }
        }
      }

      return seq2;
    }

    var seq = {
      createNode: createSeq,
      "default": true,
      nodeClass: resolveSeq.YAMLSeq,
      tag: "tag:yaml.org,2002:seq",
      resolve: resolveSeq.resolveSeq
    };
    var string = {
      identify: function identify(value) {
        return typeof value === "string";
      },
      "default": true,
      tag: "tag:yaml.org,2002:str",
      resolve: resolveSeq.resolveString,
      stringify: function stringify(item, ctx, onComment, onChompKeep) {
        ctx = Object.assign({
          actualString: true
        }, ctx);
        return resolveSeq.stringifyString(item, ctx, onComment, onChompKeep);
      },
      options: resolveSeq.strOptions
    };
    var failsafe = [map, seq, string];

    var intIdentify$2 = function intIdentify$2(value) {
      return typeof value === "bigint" || Number.isInteger(value);
    };

    var intResolve$1 = function intResolve$1(src, part, radix) {
      return resolveSeq.intOptions.asBigInt ? BigInt(src) : parseInt(part, radix);
    };

    function intStringify$1(node, radix, prefix) {
      var value = node.value;
      if (intIdentify$2(value) && value >= 0) return prefix + value.toString(radix);
      return resolveSeq.stringifyNumber(node);
    }

    var nullObj = {
      identify: function identify(value) {
        return value == null;
      },
      createNode: function createNode(schema, value, ctx) {
        return ctx.wrapScalars ? new resolveSeq.Scalar(null) : null;
      },
      "default": true,
      tag: "tag:yaml.org,2002:null",
      test: /^(?:~|[Nn]ull|NULL)?$/,
      resolve: function resolve() {
        return null;
      },
      options: resolveSeq.nullOptions,
      stringify: function stringify() {
        return resolveSeq.nullOptions.nullStr;
      }
    };
    var boolObj = {
      identify: function identify(value) {
        return typeof value === "boolean";
      },
      "default": true,
      tag: "tag:yaml.org,2002:bool",
      test: /^(?:[Tt]rue|TRUE|[Ff]alse|FALSE)$/,
      resolve: function resolve(str) {
        return str[0] === "t" || str[0] === "T";
      },
      options: resolveSeq.boolOptions,
      stringify: function stringify(_ref28) {
        var value = _ref28.value;
        return value ? resolveSeq.boolOptions.trueStr : resolveSeq.boolOptions.falseStr;
      }
    };
    var octObj = {
      identify: function identify(value) {
        return intIdentify$2(value) && value >= 0;
      },
      "default": true,
      tag: "tag:yaml.org,2002:int",
      format: "OCT",
      test: /^0o([0-7]+)$/,
      resolve: function resolve(str, oct) {
        return intResolve$1(str, oct, 8);
      },
      options: resolveSeq.intOptions,
      stringify: function stringify(node) {
        return intStringify$1(node, 8, "0o");
      }
    };
    var intObj = {
      identify: intIdentify$2,
      "default": true,
      tag: "tag:yaml.org,2002:int",
      test: /^[-+]?[0-9]+$/,
      resolve: function resolve(str) {
        return intResolve$1(str, str, 10);
      },
      options: resolveSeq.intOptions,
      stringify: resolveSeq.stringifyNumber
    };
    var hexObj = {
      identify: function identify(value) {
        return intIdentify$2(value) && value >= 0;
      },
      "default": true,
      tag: "tag:yaml.org,2002:int",
      format: "HEX",
      test: /^0x([0-9a-fA-F]+)$/,
      resolve: function resolve(str, hex) {
        return intResolve$1(str, hex, 16);
      },
      options: resolveSeq.intOptions,
      stringify: function stringify(node) {
        return intStringify$1(node, 16, "0x");
      }
    };
    var nanObj = {
      identify: function identify(value) {
        return typeof value === "number";
      },
      "default": true,
      tag: "tag:yaml.org,2002:float",
      test: /^(?:[-+]?\.inf|(\.nan))$/i,
      resolve: function resolve(str, nan) {
        return nan ? NaN : str[0] === "-" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY;
      },
      stringify: resolveSeq.stringifyNumber
    };
    var expObj = {
      identify: function identify(value) {
        return typeof value === "number";
      },
      "default": true,
      tag: "tag:yaml.org,2002:float",
      format: "EXP",
      test: /^[-+]?(?:\.[0-9]+|[0-9]+(?:\.[0-9]*)?)[eE][-+]?[0-9]+$/,
      resolve: function resolve(str) {
        return parseFloat(str);
      },
      stringify: function stringify(_ref29) {
        var value = _ref29.value;
        return Number(value).toExponential();
      }
    };
    var floatObj = {
      identify: function identify(value) {
        return typeof value === "number";
      },
      "default": true,
      tag: "tag:yaml.org,2002:float",
      test: /^[-+]?(?:\.([0-9]+)|[0-9]+\.([0-9]*))$/,
      resolve: function resolve(str, frac1, frac2) {
        var frac = frac1 || frac2;
        var node = new resolveSeq.Scalar(parseFloat(str));
        if (frac && frac[frac.length - 1] === "0") node.minFractionDigits = frac.length;
        return node;
      },
      stringify: resolveSeq.stringifyNumber
    };
    var core = failsafe.concat([nullObj, boolObj, octObj, intObj, hexObj, nanObj, expObj, floatObj]);

    var intIdentify$1 = function intIdentify$1(value) {
      return typeof value === "bigint" || Number.isInteger(value);
    };

    var stringifyJSON = function stringifyJSON(_ref30) {
      var value = _ref30.value;
      return JSON.stringify(value);
    };

    var json = [map, seq, {
      identify: function identify(value) {
        return typeof value === "string";
      },
      "default": true,
      tag: "tag:yaml.org,2002:str",
      resolve: resolveSeq.resolveString,
      stringify: stringifyJSON
    }, {
      identify: function identify(value) {
        return value == null;
      },
      createNode: function createNode(schema, value, ctx) {
        return ctx.wrapScalars ? new resolveSeq.Scalar(null) : null;
      },
      "default": true,
      tag: "tag:yaml.org,2002:null",
      test: /^null$/,
      resolve: function resolve() {
        return null;
      },
      stringify: stringifyJSON
    }, {
      identify: function identify(value) {
        return typeof value === "boolean";
      },
      "default": true,
      tag: "tag:yaml.org,2002:bool",
      test: /^true|false$/,
      resolve: function resolve(str) {
        return str === "true";
      },
      stringify: stringifyJSON
    }, {
      identify: intIdentify$1,
      "default": true,
      tag: "tag:yaml.org,2002:int",
      test: /^-?(?:0|[1-9][0-9]*)$/,
      resolve: function resolve(str) {
        return resolveSeq.intOptions.asBigInt ? BigInt(str) : parseInt(str, 10);
      },
      stringify: function stringify(_ref31) {
        var value = _ref31.value;
        return intIdentify$1(value) ? value.toString() : JSON.stringify(value);
      }
    }, {
      identify: function identify(value) {
        return typeof value === "number";
      },
      "default": true,
      tag: "tag:yaml.org,2002:float",
      test: /^-?(?:0|[1-9][0-9]*)(?:\.[0-9]*)?(?:[eE][-+]?[0-9]+)?$/,
      resolve: function resolve(str) {
        return parseFloat(str);
      },
      stringify: stringifyJSON
    }];

    json.scalarFallback = function (str) {
      throw new SyntaxError("Unresolved plain scalar ".concat(JSON.stringify(str)));
    };

    var boolStringify = function boolStringify(_ref32) {
      var value = _ref32.value;
      return value ? resolveSeq.boolOptions.trueStr : resolveSeq.boolOptions.falseStr;
    };

    var intIdentify = function intIdentify(value) {
      return typeof value === "bigint" || Number.isInteger(value);
    };

    function intResolve(sign, src, radix) {
      var str = src.replace(/_/g, "");

      if (resolveSeq.intOptions.asBigInt) {
        switch (radix) {
          case 2:
            str = "0b".concat(str);
            break;

          case 8:
            str = "0o".concat(str);
            break;

          case 16:
            str = "0x".concat(str);
            break;
        }

        var n2 = BigInt(str);
        return sign === "-" ? BigInt(-1) * n2 : n2;
      }

      var n = parseInt(str, radix);
      return sign === "-" ? -1 * n : n;
    }

    function intStringify(node, radix, prefix) {
      var value = node.value;

      if (intIdentify(value)) {
        var str = value.toString(radix);
        return value < 0 ? "-" + prefix + str.substr(1) : prefix + str;
      }

      return resolveSeq.stringifyNumber(node);
    }

    var yaml11 = failsafe.concat([{
      identify: function identify(value) {
        return value == null;
      },
      createNode: function createNode(schema, value, ctx) {
        return ctx.wrapScalars ? new resolveSeq.Scalar(null) : null;
      },
      "default": true,
      tag: "tag:yaml.org,2002:null",
      test: /^(?:~|[Nn]ull|NULL)?$/,
      resolve: function resolve() {
        return null;
      },
      options: resolveSeq.nullOptions,
      stringify: function stringify() {
        return resolveSeq.nullOptions.nullStr;
      }
    }, {
      identify: function identify(value) {
        return typeof value === "boolean";
      },
      "default": true,
      tag: "tag:yaml.org,2002:bool",
      test: /^(?:Y|y|[Yy]es|YES|[Tt]rue|TRUE|[Oo]n|ON)$/,
      resolve: function resolve() {
        return true;
      },
      options: resolveSeq.boolOptions,
      stringify: boolStringify
    }, {
      identify: function identify(value) {
        return typeof value === "boolean";
      },
      "default": true,
      tag: "tag:yaml.org,2002:bool",
      test: /^(?:N|n|[Nn]o|NO|[Ff]alse|FALSE|[Oo]ff|OFF)$/i,
      resolve: function resolve() {
        return false;
      },
      options: resolveSeq.boolOptions,
      stringify: boolStringify
    }, {
      identify: intIdentify,
      "default": true,
      tag: "tag:yaml.org,2002:int",
      format: "BIN",
      test: /^([-+]?)0b([0-1_]+)$/,
      resolve: function resolve(str, sign, bin) {
        return intResolve(sign, bin, 2);
      },
      stringify: function stringify(node) {
        return intStringify(node, 2, "0b");
      }
    }, {
      identify: intIdentify,
      "default": true,
      tag: "tag:yaml.org,2002:int",
      format: "OCT",
      test: /^([-+]?)0([0-7_]+)$/,
      resolve: function resolve(str, sign, oct) {
        return intResolve(sign, oct, 8);
      },
      stringify: function stringify(node) {
        return intStringify(node, 8, "0");
      }
    }, {
      identify: intIdentify,
      "default": true,
      tag: "tag:yaml.org,2002:int",
      test: /^([-+]?)([0-9][0-9_]*)$/,
      resolve: function resolve(str, sign, abs) {
        return intResolve(sign, abs, 10);
      },
      stringify: resolveSeq.stringifyNumber
    }, {
      identify: intIdentify,
      "default": true,
      tag: "tag:yaml.org,2002:int",
      format: "HEX",
      test: /^([-+]?)0x([0-9a-fA-F_]+)$/,
      resolve: function resolve(str, sign, hex) {
        return intResolve(sign, hex, 16);
      },
      stringify: function stringify(node) {
        return intStringify(node, 16, "0x");
      }
    }, {
      identify: function identify(value) {
        return typeof value === "number";
      },
      "default": true,
      tag: "tag:yaml.org,2002:float",
      test: /^(?:[-+]?\.inf|(\.nan))$/i,
      resolve: function resolve(str, nan) {
        return nan ? NaN : str[0] === "-" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY;
      },
      stringify: resolveSeq.stringifyNumber
    }, {
      identify: function identify(value) {
        return typeof value === "number";
      },
      "default": true,
      tag: "tag:yaml.org,2002:float",
      format: "EXP",
      test: /^[-+]?([0-9][0-9_]*)?(\.[0-9_]*)?[eE][-+]?[0-9]+$/,
      resolve: function resolve(str) {
        return parseFloat(str.replace(/_/g, ""));
      },
      stringify: function stringify(_ref33) {
        var value = _ref33.value;
        return Number(value).toExponential();
      }
    }, {
      identify: function identify(value) {
        return typeof value === "number";
      },
      "default": true,
      tag: "tag:yaml.org,2002:float",
      test: /^[-+]?(?:[0-9][0-9_]*)?\.([0-9_]*)$/,
      resolve: function resolve(str, frac) {
        var node = new resolveSeq.Scalar(parseFloat(str.replace(/_/g, "")));

        if (frac) {
          var f = frac.replace(/_/g, "");
          if (f[f.length - 1] === "0") node.minFractionDigits = f.length;
        }

        return node;
      },
      stringify: resolveSeq.stringifyNumber
    }], warnings.binary, warnings.omap, warnings.pairs, warnings.set, warnings.intTime, warnings.floatTime, warnings.timestamp);
    var schemas = {
      core: core,
      failsafe: failsafe,
      json: json,
      yaml11: yaml11
    };
    var tags = {
      binary: warnings.binary,
      bool: boolObj,
      "float": floatObj,
      floatExp: expObj,
      floatNaN: nanObj,
      floatTime: warnings.floatTime,
      "int": intObj,
      intHex: hexObj,
      intOct: octObj,
      intTime: warnings.intTime,
      map: map,
      "null": nullObj,
      omap: warnings.omap,
      pairs: warnings.pairs,
      seq: seq,
      set: warnings.set,
      timestamp: warnings.timestamp
    };

    function findTagObject(value, tagName, tags2) {
      if (tagName) {
        var match = tags2.filter(function (t) {
          return t.tag === tagName;
        });
        var tagObj = match.find(function (t) {
          return !t.format;
        }) || match[0];
        if (!tagObj) throw new Error("Tag ".concat(tagName, " not found"));
        return tagObj;
      }

      return tags2.find(function (t) {
        return (t.identify && t.identify(value) || t["class"] && value instanceof t["class"]) && !t.format;
      });
    }

    function _createNode(value, tagName, ctx) {
      if (value instanceof resolveSeq.Node) return value;
      var defaultPrefix = ctx.defaultPrefix,
          onTagObj = ctx.onTagObj,
          prevObjects = ctx.prevObjects,
          schema = ctx.schema,
          wrapScalars = ctx.wrapScalars;
      if (tagName && tagName.startsWith("!!")) tagName = defaultPrefix + tagName.slice(2);
      var tagObj = findTagObject(value, tagName, schema.tags);

      if (!tagObj) {
        if (typeof value.toJSON === "function") value = value.toJSON();
        if (!value || _typeof(value) !== "object") return wrapScalars ? new resolveSeq.Scalar(value) : value;
        tagObj = value instanceof Map ? map : value[Symbol.iterator] ? seq : map;
      }

      if (onTagObj) {
        onTagObj(tagObj);
        delete ctx.onTagObj;
      }

      var obj = {
        value: void 0,
        node: void 0
      };

      if (value && _typeof(value) === "object" && prevObjects) {
        var prev = prevObjects.get(value);

        if (prev) {
          var alias = new resolveSeq.Alias(prev);
          ctx.aliasNodes.push(alias);
          return alias;
        }

        obj.value = value;
        prevObjects.set(value, obj);
      }

      obj.node = tagObj.createNode ? tagObj.createNode(ctx.schema, value, ctx) : wrapScalars ? new resolveSeq.Scalar(value) : value;
      if (tagName && obj.node instanceof resolveSeq.Node) obj.node.tag = tagName;
      return obj.node;
    }

    function getSchemaTags(schemas2, knownTags, customTags, schemaId) {
      var tags2 = schemas2[schemaId.replace(/\W/g, "")];

      if (!tags2) {
        var keys = Object.keys(schemas2).map(function (key) {
          return JSON.stringify(key);
        }).join(", ");
        throw new Error("Unknown schema \"".concat(schemaId, "\"; use one of ").concat(keys));
      }

      if (Array.isArray(customTags)) {
        var _iteratorNormalCompletion28 = true;
        var _didIteratorError28 = false;
        var _iteratorError28 = undefined;

        try {
          for (var _iterator28 = customTags[Symbol.iterator](), _step28; !(_iteratorNormalCompletion28 = (_step28 = _iterator28.next()).done); _iteratorNormalCompletion28 = true) {
            var tag = _step28.value;
            tags2 = tags2.concat(tag);
          }
        } catch (err) {
          _didIteratorError28 = true;
          _iteratorError28 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion28 && _iterator28["return"] != null) {
              _iterator28["return"]();
            }
          } finally {
            if (_didIteratorError28) {
              throw _iteratorError28;
            }
          }
        }
      } else if (typeof customTags === "function") {
        tags2 = customTags(tags2.slice());
      }

      for (var i = 0; i < tags2.length; ++i) {
        var _tag = tags2[i];

        if (typeof _tag === "string") {
          var tagObj = knownTags[_tag];

          if (!tagObj) {
            var _keys = Object.keys(knownTags).map(function (key) {
              return JSON.stringify(key);
            }).join(", ");

            throw new Error("Unknown custom tag \"".concat(_tag, "\"; use one of ").concat(_keys));
          }

          tags2[i] = tagObj;
        }
      }

      return tags2;
    }

    var sortMapEntriesByKey = function sortMapEntriesByKey(a, b) {
      return a.key < b.key ? -1 : a.key > b.key ? 1 : 0;
    };

    var Schema =
    /*#__PURE__*/
    function () {
      function Schema(_ref34) {
        var customTags = _ref34.customTags,
            merge = _ref34.merge,
            schema = _ref34.schema,
            sortMapEntries = _ref34.sortMapEntries,
            deprecatedCustomTags = _ref34.tags;

        _classCallCheck(this, Schema);

        this.merge = !!merge;
        this.name = schema;
        this.sortMapEntries = sortMapEntries === true ? sortMapEntriesByKey : sortMapEntries || null;
        if (!customTags && deprecatedCustomTags) warnings.warnOptionDeprecation("tags", "customTags");
        this.tags = getSchemaTags(schemas, tags, customTags || deprecatedCustomTags, schema);
      }

      _createClass(Schema, [{
        key: "createNode",
        value: function createNode(value, wrapScalars, tagName, ctx) {
          var baseCtx = {
            defaultPrefix: Schema.defaultPrefix,
            schema: this,
            wrapScalars: wrapScalars
          };
          var createCtx = ctx ? Object.assign(ctx, baseCtx) : baseCtx;
          return _createNode(value, tagName, createCtx);
        }
      }, {
        key: "createPair",
        value: function createPair(key, value, ctx) {
          if (!ctx) ctx = {
            wrapScalars: true
          };
          var k = this.createNode(key, ctx.wrapScalars, null, ctx);
          var v = this.createNode(value, ctx.wrapScalars, null, ctx);
          return new resolveSeq.Pair(k, v);
        }
      }]);

      return Schema;
    }();

    PlainValue._defineProperty(Schema, "defaultPrefix", PlainValue.defaultTagPrefix);

    PlainValue._defineProperty(Schema, "defaultTags", PlainValue.defaultTags);

    exports2.Schema = Schema;
  }
});

var require_Document_9b4560a1 = __commonJS({
  "node_modules/yaml/dist/Document-9b4560a1.js": function node_modulesYamlDistDocument9b4560a1Js(exports2) {
    "use strict";

    var PlainValue = require_PlainValue_ec8e588e();
    var resolveSeq = require_resolveSeq_d03cb037();
    var Schema = require_Schema_88e323a7();
    var defaultOptions = {
      anchorPrefix: "a",
      customTags: null,
      indent: 2,
      indentSeq: true,
      keepCstNodes: false,
      keepNodeTypes: true,
      keepBlobsInJSON: true,
      mapAsMap: false,
      maxAliasCount: 100,
      prettyErrors: false,
      simpleKeys: false,
      version: "1.2"
    };
    var scalarOptions = {
      get binary() {
        return resolveSeq.binaryOptions;
      },

      set binary(opt) {
        Object.assign(resolveSeq.binaryOptions, opt);
      },

      get bool() {
        return resolveSeq.boolOptions;
      },

      set bool(opt) {
        Object.assign(resolveSeq.boolOptions, opt);
      },

      get int() {
        return resolveSeq.intOptions;
      },

      set int(opt) {
        Object.assign(resolveSeq.intOptions, opt);
      },

      get null() {
        return resolveSeq.nullOptions;
      },

      set null(opt) {
        Object.assign(resolveSeq.nullOptions, opt);
      },

      get str() {
        return resolveSeq.strOptions;
      },

      set str(opt) {
        Object.assign(resolveSeq.strOptions, opt);
      }

    };
    var documentOptions = {
      "1.0": {
        schema: "yaml-1.1",
        merge: true,
        tagPrefixes: [{
          handle: "!",
          prefix: PlainValue.defaultTagPrefix
        }, {
          handle: "!!",
          prefix: "tag:private.yaml.org,2002:"
        }]
      },
      1.1: {
        schema: "yaml-1.1",
        merge: true,
        tagPrefixes: [{
          handle: "!",
          prefix: "!"
        }, {
          handle: "!!",
          prefix: PlainValue.defaultTagPrefix
        }]
      },
      1.2: {
        schema: "core",
        merge: false,
        tagPrefixes: [{
          handle: "!",
          prefix: "!"
        }, {
          handle: "!!",
          prefix: PlainValue.defaultTagPrefix
        }]
      }
    };

    function stringifyTag(doc, tag) {
      if ((doc.version || doc.options.version) === "1.0") {
        var priv = tag.match(/^tag:private\.yaml\.org,2002:([^:/]+)$/);
        if (priv) return "!" + priv[1];
        var vocab = tag.match(/^tag:([a-zA-Z0-9-]+)\.yaml\.org,2002:(.*)/);
        return vocab ? "!".concat(vocab[1], "/").concat(vocab[2]) : "!".concat(tag.replace(/^tag:/, ""));
      }

      var p = doc.tagPrefixes.find(function (p2) {
        return tag.indexOf(p2.prefix) === 0;
      });

      if (!p) {
        var dtp = doc.getDefaults().tagPrefixes;
        p = dtp && dtp.find(function (p2) {
          return tag.indexOf(p2.prefix) === 0;
        });
      }

      if (!p) return tag[0] === "!" ? tag : "!<".concat(tag, ">");
      var suffix = tag.substr(p.prefix.length).replace(/[!,[\]{}]/g, function (ch) {
        return {
          "!": "%21",
          ",": "%2C",
          "[": "%5B",
          "]": "%5D",
          "{": "%7B",
          "}": "%7D"
        }[ch];
      });
      return p.handle + suffix;
    }

    function getTagObject(tags, item) {
      if (item instanceof resolveSeq.Alias) return resolveSeq.Alias;

      if (item.tag) {
        var match = tags.filter(function (t) {
          return t.tag === item.tag;
        });
        if (match.length > 0) return match.find(function (t) {
          return t.format === item.format;
        }) || match[0];
      }

      var tagObj, obj;

      if (item instanceof resolveSeq.Scalar) {
        obj = item.value;

        var _match = tags.filter(function (t) {
          return t.identify && t.identify(obj) || t["class"] && obj instanceof t["class"];
        });

        tagObj = _match.find(function (t) {
          return t.format === item.format;
        }) || _match.find(function (t) {
          return !t.format;
        });
      } else {
        obj = item;
        tagObj = tags.find(function (t) {
          return t.nodeClass && obj instanceof t.nodeClass;
        });
      }

      if (!tagObj) {
        var name = obj && obj.constructor ? obj.constructor.name : _typeof(obj);
        throw new Error("Tag not resolved for ".concat(name, " value"));
      }

      return tagObj;
    }

    function stringifyProps(node, tagObj, _ref35) {
      var anchors = _ref35.anchors,
          doc = _ref35.doc;
      var props = [];
      var anchor = doc.anchors.getName(node);

      if (anchor) {
        anchors[anchor] = node;
        props.push("&".concat(anchor));
      }

      if (node.tag) {
        props.push(stringifyTag(doc, node.tag));
      } else if (!tagObj["default"]) {
        props.push(stringifyTag(doc, tagObj.tag));
      }

      return props.join(" ");
    }

    function stringify(item, ctx, onComment, onChompKeep) {
      var _ctx$doc = ctx.doc,
          anchors = _ctx$doc.anchors,
          schema = _ctx$doc.schema;
      var tagObj;

      if (!(item instanceof resolveSeq.Node)) {
        var createCtx = {
          aliasNodes: [],
          onTagObj: function onTagObj(o) {
            return tagObj = o;
          },
          prevObjects:
          /* @__PURE__ */
          new Map()
        };
        item = schema.createNode(item, true, null, createCtx);
        var _iteratorNormalCompletion29 = true;
        var _didIteratorError29 = false;
        var _iteratorError29 = undefined;

        try {
          for (var _iterator29 = createCtx.aliasNodes[Symbol.iterator](), _step29; !(_iteratorNormalCompletion29 = (_step29 = _iterator29.next()).done); _iteratorNormalCompletion29 = true) {
            var alias = _step29.value;
            alias.source = alias.source.node;
            var name = anchors.getName(alias.source);

            if (!name) {
              name = anchors.newName();
              anchors.map[name] = alias.source;
            }
          }
        } catch (err) {
          _didIteratorError29 = true;
          _iteratorError29 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion29 && _iterator29["return"] != null) {
              _iterator29["return"]();
            }
          } finally {
            if (_didIteratorError29) {
              throw _iteratorError29;
            }
          }
        }
      }

      if (item instanceof resolveSeq.Pair) return item.toString(ctx, onComment, onChompKeep);
      if (!tagObj) tagObj = getTagObject(schema.tags, item);
      var props = stringifyProps(item, tagObj, ctx);
      if (props.length > 0) ctx.indentAtStart = (ctx.indentAtStart || 0) + props.length + 1;
      var str = typeof tagObj.stringify === "function" ? tagObj.stringify(item, ctx, onComment, onChompKeep) : item instanceof resolveSeq.Scalar ? resolveSeq.stringifyString(item, ctx, onComment, onChompKeep) : item.toString(ctx, onComment, onChompKeep);
      if (!props) return str;
      return item instanceof resolveSeq.Scalar || str[0] === "{" || str[0] === "[" ? "".concat(props, " ").concat(str) : "".concat(props, "\n").concat(ctx.indent).concat(str);
    }

    var Anchors =
    /*#__PURE__*/
    function () {
      _createClass(Anchors, null, [{
        key: "validAnchorNode",
        value: function validAnchorNode(node) {
          return node instanceof resolveSeq.Scalar || node instanceof resolveSeq.YAMLSeq || node instanceof resolveSeq.YAMLMap;
        }
      }]);

      function Anchors(prefix) {
        _classCallCheck(this, Anchors);

        PlainValue._defineProperty(this, "map",
        /* @__PURE__ */
        Object.create(null));

        this.prefix = prefix;
      }

      _createClass(Anchors, [{
        key: "createAlias",
        value: function createAlias(node, name) {
          this.setAnchor(node, name);
          return new resolveSeq.Alias(node);
        }
      }, {
        key: "createMergePair",
        value: function createMergePair() {
          var _this18 = this;

          var merge = new resolveSeq.Merge();

          for (var _len = arguments.length, sources = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {
            sources[_key2] = arguments[_key2];
          }

          merge.value.items = sources.map(function (s) {
            if (s instanceof resolveSeq.Alias) {
              if (s.source instanceof resolveSeq.YAMLMap) return s;
            } else if (s instanceof resolveSeq.YAMLMap) {
              return _this18.createAlias(s);
            }

            throw new Error("Merge sources must be Map nodes or their Aliases");
          });
          return merge;
        }
      }, {
        key: "getName",
        value: function getName(node) {
          var map = this.map;
          return Object.keys(map).find(function (a) {
            return map[a] === node;
          });
        }
      }, {
        key: "getNames",
        value: function getNames() {
          return Object.keys(this.map);
        }
      }, {
        key: "getNode",
        value: function getNode(name) {
          return this.map[name];
        }
      }, {
        key: "newName",
        value: function newName(prefix) {
          if (!prefix) prefix = this.prefix;
          var names = Object.keys(this.map);

          for (var i = 1; true; ++i) {
            var name = "".concat(prefix).concat(i);
            if (!names.includes(name)) return name;
          }
        }
      }, {
        key: "resolveNodes",
        value: function resolveNodes() {
          var map = this.map,
              _cstAliases = this._cstAliases;
          Object.keys(map).forEach(function (a) {
            map[a] = map[a].resolved;
          });

          _cstAliases.forEach(function (a) {
            a.source = a.source.resolved;
          });

          delete this._cstAliases;
        }
      }, {
        key: "setAnchor",
        value: function setAnchor(node, name) {
          if (node != null && !Anchors.validAnchorNode(node)) {
            throw new Error("Anchors may only be set for Scalar, Seq and Map nodes");
          }

          if (name && /[\x00-\x19\s,[\]{}]/.test(name)) {
            throw new Error("Anchor names must not contain whitespace or control characters");
          }

          var map = this.map;
          var prev = node && Object.keys(map).find(function (a) {
            return map[a] === node;
          });

          if (prev) {
            if (!name) {
              return prev;
            } else if (prev !== name) {
              delete map[prev];
              map[name] = node;
            }
          } else {
            if (!name) {
              if (!node) return null;
              name = this.newName();
            }

            map[name] = node;
          }

          return name;
        }
      }]);

      return Anchors;
    }();

    var visit = function visit(node, tags) {
      if (node && _typeof(node) === "object") {
        var tag = node.tag;

        if (node instanceof resolveSeq.Collection) {
          if (tag) tags[tag] = true;
          node.items.forEach(function (n) {
            return visit(n, tags);
          });
        } else if (node instanceof resolveSeq.Pair) {
          visit(node.key, tags);
          visit(node.value, tags);
        } else if (node instanceof resolveSeq.Scalar) {
          if (tag) tags[tag] = true;
        }
      }

      return tags;
    };

    var listTagNames = function listTagNames(node) {
      return Object.keys(visit(node, {}));
    };

    function parseContents(doc, contents) {
      var comments = {
        before: [],
        after: []
      };
      var body = void 0;
      var spaceBefore = false;
      var _iteratorNormalCompletion30 = true;
      var _didIteratorError30 = false;
      var _iteratorError30 = undefined;

      try {
        for (var _iterator30 = contents[Symbol.iterator](), _step30; !(_iteratorNormalCompletion30 = (_step30 = _iterator30.next()).done); _iteratorNormalCompletion30 = true) {
          var node = _step30.value;

          if (node.valueRange) {
            if (body !== void 0) {
              var msg = "Document contains trailing content not separated by a ... or --- line";
              doc.errors.push(new PlainValue.YAMLSyntaxError(node, msg));
              break;
            }

            var res = resolveSeq.resolveNode(doc, node);

            if (spaceBefore) {
              res.spaceBefore = true;
              spaceBefore = false;
            }

            body = res;
          } else if (node.comment !== null) {
            var cc = body === void 0 ? comments.before : comments.after;
            cc.push(node.comment);
          } else if (node.type === PlainValue.Type.BLANK_LINE) {
            spaceBefore = true;

            if (body === void 0 && comments.before.length > 0 && !doc.commentBefore) {
              doc.commentBefore = comments.before.join("\n");
              comments.before = [];
            }
          }
        }
      } catch (err) {
        _didIteratorError30 = true;
        _iteratorError30 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion30 && _iterator30["return"] != null) {
            _iterator30["return"]();
          }
        } finally {
          if (_didIteratorError30) {
            throw _iteratorError30;
          }
        }
      }

      doc.contents = body || null;

      if (!body) {
        doc.comment = comments.before.concat(comments.after).join("\n") || null;
      } else {
        var cb = comments.before.join("\n");

        if (cb) {
          var cbNode = body instanceof resolveSeq.Collection && body.items[0] ? body.items[0] : body;
          cbNode.commentBefore = cbNode.commentBefore ? "".concat(cb, "\n").concat(cbNode.commentBefore) : cb;
        }

        doc.comment = comments.after.join("\n") || null;
      }
    }

    function resolveTagDirective(_ref36, directive) {
      var tagPrefixes = _ref36.tagPrefixes;

      var _directive$parameters = _slicedToArray(directive.parameters, 2),
          handle = _directive$parameters[0],
          prefix = _directive$parameters[1];

      if (!handle || !prefix) {
        var msg = "Insufficient parameters given for %TAG directive";
        throw new PlainValue.YAMLSemanticError(directive, msg);
      }

      if (tagPrefixes.some(function (p) {
        return p.handle === handle;
      })) {
        var _msg14 = "The %TAG directive must only be given at most once per handle in the same document.";
        throw new PlainValue.YAMLSemanticError(directive, _msg14);
      }

      return {
        handle: handle,
        prefix: prefix
      };
    }

    function resolveYamlDirective(doc, directive) {
      var _directive$parameters2 = _slicedToArray(directive.parameters, 1),
          version = _directive$parameters2[0];

      if (directive.name === "YAML:1.0") version = "1.0";

      if (!version) {
        var msg = "Insufficient parameters given for %YAML directive";
        throw new PlainValue.YAMLSemanticError(directive, msg);
      }

      if (!documentOptions[version]) {
        var v0 = doc.version || doc.options.version;

        var _msg15 = "Document will be parsed as YAML ".concat(v0, " rather than YAML ").concat(version);

        doc.warnings.push(new PlainValue.YAMLWarning(directive, _msg15));
      }

      return version;
    }

    function parseDirectives(doc, directives, prevDoc) {
      var directiveComments = [];
      var hasDirectives = false;
      var _iteratorNormalCompletion31 = true;
      var _didIteratorError31 = false;
      var _iteratorError31 = undefined;

      try {
        for (var _iterator31 = directives[Symbol.iterator](), _step31; !(_iteratorNormalCompletion31 = (_step31 = _iterator31.next()).done); _iteratorNormalCompletion31 = true) {
          var directive = _step31.value;
          var comment = directive.comment,
              name = directive.name;

          switch (name) {
            case "TAG":
              try {
                doc.tagPrefixes.push(resolveTagDirective(doc, directive));
              } catch (error) {
                doc.errors.push(error);
              }

              hasDirectives = true;
              break;

            case "YAML":
            case "YAML:1.0":
              if (doc.version) {
                var msg = "The %YAML directive must only be given at most once per document.";
                doc.errors.push(new PlainValue.YAMLSemanticError(directive, msg));
              }

              try {
                doc.version = resolveYamlDirective(doc, directive);
              } catch (error) {
                doc.errors.push(error);
              }

              hasDirectives = true;
              break;

            default:
              if (name) {
                var _msg16 = "YAML only supports %TAG and %YAML directives, and not %".concat(name);

                doc.warnings.push(new PlainValue.YAMLWarning(directive, _msg16));
              }

          }

          if (comment) directiveComments.push(comment);
        }
      } catch (err) {
        _didIteratorError31 = true;
        _iteratorError31 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion31 && _iterator31["return"] != null) {
            _iterator31["return"]();
          }
        } finally {
          if (_didIteratorError31) {
            throw _iteratorError31;
          }
        }
      }

      if (prevDoc && !hasDirectives && "1.1" === (doc.version || prevDoc.version || doc.options.version)) {
        var copyTagPrefix = function copyTagPrefix(_ref37) {
          var handle = _ref37.handle,
              prefix = _ref37.prefix;
          return {
            handle: handle,
            prefix: prefix
          };
        };

        doc.tagPrefixes = prevDoc.tagPrefixes.map(copyTagPrefix);
        doc.version = prevDoc.version;
      }

      doc.commentBefore = directiveComments.join("\n") || null;
    }

    function assertCollection(contents) {
      if (contents instanceof resolveSeq.Collection) return true;
      throw new Error("Expected a YAML collection as document contents");
    }

    var Document =
    /*#__PURE__*/
    function () {
      function Document(options) {
        _classCallCheck(this, Document);

        this.anchors = new Anchors(options.anchorPrefix);
        this.commentBefore = null;
        this.comment = null;
        this.contents = null;
        this.directivesEndMarker = null;
        this.errors = [];
        this.options = options;
        this.schema = null;
        this.tagPrefixes = [];
        this.version = null;
        this.warnings = [];
      }

      _createClass(Document, [{
        key: "add",
        value: function add(value) {
          assertCollection(this.contents);
          return this.contents.add(value);
        }
      }, {
        key: "addIn",
        value: function addIn(path, value) {
          assertCollection(this.contents);
          this.contents.addIn(path, value);
        }
      }, {
        key: "delete",
        value: function _delete(key) {
          assertCollection(this.contents);
          return this.contents["delete"](key);
        }
      }, {
        key: "deleteIn",
        value: function deleteIn(path) {
          if (resolveSeq.isEmptyPath(path)) {
            if (this.contents == null) return false;
            this.contents = null;
            return true;
          }

          assertCollection(this.contents);
          return this.contents.deleteIn(path);
        }
      }, {
        key: "getDefaults",
        value: function getDefaults() {
          return Document.defaults[this.version] || Document.defaults[this.options.version] || {};
        }
      }, {
        key: "get",
        value: function get(key, keepScalar) {
          return this.contents instanceof resolveSeq.Collection ? this.contents.get(key, keepScalar) : void 0;
        }
      }, {
        key: "getIn",
        value: function getIn(path, keepScalar) {
          if (resolveSeq.isEmptyPath(path)) return !keepScalar && this.contents instanceof resolveSeq.Scalar ? this.contents.value : this.contents;
          return this.contents instanceof resolveSeq.Collection ? this.contents.getIn(path, keepScalar) : void 0;
        }
      }, {
        key: "has",
        value: function has(key) {
          return this.contents instanceof resolveSeq.Collection ? this.contents.has(key) : false;
        }
      }, {
        key: "hasIn",
        value: function hasIn(path) {
          if (resolveSeq.isEmptyPath(path)) return this.contents !== void 0;
          return this.contents instanceof resolveSeq.Collection ? this.contents.hasIn(path) : false;
        }
      }, {
        key: "set",
        value: function set(key, value) {
          assertCollection(this.contents);
          this.contents.set(key, value);
        }
      }, {
        key: "setIn",
        value: function setIn(path, value) {
          if (resolveSeq.isEmptyPath(path)) this.contents = value;else {
            assertCollection(this.contents);
            this.contents.setIn(path, value);
          }
        }
      }, {
        key: "setSchema",
        value: function setSchema(id, customTags) {
          if (!id && !customTags && this.schema) return;
          if (typeof id === "number") id = id.toFixed(1);

          if (id === "1.0" || id === "1.1" || id === "1.2") {
            if (this.version) this.version = id;else this.options.version = id;
            delete this.options.schema;
          } else if (id && typeof id === "string") {
            this.options.schema = id;
          }

          if (Array.isArray(customTags)) this.options.customTags = customTags;
          var opt = Object.assign({}, this.getDefaults(), this.options);
          this.schema = new Schema.Schema(opt);
        }
      }, {
        key: "parse",
        value: function parse(node, prevDoc) {
          if (this.options.keepCstNodes) this.cstNode = node;
          if (this.options.keepNodeTypes) this.type = "DOCUMENT";
          var _node$directives = node.directives,
              directives = _node$directives === void 0 ? [] : _node$directives,
              _node$contents = node.contents,
              contents = _node$contents === void 0 ? [] : _node$contents,
              directivesEndMarker = node.directivesEndMarker,
              error = node.error,
              valueRange = node.valueRange;

          if (error) {
            if (!error.source) error.source = this;
            this.errors.push(error);
          }

          parseDirectives(this, directives, prevDoc);
          if (directivesEndMarker) this.directivesEndMarker = true;
          this.range = valueRange ? [valueRange.start, valueRange.end] : null;
          this.setSchema();
          this.anchors._cstAliases = [];
          parseContents(this, contents);
          this.anchors.resolveNodes();

          if (this.options.prettyErrors) {
            var _iteratorNormalCompletion32 = true;
            var _didIteratorError32 = false;
            var _iteratorError32 = undefined;

            try {
              for (var _iterator32 = this.errors[Symbol.iterator](), _step32; !(_iteratorNormalCompletion32 = (_step32 = _iterator32.next()).done); _iteratorNormalCompletion32 = true) {
                var error2 = _step32.value;
                if (error2 instanceof PlainValue.YAMLError) error2.makePretty();
              }
            } catch (err) {
              _didIteratorError32 = true;
              _iteratorError32 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion32 && _iterator32["return"] != null) {
                  _iterator32["return"]();
                }
              } finally {
                if (_didIteratorError32) {
                  throw _iteratorError32;
                }
              }
            }

            var _iteratorNormalCompletion33 = true;
            var _didIteratorError33 = false;
            var _iteratorError33 = undefined;

            try {
              for (var _iterator33 = this.warnings[Symbol.iterator](), _step33; !(_iteratorNormalCompletion33 = (_step33 = _iterator33.next()).done); _iteratorNormalCompletion33 = true) {
                var warn = _step33.value;
                if (warn instanceof PlainValue.YAMLError) warn.makePretty();
              }
            } catch (err) {
              _didIteratorError33 = true;
              _iteratorError33 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion33 && _iterator33["return"] != null) {
                  _iterator33["return"]();
                }
              } finally {
                if (_didIteratorError33) {
                  throw _iteratorError33;
                }
              }
            }
          }

          return this;
        }
      }, {
        key: "listNonDefaultTags",
        value: function listNonDefaultTags() {
          return listTagNames(this.contents).filter(function (t) {
            return t.indexOf(Schema.Schema.defaultPrefix) !== 0;
          });
        }
      }, {
        key: "setTagPrefix",
        value: function setTagPrefix(handle, prefix) {
          if (handle[0] !== "!" || handle[handle.length - 1] !== "!") throw new Error("Handle must start and end with !");

          if (prefix) {
            var prev = this.tagPrefixes.find(function (p) {
              return p.handle === handle;
            });
            if (prev) prev.prefix = prefix;else this.tagPrefixes.push({
              handle: handle,
              prefix: prefix
            });
          } else {
            this.tagPrefixes = this.tagPrefixes.filter(function (p) {
              return p.handle !== handle;
            });
          }
        }
      }, {
        key: "toJSON",
        value: function toJSON(arg, onAnchor) {
          var _this19 = this;

          var _this$options = this.options,
              keepBlobsInJSON = _this$options.keepBlobsInJSON,
              mapAsMap = _this$options.mapAsMap,
              maxAliasCount = _this$options.maxAliasCount;
          var keep = keepBlobsInJSON && (typeof arg !== "string" || !(this.contents instanceof resolveSeq.Scalar));
          var ctx = {
            doc: this,
            indentStep: "  ",
            keep: keep,
            mapAsMap: keep && !!mapAsMap,
            maxAliasCount: maxAliasCount,
            stringify: stringify
          };
          var anchorNames = Object.keys(this.anchors.map);
          if (anchorNames.length > 0) ctx.anchors = new Map(anchorNames.map(function (name) {
            return [_this19.anchors.map[name], {
              alias: [],
              aliasCount: 0,
              count: 1
            }];
          }));
          var res = resolveSeq.toJSON(this.contents, arg, ctx);

          if (typeof onAnchor === "function" && ctx.anchors) {
            var _iteratorNormalCompletion34 = true;
            var _didIteratorError34 = false;
            var _iteratorError34 = undefined;

            try {
              for (var _iterator34 = ctx.anchors.values()[Symbol.iterator](), _step34; !(_iteratorNormalCompletion34 = (_step34 = _iterator34.next()).done); _iteratorNormalCompletion34 = true) {
                var _step34$value = _step34.value,
                    count = _step34$value.count,
                    res2 = _step34$value.res;
                onAnchor(res2, count);
              }
            } catch (err) {
              _didIteratorError34 = true;
              _iteratorError34 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion34 && _iterator34["return"] != null) {
                  _iterator34["return"]();
                }
              } finally {
                if (_didIteratorError34) {
                  throw _iteratorError34;
                }
              }
            }
          }

          return res;
        }
      }, {
        key: "toString",
        value: function toString() {
          if (this.errors.length > 0) throw new Error("Document with errors cannot be stringified");
          var indentSize = this.options.indent;

          if (!Number.isInteger(indentSize) || indentSize <= 0) {
            var s = JSON.stringify(indentSize);
            throw new Error("\"indent\" option must be a positive integer, not ".concat(s));
          }

          this.setSchema();
          var lines = [];
          var hasDirectives = false;

          if (this.version) {
            var vd = "%YAML 1.2";

            if (this.schema.name === "yaml-1.1") {
              if (this.version === "1.0") vd = "%YAML:1.0";else if (this.version === "1.1") vd = "%YAML 1.1";
            }

            lines.push(vd);
            hasDirectives = true;
          }

          var tagNames = this.listNonDefaultTags();
          this.tagPrefixes.forEach(function (_ref38) {
            var handle = _ref38.handle,
                prefix = _ref38.prefix;

            if (tagNames.some(function (t) {
              return t.indexOf(prefix) === 0;
            })) {
              lines.push("%TAG ".concat(handle, " ").concat(prefix));
              hasDirectives = true;
            }
          });
          if (hasDirectives || this.directivesEndMarker) lines.push("---");

          if (this.commentBefore) {
            if (hasDirectives || !this.directivesEndMarker) lines.unshift("");
            lines.unshift(this.commentBefore.replace(/^/gm, "#"));
          }

          var ctx = {
            anchors:
            /* @__PURE__ */
            Object.create(null),
            doc: this,
            indent: "",
            indentStep: " ".repeat(indentSize),
            stringify: stringify
          };
          var chompKeep = false;
          var contentComment = null;

          if (this.contents) {
            if (this.contents instanceof resolveSeq.Node) {
              if (this.contents.spaceBefore && (hasDirectives || this.directivesEndMarker)) lines.push("");
              if (this.contents.commentBefore) lines.push(this.contents.commentBefore.replace(/^/gm, "#"));
              ctx.forceBlockIndent = !!this.comment;
              contentComment = this.contents.comment;
            }

            var onChompKeep = contentComment ? null : function () {
              return chompKeep = true;
            };
            var body = stringify(this.contents, ctx, function () {
              return contentComment = null;
            }, onChompKeep);
            lines.push(resolveSeq.addComment(body, "", contentComment));
          } else if (this.contents !== void 0) {
            lines.push(stringify(this.contents, ctx));
          }

          if (this.comment) {
            if ((!chompKeep || contentComment) && lines[lines.length - 1] !== "") lines.push("");
            lines.push(this.comment.replace(/^/gm, "#"));
          }

          return lines.join("\n") + "\n";
        }
      }]);

      return Document;
    }();

    PlainValue._defineProperty(Document, "defaults", documentOptions);

    exports2.Document = Document;
    exports2.defaultOptions = defaultOptions;
    exports2.scalarOptions = scalarOptions;
  }
});

var require_dist = __commonJS({
  "node_modules/yaml/dist/index.js": function node_modulesYamlDistIndexJs(exports2) {
    "use strict";

    var parseCst = require_parse_cst();
    var Document$1 = require_Document_9b4560a1();
    var Schema = require_Schema_88e323a7();
    var PlainValue = require_PlainValue_ec8e588e();
    var warnings = require_warnings_1000a372();
    require_resolveSeq_d03cb037();

    function createNode(value) {
      var wrapScalars = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var tag = arguments.length > 2 ? arguments[2] : undefined;

      if (tag === void 0 && typeof wrapScalars === "string") {
        tag = wrapScalars;
        wrapScalars = true;
      }

      var options = Object.assign({}, Document$1.Document.defaults[Document$1.defaultOptions.version], Document$1.defaultOptions);
      var schema = new Schema.Schema(options);
      return schema.createNode(value, wrapScalars, tag);
    }

    var Document =
    /*#__PURE__*/
    function (_Document$1$Document) {
      _inherits(Document, _Document$1$Document);

      function Document(options) {
        _classCallCheck(this, Document);

        return _possibleConstructorReturn(this, _getPrototypeOf(Document).call(this, Object.assign({}, Document$1.defaultOptions, options)));
      }

      return Document;
    }(Document$1.Document);

    function parseAllDocuments(src, options) {
      var stream = [];
      var prev;
      var _iteratorNormalCompletion35 = true;
      var _didIteratorError35 = false;
      var _iteratorError35 = undefined;

      try {
        for (var _iterator35 = parseCst.parse(src)[Symbol.iterator](), _step35; !(_iteratorNormalCompletion35 = (_step35 = _iterator35.next()).done); _iteratorNormalCompletion35 = true) {
          var cstDoc = _step35.value;
          var doc = new Document(options);
          doc.parse(cstDoc, prev);
          stream.push(doc);
          prev = doc;
        }
      } catch (err) {
        _didIteratorError35 = true;
        _iteratorError35 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion35 && _iterator35["return"] != null) {
            _iterator35["return"]();
          }
        } finally {
          if (_didIteratorError35) {
            throw _iteratorError35;
          }
        }
      }

      return stream;
    }

    function parseDocument(src, options) {
      var cst = parseCst.parse(src);
      var doc = new Document(options).parse(cst[0]);

      if (cst.length > 1) {
        var errMsg = "Source contains multiple documents; please use YAML.parseAllDocuments()";
        doc.errors.unshift(new PlainValue.YAMLSemanticError(cst[1], errMsg));
      }

      return doc;
    }

    function parse(src, options) {
      var doc = parseDocument(src, options);
      doc.warnings.forEach(function (warning) {
        return warnings.warn(warning);
      });
      if (doc.errors.length > 0) throw doc.errors[0];
      return doc.toJSON();
    }

    function stringify(value, options) {
      var doc = new Document(options);
      doc.contents = value;
      return String(doc);
    }

    var YAML = {
      createNode: createNode,
      defaultOptions: Document$1.defaultOptions,
      Document: Document,
      parse: parse,
      parseAllDocuments: parseAllDocuments,
      parseCST: parseCst.parse,
      parseDocument: parseDocument,
      scalarOptions: Document$1.scalarOptions,
      stringify: stringify
    };
    exports2.YAML = YAML;
  }
});

var require_yaml = __commonJS({
  "node_modules/yaml/index.js": function node_modulesYamlIndexJs(exports2, module2) {
    module2.exports = require_dist().YAML;
  }
});

var require_loaders = __commonJS({
  "node_modules/cosmiconfig/dist/loaders.js": function node_modulesCosmiconfigDistLoadersJs(exports2) {
    "use strict";

    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.loaders = void 0;
    var importFresh;

    var loadJs = function loadJs2(filepath) {
      if (importFresh === void 0) {
        importFresh = require_import_fresh();
      }

      var result = importFresh(filepath);
      return result;
    };

    var parseJson;

    var loadJson = function loadJson2(filepath, content) {
      if (parseJson === void 0) {
        parseJson = require_parse_json();
      }

      try {
        var result = parseJson(content);
        return result;
      } catch (error) {
        error.message = "JSON Error in ".concat(filepath, ":\n").concat(error.message);
        throw error;
      }
    };

    var yaml;

    var loadYaml = function loadYaml2(filepath, content) {
      if (yaml === void 0) {
        yaml = require_yaml();
      }

      try {
        var result = yaml.parse(content, {
          prettyErrors: true
        });
        return result;
      } catch (error) {
        error.message = "YAML Error in ".concat(filepath, ":\n").concat(error.message);
        throw error;
      }
    };

    var loaders = {
      loadJs: loadJs,
      loadJson: loadJson,
      loadYaml: loadYaml
    };
    exports2.loaders = loaders;
  }
});

var require_getPropertyByPath = __commonJS({
  "node_modules/cosmiconfig/dist/getPropertyByPath.js": function node_modulesCosmiconfigDistGetPropertyByPathJs(exports2) {
    "use strict";

    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.getPropertyByPath = getPropertyByPath;

    function getPropertyByPath(source, path) {
      if (typeof path === "string" && Object.prototype.hasOwnProperty.call(source, path)) {
        return source[path];
      }

      var parsedPath = typeof path === "string" ? path.split(".") : path;
      return parsedPath.reduce(function (previous, key) {
        if (previous === void 0) {
          return previous;
        }

        return previous[key];
      }, source);
    }
  }
});

var require_ExplorerBase = __commonJS({
  "node_modules/cosmiconfig/dist/ExplorerBase.js": function node_modulesCosmiconfigDistExplorerBaseJs(exports2) {
    "use strict";

    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.getExtensionDescription = getExtensionDescription;
    exports2.ExplorerBase = void 0;

    var _path = _interopRequireDefault(require("path"));

    var _loaders = require_loaders();

    var _getPropertyByPath = require_getPropertyByPath();

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }

    var ExplorerBase =
    /*#__PURE__*/
    function () {
      function ExplorerBase(options) {
        _classCallCheck(this, ExplorerBase);

        if (options.cache === true) {
          this.loadCache =
          /* @__PURE__ */
          new Map();
          this.searchCache =
          /* @__PURE__ */
          new Map();
        }

        this.config = options;
        this.validateConfig();
      }

      _createClass(ExplorerBase, [{
        key: "clearLoadCache",
        value: function clearLoadCache() {
          if (this.loadCache) {
            this.loadCache.clear();
          }
        }
      }, {
        key: "clearSearchCache",
        value: function clearSearchCache() {
          if (this.searchCache) {
            this.searchCache.clear();
          }
        }
      }, {
        key: "clearCaches",
        value: function clearCaches() {
          this.clearLoadCache();
          this.clearSearchCache();
        }
      }, {
        key: "validateConfig",
        value: function validateConfig() {
          var config = this.config;
          config.searchPlaces.forEach(function (place) {
            var loaderKey = _path["default"].extname(place) || "noExt";
            var loader = config.loaders[loaderKey];

            if (!loader) {
              throw new Error("No loader specified for ".concat(getExtensionDescription(place), ", so searchPlaces item \"").concat(place, "\" is invalid"));
            }

            if (typeof loader !== "function") {
              throw new Error("loader for ".concat(getExtensionDescription(place), " is not a function (type provided: \"").concat(_typeof(loader), "\"), so searchPlaces item \"").concat(place, "\" is invalid"));
            }
          });
        }
      }, {
        key: "shouldSearchStopWithResult",
        value: function shouldSearchStopWithResult(result) {
          if (result === null) return false;
          if (result.isEmpty && this.config.ignoreEmptySearchPlaces) return false;
          return true;
        }
      }, {
        key: "nextDirectoryToSearch",
        value: function nextDirectoryToSearch(currentDir, currentResult) {
          if (this.shouldSearchStopWithResult(currentResult)) {
            return null;
          }

          var nextDir = nextDirUp(currentDir);

          if (nextDir === currentDir || currentDir === this.config.stopDir) {
            return null;
          }

          return nextDir;
        }
      }, {
        key: "loadPackageProp",
        value: function loadPackageProp(filepath, content) {
          var parsedContent = _loaders.loaders.loadJson(filepath, content);

          var packagePropValue = (0, _getPropertyByPath.getPropertyByPath)(parsedContent, this.config.packageProp);
          return packagePropValue || null;
        }
      }, {
        key: "getLoaderEntryForFile",
        value: function getLoaderEntryForFile(filepath) {
          if (_path["default"].basename(filepath) === "package.json") {
            var loader2 = this.loadPackageProp.bind(this);
            return loader2;
          }

          var loaderKey = _path["default"].extname(filepath) || "noExt";
          var loader = this.config.loaders[loaderKey];

          if (!loader) {
            throw new Error("No loader specified for ".concat(getExtensionDescription(filepath)));
          }

          return loader;
        }
      }, {
        key: "loadedContentToCosmiconfigResult",
        value: function loadedContentToCosmiconfigResult(filepath, loadedContent) {
          if (loadedContent === null) {
            return null;
          }

          if (loadedContent === void 0) {
            return {
              filepath: filepath,
              config: void 0,
              isEmpty: true
            };
          }

          return {
            config: loadedContent,
            filepath: filepath
          };
        }
      }, {
        key: "validateFilePath",
        value: function validateFilePath(filepath) {
          if (!filepath) {
            throw new Error("load must pass a non-empty string");
          }
        }
      }]);

      return ExplorerBase;
    }();

    exports2.ExplorerBase = ExplorerBase;

    function nextDirUp(dir) {
      return _path["default"].dirname(dir);
    }

    function getExtensionDescription(filepath) {
      var ext = _path["default"].extname(filepath);

      return ext ? "extension \"".concat(ext, "\"") : "files without extensions";
    }
  }
});

var require_readFile = __commonJS({
  "node_modules/cosmiconfig/dist/readFile.js": function node_modulesCosmiconfigDistReadFileJs(exports2) {
    "use strict";

    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.readFile = readFile;
    exports2.readFileSync = readFileSync;

    var _fs = _interopRequireDefault(require("fs"));

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }

    function fsReadFileAsync(pathname, encoding) {
      return regeneratorRuntime.async(function fsReadFileAsync$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", new Promise(function (resolve, reject) {
                _fs["default"].readFile(pathname, encoding, function (error, contents) {
                  if (error) {
                    reject(error);
                    return;
                  }

                  resolve(contents);
                });
              }));

            case 1:
            case "end":
              return _context2.stop();
          }
        }
      });
    }

    function readFile(filepath) {
      var options,
          throwNotFound,
          content,
          _args3 = arguments;
      return regeneratorRuntime.async(function readFile$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              options = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};
              throwNotFound = options.throwNotFound === true;
              _context3.prev = 2;
              _context3.next = 5;
              return regeneratorRuntime.awrap(fsReadFileAsync(filepath, "utf8"));

            case 5:
              content = _context3.sent;
              return _context3.abrupt("return", content);

            case 9:
              _context3.prev = 9;
              _context3.t0 = _context3["catch"](2);

              if (!(throwNotFound === false && (_context3.t0.code === "ENOENT" || _context3.t0.code === "EISDIR"))) {
                _context3.next = 13;
                break;
              }

              return _context3.abrupt("return", null);

            case 13:
              throw _context3.t0;

            case 14:
            case "end":
              return _context3.stop();
          }
        }
      }, null, null, [[2, 9]]);
    }

    function readFileSync(filepath) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var throwNotFound = options.throwNotFound === true;

      try {
        var content = _fs["default"].readFileSync(filepath, "utf8");

        return content;
      } catch (error) {
        if (throwNotFound === false && (error.code === "ENOENT" || error.code === "EISDIR")) {
          return null;
        }

        throw error;
      }
    }
  }
});

var require_cacheWrapper = __commonJS({
  "node_modules/cosmiconfig/dist/cacheWrapper.js": function node_modulesCosmiconfigDistCacheWrapperJs(exports2) {
    "use strict";

    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.cacheWrapper = cacheWrapper;
    exports2.cacheWrapperSync = cacheWrapperSync;

    function cacheWrapper(cache, key, fn) {
      var cached, result;
      return regeneratorRuntime.async(function cacheWrapper$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              cached = cache.get(key);

              if (!(cached !== void 0)) {
                _context4.next = 3;
                break;
              }

              return _context4.abrupt("return", cached);

            case 3:
              _context4.next = 5;
              return regeneratorRuntime.awrap(fn());

            case 5:
              result = _context4.sent;
              cache.set(key, result);
              return _context4.abrupt("return", result);

            case 8:
            case "end":
              return _context4.stop();
          }
        }
      });
    }

    function cacheWrapperSync(cache, key, fn) {
      var cached = cache.get(key);

      if (cached !== void 0) {
        return cached;
      }

      var result = fn();
      cache.set(key, result);
      return result;
    }
  }
});

var require_path_type = __commonJS({
  "node_modules/path-type/index.js": function node_modulesPathTypeIndexJs(exports2) {
    "use strict";

    var _require = require("util"),
        promisify = _require.promisify;

    var fs = require("fs");

    function isType(fsStatType, statsMethodName, filePath) {
      var stats;
      return regeneratorRuntime.async(function isType$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              if (!(typeof filePath !== "string")) {
                _context5.next = 2;
                break;
              }

              throw new TypeError("Expected a string, got ".concat(_typeof(filePath)));

            case 2:
              _context5.prev = 2;
              _context5.next = 5;
              return regeneratorRuntime.awrap(promisify(fs[fsStatType])(filePath));

            case 5:
              stats = _context5.sent;
              return _context5.abrupt("return", stats[statsMethodName]());

            case 9:
              _context5.prev = 9;
              _context5.t0 = _context5["catch"](2);

              if (!(_context5.t0.code === "ENOENT")) {
                _context5.next = 13;
                break;
              }

              return _context5.abrupt("return", false);

            case 13:
              throw _context5.t0;

            case 14:
            case "end":
              return _context5.stop();
          }
        }
      }, null, null, [[2, 9]]);
    }

    function isTypeSync(fsStatType, statsMethodName, filePath) {
      if (typeof filePath !== "string") {
        throw new TypeError("Expected a string, got ".concat(_typeof(filePath)));
      }

      try {
        return fs[fsStatType](filePath)[statsMethodName]();
      } catch (error) {
        if (error.code === "ENOENT") {
          return false;
        }

        throw error;
      }
    }

    exports2.isFile = isType.bind(null, "stat", "isFile");
    exports2.isDirectory = isType.bind(null, "stat", "isDirectory");
    exports2.isSymlink = isType.bind(null, "lstat", "isSymbolicLink");
    exports2.isFileSync = isTypeSync.bind(null, "statSync", "isFile");
    exports2.isDirectorySync = isTypeSync.bind(null, "statSync", "isDirectory");
    exports2.isSymlinkSync = isTypeSync.bind(null, "lstatSync", "isSymbolicLink");
  }
});

var require_getDirectory = __commonJS({
  "node_modules/cosmiconfig/dist/getDirectory.js": function node_modulesCosmiconfigDistGetDirectoryJs(exports2) {
    "use strict";

    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.getDirectory = getDirectory;
    exports2.getDirectorySync = getDirectorySync;

    var _path = _interopRequireDefault(require("path"));

    var _pathType = require_path_type();

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }

    function getDirectory(filepath) {
      var filePathIsDirectory, directory;
      return regeneratorRuntime.async(function getDirectory$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return regeneratorRuntime.awrap((0, _pathType.isDirectory)(filepath));

            case 2:
              filePathIsDirectory = _context6.sent;

              if (!(filePathIsDirectory === true)) {
                _context6.next = 5;
                break;
              }

              return _context6.abrupt("return", filepath);

            case 5:
              directory = _path["default"].dirname(filepath);
              return _context6.abrupt("return", directory);

            case 7:
            case "end":
              return _context6.stop();
          }
        }
      });
    }

    function getDirectorySync(filepath) {
      var filePathIsDirectory = (0, _pathType.isDirectorySync)(filepath);

      if (filePathIsDirectory === true) {
        return filepath;
      }

      var directory = _path["default"].dirname(filepath);

      return directory;
    }
  }
});

var require_Explorer = __commonJS({
  "node_modules/cosmiconfig/dist/Explorer.js": function node_modulesCosmiconfigDistExplorerJs(exports2) {
    "use strict";

    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.Explorer = void 0;

    var _path = _interopRequireDefault(require("path"));

    var _ExplorerBase = require_ExplorerBase();

    var _readFile = require_readFile();

    var _cacheWrapper = require_cacheWrapper();

    var _getDirectory = require_getDirectory();

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }

    var Explorer =
    /*#__PURE__*/
    function (_ExplorerBase$Explore) {
      _inherits(Explorer, _ExplorerBase$Explore);

      function Explorer(options) {
        _classCallCheck(this, Explorer);

        return _possibleConstructorReturn(this, _getPrototypeOf(Explorer).call(this, options));
      }

      _createClass(Explorer, [{
        key: "search",
        value: function search() {
          var searchFrom,
              startDirectory,
              result,
              _args7 = arguments;
          return regeneratorRuntime.async(function search$(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  searchFrom = _args7.length > 0 && _args7[0] !== undefined ? _args7[0] : process.cwd();
                  _context7.next = 3;
                  return regeneratorRuntime.awrap((0, _getDirectory.getDirectory)(searchFrom));

                case 3:
                  startDirectory = _context7.sent;
                  _context7.next = 6;
                  return regeneratorRuntime.awrap(this.searchFromDirectory(startDirectory));

                case 6:
                  result = _context7.sent;
                  return _context7.abrupt("return", result);

                case 8:
                case "end":
                  return _context7.stop();
              }
            }
          }, null, this);
        }
      }, {
        key: "searchFromDirectory",
        value: function searchFromDirectory(dir) {
          var _this20 = this;

          var absoluteDir, run;
          return regeneratorRuntime.async(function searchFromDirectory$(_context9) {
            while (1) {
              switch (_context9.prev = _context9.next) {
                case 0:
                  absoluteDir = _path["default"].resolve(process.cwd(), dir);

                  run = function run() {
                    var result, nextDir, transformResult;
                    return regeneratorRuntime.async(function run$(_context8) {
                      while (1) {
                        switch (_context8.prev = _context8.next) {
                          case 0:
                            _context8.next = 2;
                            return regeneratorRuntime.awrap(_this20.searchDirectory(absoluteDir));

                          case 2:
                            result = _context8.sent;
                            nextDir = _this20.nextDirectoryToSearch(absoluteDir, result);

                            if (!nextDir) {
                              _context8.next = 6;
                              break;
                            }

                            return _context8.abrupt("return", _this20.searchFromDirectory(nextDir));

                          case 6:
                            _context8.next = 8;
                            return regeneratorRuntime.awrap(_this20.config.transform(result));

                          case 8:
                            transformResult = _context8.sent;
                            return _context8.abrupt("return", transformResult);

                          case 10:
                          case "end":
                            return _context8.stop();
                        }
                      }
                    });
                  };

                  if (!this.searchCache) {
                    _context9.next = 4;
                    break;
                  }

                  return _context9.abrupt("return", (0, _cacheWrapper.cacheWrapper)(this.searchCache, absoluteDir, run));

                case 4:
                  return _context9.abrupt("return", run());

                case 5:
                case "end":
                  return _context9.stop();
              }
            }
          }, null, this);
        }
      }, {
        key: "searchDirectory",
        value: function searchDirectory(dir) {
          var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, place, placeResult;

          return regeneratorRuntime.async(function searchDirectory$(_context10) {
            while (1) {
              switch (_context10.prev = _context10.next) {
                case 0:
                  _iteratorNormalCompletion = true;
                  _didIteratorError = false;
                  _context10.prev = 2;
                  _iterator = _asyncIterator(this.config.searchPlaces);

                case 4:
                  _context10.next = 6;
                  return regeneratorRuntime.awrap(_iterator.next());

                case 6:
                  _step = _context10.sent;
                  _iteratorNormalCompletion = _step.done;
                  _context10.next = 10;
                  return regeneratorRuntime.awrap(_step.value);

                case 10:
                  _value = _context10.sent;

                  if (_iteratorNormalCompletion) {
                    _context10.next = 21;
                    break;
                  }

                  place = _value;
                  _context10.next = 15;
                  return regeneratorRuntime.awrap(this.loadSearchPlace(dir, place));

                case 15:
                  placeResult = _context10.sent;

                  if (!(this.shouldSearchStopWithResult(placeResult) === true)) {
                    _context10.next = 18;
                    break;
                  }

                  return _context10.abrupt("return", placeResult);

                case 18:
                  _iteratorNormalCompletion = true;
                  _context10.next = 4;
                  break;

                case 21:
                  _context10.next = 27;
                  break;

                case 23:
                  _context10.prev = 23;
                  _context10.t0 = _context10["catch"](2);
                  _didIteratorError = true;
                  _iteratorError = _context10.t0;

                case 27:
                  _context10.prev = 27;
                  _context10.prev = 28;

                  if (!(!_iteratorNormalCompletion && _iterator["return"] != null)) {
                    _context10.next = 32;
                    break;
                  }

                  _context10.next = 32;
                  return regeneratorRuntime.awrap(_iterator["return"]());

                case 32:
                  _context10.prev = 32;

                  if (!_didIteratorError) {
                    _context10.next = 35;
                    break;
                  }

                  throw _iteratorError;

                case 35:
                  return _context10.finish(32);

                case 36:
                  return _context10.finish(27);

                case 37:
                  return _context10.abrupt("return", null);

                case 38:
                case "end":
                  return _context10.stop();
              }
            }
          }, null, this, [[2, 23, 27, 37], [28,, 32, 36]]);
        }
      }, {
        key: "loadSearchPlace",
        value: function loadSearchPlace(dir, place) {
          var filepath, fileContents, result;
          return regeneratorRuntime.async(function loadSearchPlace$(_context11) {
            while (1) {
              switch (_context11.prev = _context11.next) {
                case 0:
                  filepath = _path["default"].join(dir, place);
                  _context11.next = 3;
                  return regeneratorRuntime.awrap((0, _readFile.readFile)(filepath));

                case 3:
                  fileContents = _context11.sent;
                  _context11.next = 6;
                  return regeneratorRuntime.awrap(this.createCosmiconfigResult(filepath, fileContents));

                case 6:
                  result = _context11.sent;
                  return _context11.abrupt("return", result);

                case 8:
                case "end":
                  return _context11.stop();
              }
            }
          }, null, this);
        }
      }, {
        key: "loadFileContent",
        value: function loadFileContent(filepath, content) {
          var loader, loaderResult;
          return regeneratorRuntime.async(function loadFileContent$(_context12) {
            while (1) {
              switch (_context12.prev = _context12.next) {
                case 0:
                  if (!(content === null)) {
                    _context12.next = 2;
                    break;
                  }

                  return _context12.abrupt("return", null);

                case 2:
                  if (!(content.trim() === "")) {
                    _context12.next = 4;
                    break;
                  }

                  return _context12.abrupt("return", void 0);

                case 4:
                  loader = this.getLoaderEntryForFile(filepath);
                  _context12.next = 7;
                  return regeneratorRuntime.awrap(loader(filepath, content));

                case 7:
                  loaderResult = _context12.sent;
                  return _context12.abrupt("return", loaderResult);

                case 9:
                case "end":
                  return _context12.stop();
              }
            }
          }, null, this);
        }
      }, {
        key: "createCosmiconfigResult",
        value: function createCosmiconfigResult(filepath, content) {
          var fileContent, result;
          return regeneratorRuntime.async(function createCosmiconfigResult$(_context13) {
            while (1) {
              switch (_context13.prev = _context13.next) {
                case 0:
                  _context13.next = 2;
                  return regeneratorRuntime.awrap(this.loadFileContent(filepath, content));

                case 2:
                  fileContent = _context13.sent;
                  result = this.loadedContentToCosmiconfigResult(filepath, fileContent);
                  return _context13.abrupt("return", result);

                case 5:
                case "end":
                  return _context13.stop();
              }
            }
          }, null, this);
        }
      }, {
        key: "load",
        value: function load(filepath) {
          var _this21 = this;

          var absoluteFilePath, runLoad;
          return regeneratorRuntime.async(function load$(_context15) {
            while (1) {
              switch (_context15.prev = _context15.next) {
                case 0:
                  this.validateFilePath(filepath);
                  absoluteFilePath = _path["default"].resolve(process.cwd(), filepath);

                  runLoad = function runLoad() {
                    var fileContents, result, transformResult;
                    return regeneratorRuntime.async(function runLoad$(_context14) {
                      while (1) {
                        switch (_context14.prev = _context14.next) {
                          case 0:
                            _context14.next = 2;
                            return regeneratorRuntime.awrap((0, _readFile.readFile)(absoluteFilePath, {
                              throwNotFound: true
                            }));

                          case 2:
                            fileContents = _context14.sent;
                            _context14.next = 5;
                            return regeneratorRuntime.awrap(_this21.createCosmiconfigResult(absoluteFilePath, fileContents));

                          case 5:
                            result = _context14.sent;
                            _context14.next = 8;
                            return regeneratorRuntime.awrap(_this21.config.transform(result));

                          case 8:
                            transformResult = _context14.sent;
                            return _context14.abrupt("return", transformResult);

                          case 10:
                          case "end":
                            return _context14.stop();
                        }
                      }
                    });
                  };

                  if (!this.loadCache) {
                    _context15.next = 5;
                    break;
                  }

                  return _context15.abrupt("return", (0, _cacheWrapper.cacheWrapper)(this.loadCache, absoluteFilePath, runLoad));

                case 5:
                  return _context15.abrupt("return", runLoad());

                case 6:
                case "end":
                  return _context15.stop();
              }
            }
          }, null, this);
        }
      }]);

      return Explorer;
    }(_ExplorerBase.ExplorerBase);

    exports2.Explorer = Explorer;
  }
});

var require_ExplorerSync = __commonJS({
  "node_modules/cosmiconfig/dist/ExplorerSync.js": function node_modulesCosmiconfigDistExplorerSyncJs(exports2) {
    "use strict";

    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.ExplorerSync = void 0;

    var _path = _interopRequireDefault(require("path"));

    var _ExplorerBase = require_ExplorerBase();

    var _readFile = require_readFile();

    var _cacheWrapper = require_cacheWrapper();

    var _getDirectory = require_getDirectory();

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }

    var ExplorerSync =
    /*#__PURE__*/
    function (_ExplorerBase$Explore2) {
      _inherits(ExplorerSync, _ExplorerBase$Explore2);

      function ExplorerSync(options) {
        _classCallCheck(this, ExplorerSync);

        return _possibleConstructorReturn(this, _getPrototypeOf(ExplorerSync).call(this, options));
      }

      _createClass(ExplorerSync, [{
        key: "searchSync",
        value: function searchSync() {
          var searchFrom = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : process.cwd();
          var startDirectory = (0, _getDirectory.getDirectorySync)(searchFrom);
          var result = this.searchFromDirectorySync(startDirectory);
          return result;
        }
      }, {
        key: "searchFromDirectorySync",
        value: function searchFromDirectorySync(dir) {
          var _this22 = this;

          var absoluteDir = _path["default"].resolve(process.cwd(), dir);

          var run = function run() {
            var result = _this22.searchDirectorySync(absoluteDir);

            var nextDir = _this22.nextDirectoryToSearch(absoluteDir, result);

            if (nextDir) {
              return _this22.searchFromDirectorySync(nextDir);
            }

            var transformResult = _this22.config.transform(result);

            return transformResult;
          };

          if (this.searchCache) {
            return (0, _cacheWrapper.cacheWrapperSync)(this.searchCache, absoluteDir, run);
          }

          return run();
        }
      }, {
        key: "searchDirectorySync",
        value: function searchDirectorySync(dir) {
          var _iteratorNormalCompletion36 = true;
          var _didIteratorError36 = false;
          var _iteratorError36 = undefined;

          try {
            for (var _iterator36 = this.config.searchPlaces[Symbol.iterator](), _step36; !(_iteratorNormalCompletion36 = (_step36 = _iterator36.next()).done); _iteratorNormalCompletion36 = true) {
              var place = _step36.value;
              var placeResult = this.loadSearchPlaceSync(dir, place);

              if (this.shouldSearchStopWithResult(placeResult) === true) {
                return placeResult;
              }
            }
          } catch (err) {
            _didIteratorError36 = true;
            _iteratorError36 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion36 && _iterator36["return"] != null) {
                _iterator36["return"]();
              }
            } finally {
              if (_didIteratorError36) {
                throw _iteratorError36;
              }
            }
          }

          return null;
        }
      }, {
        key: "loadSearchPlaceSync",
        value: function loadSearchPlaceSync(dir, place) {
          var filepath = _path["default"].join(dir, place);

          var content = (0, _readFile.readFileSync)(filepath);
          var result = this.createCosmiconfigResultSync(filepath, content);
          return result;
        }
      }, {
        key: "loadFileContentSync",
        value: function loadFileContentSync(filepath, content) {
          if (content === null) {
            return null;
          }

          if (content.trim() === "") {
            return void 0;
          }

          var loader = this.getLoaderEntryForFile(filepath);
          var loaderResult = loader(filepath, content);
          return loaderResult;
        }
      }, {
        key: "createCosmiconfigResultSync",
        value: function createCosmiconfigResultSync(filepath, content) {
          var fileContent = this.loadFileContentSync(filepath, content);
          var result = this.loadedContentToCosmiconfigResult(filepath, fileContent);
          return result;
        }
      }, {
        key: "loadSync",
        value: function loadSync(filepath) {
          var _this23 = this;

          this.validateFilePath(filepath);

          var absoluteFilePath = _path["default"].resolve(process.cwd(), filepath);

          var runLoadSync = function runLoadSync() {
            var content = (0, _readFile.readFileSync)(absoluteFilePath, {
              throwNotFound: true
            });

            var cosmiconfigResult = _this23.createCosmiconfigResultSync(absoluteFilePath, content);

            var transformResult = _this23.config.transform(cosmiconfigResult);

            return transformResult;
          };

          if (this.loadCache) {
            return (0, _cacheWrapper.cacheWrapperSync)(this.loadCache, absoluteFilePath, runLoadSync);
          }

          return runLoadSync();
        }
      }]);

      return ExplorerSync;
    }(_ExplorerBase.ExplorerBase);

    exports2.ExplorerSync = ExplorerSync;
  }
});

var require_types = __commonJS({
  "node_modules/cosmiconfig/dist/types.js": function node_modulesCosmiconfigDistTypesJs(exports2) {
    "use strict";

    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
  }
});

var require_dist2 = __commonJS({
  "node_modules/cosmiconfig/dist/index.js": function node_modulesCosmiconfigDistIndexJs(exports2) {
    "use strict";

    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.cosmiconfig = cosmiconfig;
    exports2.cosmiconfigSync = cosmiconfigSync;
    exports2.defaultLoaders = void 0;

    var _os = _interopRequireDefault(require("os"));

    var _Explorer = require_Explorer();

    var _ExplorerSync = require_ExplorerSync();

    var _loaders = require_loaders();

    var _types = require_types();

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }

    function cosmiconfig(moduleName) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var normalizedOptions = normalizeOptions(moduleName, options);
      var explorer = new _Explorer.Explorer(normalizedOptions);
      return {
        search: explorer.search.bind(explorer),
        load: explorer.load.bind(explorer),
        clearLoadCache: explorer.clearLoadCache.bind(explorer),
        clearSearchCache: explorer.clearSearchCache.bind(explorer),
        clearCaches: explorer.clearCaches.bind(explorer)
      };
    }

    function cosmiconfigSync(moduleName) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var normalizedOptions = normalizeOptions(moduleName, options);
      var explorerSync = new _ExplorerSync.ExplorerSync(normalizedOptions);
      return {
        search: explorerSync.searchSync.bind(explorerSync),
        load: explorerSync.loadSync.bind(explorerSync),
        clearLoadCache: explorerSync.clearLoadCache.bind(explorerSync),
        clearSearchCache: explorerSync.clearSearchCache.bind(explorerSync),
        clearCaches: explorerSync.clearCaches.bind(explorerSync)
      };
    }

    var defaultLoaders = Object.freeze({
      ".cjs": _loaders.loaders.loadJs,
      ".js": _loaders.loaders.loadJs,
      ".json": _loaders.loaders.loadJson,
      ".yaml": _loaders.loaders.loadYaml,
      ".yml": _loaders.loaders.loadYaml,
      noExt: _loaders.loaders.loadYaml
    });
    exports2.defaultLoaders = defaultLoaders;

    var identity = function identity2(x) {
      return x;
    };

    function normalizeOptions(moduleName, options) {
      var defaults = {
        packageProp: moduleName,
        searchPlaces: ["package.json", ".".concat(moduleName, "rc"), ".".concat(moduleName, "rc.json"), ".".concat(moduleName, "rc.yaml"), ".".concat(moduleName, "rc.yml"), ".".concat(moduleName, "rc.js"), ".".concat(moduleName, "rc.cjs"), "".concat(moduleName, ".config.js"), "".concat(moduleName, ".config.cjs")],
        ignoreEmptySearchPlaces: true,
        stopDir: _os["default"].homedir(),
        cache: true,
        transform: identity,
        loaders: defaultLoaders
      };
      var normalizedOptions = Object.assign(Object.assign(Object.assign({}, defaults), options), {}, {
        loaders: Object.assign(Object.assign({}, defaults.loaders), options.loaders)
      });
      return normalizedOptions;
    }
  }
});

var require_find_parent_dir = __commonJS({
  "node_modules/find-parent-dir/index.js": function node_modulesFindParentDirIndexJs(exports2, module2) {
    "use strict";

    var path = require("path");

    var fs = require("fs");

    var exists = fs.exists || path.exists;
    var existsSync = fs.existsSync || path.existsSync;

    function splitPath(path2) {
      var parts = path2.split(/(\/|\\)/);
      if (!parts.length) return parts;
      return !parts[0].length ? parts.slice(1) : parts;
    }

    exports2 = module2.exports = function (currentFullPath, clue, cb) {
      function testDir(parts) {
        if (parts.length === 0) return cb(null, null);
        var p = parts.join("");
        exists(path.join(p, clue), function (itdoes) {
          if (itdoes) return cb(null, p);
          testDir(parts.slice(0, -1));
        });
      }

      testDir(splitPath(currentFullPath));
    };

    exports2.sync = function (currentFullPath, clue) {
      function testDir(parts) {
        if (parts.length === 0) return null;
        var p = parts.join("");
        var itdoes = existsSync(path.join(p, clue));
        return itdoes ? p : testDir(parts.slice(0, -1));
      }

      return testDir(splitPath(currentFullPath));
    };
  }
});

var require_get_stdin = __commonJS({
  "node_modules/get-stdin/index.js": function node_modulesGetStdinIndexJs(exports2, module2) {
    "use strict";

    var _process = process,
        stdin = _process.stdin;

    module2.exports = function _callee() {
      var result, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _value2, chunk;

      return regeneratorRuntime.async(function _callee$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              result = "";

              if (!stdin.isTTY) {
                _context16.next = 3;
                break;
              }

              return _context16.abrupt("return", result);

            case 3:
              stdin.setEncoding("utf8");
              _iteratorNormalCompletion2 = true;
              _didIteratorError2 = false;
              _context16.prev = 6;
              _iterator2 = _asyncIterator(stdin);

            case 8:
              _context16.next = 10;
              return regeneratorRuntime.awrap(_iterator2.next());

            case 10:
              _step2 = _context16.sent;
              _iteratorNormalCompletion2 = _step2.done;
              _context16.next = 14;
              return regeneratorRuntime.awrap(_step2.value);

            case 14:
              _value2 = _context16.sent;

              if (_iteratorNormalCompletion2) {
                _context16.next = 21;
                break;
              }

              chunk = _value2;
              result += chunk;

            case 18:
              _iteratorNormalCompletion2 = true;
              _context16.next = 8;
              break;

            case 21:
              _context16.next = 27;
              break;

            case 23:
              _context16.prev = 23;
              _context16.t0 = _context16["catch"](6);
              _didIteratorError2 = true;
              _iteratorError2 = _context16.t0;

            case 27:
              _context16.prev = 27;
              _context16.prev = 28;

              if (!(!_iteratorNormalCompletion2 && _iterator2["return"] != null)) {
                _context16.next = 32;
                break;
              }

              _context16.next = 32;
              return regeneratorRuntime.awrap(_iterator2["return"]());

            case 32:
              _context16.prev = 32;

              if (!_didIteratorError2) {
                _context16.next = 35;
                break;
              }

              throw _iteratorError2;

            case 35:
              return _context16.finish(32);

            case 36:
              return _context16.finish(27);

            case 37:
              return _context16.abrupt("return", result);

            case 38:
            case "end":
              return _context16.stop();
          }
        }
      }, null, null, [[6, 23, 27, 37], [28,, 32, 36]]);
    };

    module2.exports.buffer = function _callee2() {
      var result, length, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, _value3, chunk;

      return regeneratorRuntime.async(function _callee2$(_context17) {
        while (1) {
          switch (_context17.prev = _context17.next) {
            case 0:
              result = [];
              length = 0;

              if (!stdin.isTTY) {
                _context17.next = 4;
                break;
              }

              return _context17.abrupt("return", Buffer.concat([]));

            case 4:
              _iteratorNormalCompletion3 = true;
              _didIteratorError3 = false;
              _context17.prev = 6;
              _iterator3 = _asyncIterator(stdin);

            case 8:
              _context17.next = 10;
              return regeneratorRuntime.awrap(_iterator3.next());

            case 10:
              _step3 = _context17.sent;
              _iteratorNormalCompletion3 = _step3.done;
              _context17.next = 14;
              return regeneratorRuntime.awrap(_step3.value);

            case 14:
              _value3 = _context17.sent;

              if (_iteratorNormalCompletion3) {
                _context17.next = 22;
                break;
              }

              chunk = _value3;
              result.push(chunk);
              length += chunk.length;

            case 19:
              _iteratorNormalCompletion3 = true;
              _context17.next = 8;
              break;

            case 22:
              _context17.next = 28;
              break;

            case 24:
              _context17.prev = 24;
              _context17.t0 = _context17["catch"](6);
              _didIteratorError3 = true;
              _iteratorError3 = _context17.t0;

            case 28:
              _context17.prev = 28;
              _context17.prev = 29;

              if (!(!_iteratorNormalCompletion3 && _iterator3["return"] != null)) {
                _context17.next = 33;
                break;
              }

              _context17.next = 33;
              return regeneratorRuntime.awrap(_iterator3["return"]());

            case 33:
              _context17.prev = 33;

              if (!_didIteratorError3) {
                _context17.next = 36;
                break;
              }

              throw _iteratorError3;

            case 36:
              return _context17.finish(33);

            case 37:
              return _context17.finish(28);

            case 38:
              return _context17.abrupt("return", Buffer.concat(result, length));

            case 39:
            case "end":
              return _context17.stop();
          }
        }
      }, null, null, [[6, 24, 28, 38], [29,, 33, 37]]);
    };
  }
});

var require_vendors = __commonJS({
  "node_modules/ci-info/vendors.json": function node_modulesCiInfoVendorsJson(exports2, module2) {
    module2.exports = [{
      name: "AppVeyor",
      constant: "APPVEYOR",
      env: "APPVEYOR",
      pr: "APPVEYOR_PULL_REQUEST_NUMBER"
    }, {
      name: "Azure Pipelines",
      constant: "AZURE_PIPELINES",
      env: "SYSTEM_TEAMFOUNDATIONCOLLECTIONURI",
      pr: "SYSTEM_PULLREQUEST_PULLREQUESTID"
    }, {
      name: "Appcircle",
      constant: "APPCIRCLE",
      env: "AC_APPCIRCLE"
    }, {
      name: "Bamboo",
      constant: "BAMBOO",
      env: "bamboo_planKey"
    }, {
      name: "Bitbucket Pipelines",
      constant: "BITBUCKET",
      env: "BITBUCKET_COMMIT",
      pr: "BITBUCKET_PR_ID"
    }, {
      name: "Bitrise",
      constant: "BITRISE",
      env: "BITRISE_IO",
      pr: "BITRISE_PULL_REQUEST"
    }, {
      name: "Buddy",
      constant: "BUDDY",
      env: "BUDDY_WORKSPACE_ID",
      pr: "BUDDY_EXECUTION_PULL_REQUEST_ID"
    }, {
      name: "Buildkite",
      constant: "BUILDKITE",
      env: "BUILDKITE",
      pr: {
        env: "BUILDKITE_PULL_REQUEST",
        ne: "false"
      }
    }, {
      name: "CircleCI",
      constant: "CIRCLE",
      env: "CIRCLECI",
      pr: "CIRCLE_PULL_REQUEST"
    }, {
      name: "Cirrus CI",
      constant: "CIRRUS",
      env: "CIRRUS_CI",
      pr: "CIRRUS_PR"
    }, {
      name: "AWS CodeBuild",
      constant: "CODEBUILD",
      env: "CODEBUILD_BUILD_ARN"
    }, {
      name: "Codefresh",
      constant: "CODEFRESH",
      env: "CF_BUILD_ID",
      pr: {
        any: ["CF_PULL_REQUEST_NUMBER", "CF_PULL_REQUEST_ID"]
      }
    }, {
      name: "Codeship",
      constant: "CODESHIP",
      env: {
        CI_NAME: "codeship"
      }
    }, {
      name: "Drone",
      constant: "DRONE",
      env: "DRONE",
      pr: {
        DRONE_BUILD_EVENT: "pull_request"
      }
    }, {
      name: "dsari",
      constant: "DSARI",
      env: "DSARI"
    }, {
      name: "Expo Application Services",
      constant: "EAS",
      env: "EAS_BUILD"
    }, {
      name: "GitHub Actions",
      constant: "GITHUB_ACTIONS",
      env: "GITHUB_ACTIONS",
      pr: {
        GITHUB_EVENT_NAME: "pull_request"
      }
    }, {
      name: "GitLab CI",
      constant: "GITLAB",
      env: "GITLAB_CI",
      pr: "CI_MERGE_REQUEST_ID"
    }, {
      name: "GoCD",
      constant: "GOCD",
      env: "GO_PIPELINE_LABEL"
    }, {
      name: "LayerCI",
      constant: "LAYERCI",
      env: "LAYERCI",
      pr: "LAYERCI_PULL_REQUEST"
    }, {
      name: "Hudson",
      constant: "HUDSON",
      env: "HUDSON_URL"
    }, {
      name: "Jenkins",
      constant: "JENKINS",
      env: ["JENKINS_URL", "BUILD_ID"],
      pr: {
        any: ["ghprbPullId", "CHANGE_ID"]
      }
    }, {
      name: "Magnum CI",
      constant: "MAGNUM",
      env: "MAGNUM"
    }, {
      name: "Netlify CI",
      constant: "NETLIFY",
      env: "NETLIFY",
      pr: {
        env: "PULL_REQUEST",
        ne: "false"
      }
    }, {
      name: "Nevercode",
      constant: "NEVERCODE",
      env: "NEVERCODE",
      pr: {
        env: "NEVERCODE_PULL_REQUEST",
        ne: "false"
      }
    }, {
      name: "Render",
      constant: "RENDER",
      env: "RENDER",
      pr: {
        IS_PULL_REQUEST: "true"
      }
    }, {
      name: "Sail CI",
      constant: "SAIL",
      env: "SAILCI",
      pr: "SAIL_PULL_REQUEST_NUMBER"
    }, {
      name: "Semaphore",
      constant: "SEMAPHORE",
      env: "SEMAPHORE",
      pr: "PULL_REQUEST_NUMBER"
    }, {
      name: "Screwdriver",
      constant: "SCREWDRIVER",
      env: "SCREWDRIVER",
      pr: {
        env: "SD_PULL_REQUEST",
        ne: "false"
      }
    }, {
      name: "Shippable",
      constant: "SHIPPABLE",
      env: "SHIPPABLE",
      pr: {
        IS_PULL_REQUEST: "true"
      }
    }, {
      name: "Solano CI",
      constant: "SOLANO",
      env: "TDDIUM",
      pr: "TDDIUM_PR_ID"
    }, {
      name: "Strider CD",
      constant: "STRIDER",
      env: "STRIDER"
    }, {
      name: "TaskCluster",
      constant: "TASKCLUSTER",
      env: ["TASK_ID", "RUN_ID"]
    }, {
      name: "TeamCity",
      constant: "TEAMCITY",
      env: "TEAMCITY_VERSION"
    }, {
      name: "Travis CI",
      constant: "TRAVIS",
      env: "TRAVIS",
      pr: {
        env: "TRAVIS_PULL_REQUEST",
        ne: "false"
      }
    }, {
      name: "Vercel",
      constant: "VERCEL",
      env: "NOW_BUILDER"
    }, {
      name: "Visual Studio App Center",
      constant: "APPCENTER",
      env: "APPCENTER_BUILD_ID"
    }];
  }
});

var require_ci_info = __commonJS({
  "node_modules/ci-info/index.js": function node_modulesCiInfoIndexJs(exports2) {
    "use strict";

    var vendors = require_vendors();
    var env = process.env;
    Object.defineProperty(exports2, "_vendors", {
      value: vendors.map(function (v) {
        return v.constant;
      })
    });
    exports2.name = null;
    exports2.isPR = null;
    vendors.forEach(function (vendor) {
      var envs = Array.isArray(vendor.env) ? vendor.env : [vendor.env];
      var isCI = envs.every(function (obj) {
        return checkEnv(obj);
      });
      exports2[vendor.constant] = isCI;

      if (isCI) {
        exports2.name = vendor.name;

        switch (_typeof(vendor.pr)) {
          case "string":
            exports2.isPR = !!env[vendor.pr];
            break;

          case "object":
            if ("env" in vendor.pr) {
              exports2.isPR = vendor.pr.env in env && env[vendor.pr.env] !== vendor.pr.ne;
            } else if ("any" in vendor.pr) {
              exports2.isPR = vendor.pr.any.some(function (key) {
                return !!env[key];
              });
            } else {
              exports2.isPR = checkEnv(vendor.pr);
            }

            break;

          default:
            exports2.isPR = null;
        }
      }
    });
    exports2.isCI = !!(env.CI || env.CONTINUOUS_INTEGRATION || env.BUILD_NUMBER || env.RUN_ID || exports2.name || false);

    function checkEnv(obj) {
      if (typeof obj === "string") return !!env[obj];
      return Object.keys(obj).every(function (k) {
        return env[k] === obj[k];
      });
    }
  }
});

module.exports = {
  cosmiconfig: require_dist2().cosmiconfig,
  cosmiconfigSync: require_dist2().cosmiconfigSync,
  findParentDir: require_find_parent_dir().sync,
  getStdin: require_get_stdin(),
  isCI: function isCI() {
    return require_ci_info().isCI;
  }
};