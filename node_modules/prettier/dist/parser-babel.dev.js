"use strict";

function _templateObject5() {
  var data = _taggedTemplateLiteral(["placeholders"]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4() {
  var data = _taggedTemplateLiteral(["typescript"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteral(["jsx"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["flow"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _templateObject() {
  var data = _taggedTemplateLiteral(["pipelineOperator"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

(function (e) {
  if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) == "object" && (typeof module === "undefined" ? "undefined" : _typeof(module)) == "object") module.exports = e();else if (typeof define == "function" && define.amd) define(e);else {
    var i = (typeof globalThis === "undefined" ? "undefined" : _typeof(globalThis)) < "u" ? globalThis : (typeof global === "undefined" ? "undefined" : _typeof(global)) < "u" ? global : (typeof self === "undefined" ? "undefined" : _typeof(self)) < "u" ? self : this || {};
    i.prettierPlugins = i.prettierPlugins || {}, i.prettierPlugins.babel = e();
  }
})(function () {
  "use strict";

  var E = function E(l, h) {
    return function () {
      return h || l((h = {
        exports: {}
      }).exports, h), h.exports;
    };
  };

  var re = E(function (xd, Zr) {
    var Ct = function Ct(l) {
      return l && l.Math == Math && l;
    };

    Zr.exports = Ct((typeof globalThis === "undefined" ? "undefined" : _typeof(globalThis)) == "object" && globalThis) || Ct((typeof window === "undefined" ? "undefined" : _typeof(window)) == "object" && window) || Ct((typeof self === "undefined" ? "undefined" : _typeof(self)) == "object" && self) || Ct((typeof global === "undefined" ? "undefined" : _typeof(global)) == "object" && global) || function () {
      return this;
    }() || Function("return this")();
  });
  var ie = E(function (gd, ei) {
    ei.exports = function (l) {
      try {
        return !!l();
      } catch (_unused) {
        return !0;
      }
    };
  });
  var ye = E(function (Pd, ti) {
    var kh = ie();
    ti.exports = !kh(function () {
      return Object.defineProperty({}, 1, {
        get: function get() {
          return 7;
        }
      })[1] != 7;
    });
  });
  var bt = E(function (Ad, si) {
    var Dh = ie();
    si.exports = !Dh(function () {
      var l = function () {}.bind();

      return typeof l != "function" || l.hasOwnProperty("prototype");
    });
  });
  var wt = E(function (Td, ri) {
    var Fh = bt(),
        St = Function.prototype.call;
    ri.exports = Fh ? St.bind(St) : function () {
      return St.apply(St, arguments);
    };
  });
  var oi = E(function (ni) {
    "use strict";

    var ii = {}.propertyIsEnumerable,
        ai = Object.getOwnPropertyDescriptor,
        Lh = ai && !ii.call({
      1: 2
    }, 1);
    ni.f = Lh ? function (h) {
      var p = ai(this, h);
      return !!p && p.enumerable;
    } : ii;
  });
  var fs = E(function (Ed, li) {
    li.exports = function (l, h) {
      return {
        enumerable: !(l & 1),
        configurable: !(l & 2),
        writable: !(l & 4),
        value: h
      };
    };
  });
  var ae = E(function (Cd, ci) {
    var hi = bt(),
        ui = Function.prototype,
        ds = ui.call,
        Oh = hi && ui.bind.bind(ds, ds);
    ci.exports = hi ? Oh : function (l) {
      return function () {
        return ds.apply(l, arguments);
      };
    };
  });
  var Ye = E(function (bd, fi) {
    var pi = ae(),
        Bh = pi({}.toString),
        Mh = pi("".slice);

    fi.exports = function (l) {
      return Mh(Bh(l), 8, -1);
    };
  });
  var mi = E(function (Sd, di) {
    var _h = ae(),
        Rh = ie(),
        jh = Ye(),
        ms = Object,
        qh = _h("".split);

    di.exports = Rh(function () {
      return !ms("z").propertyIsEnumerable(0);
    }) ? function (l) {
      return jh(l) == "String" ? qh(l, "") : ms(l);
    } : ms;
  });
  var ys = E(function (wd, yi) {
    yi.exports = function (l) {
      return l == null;
    };
  });
  var xs = E(function (Id, xi) {
    var Uh = ys(),
        $h = TypeError;

    xi.exports = function (l) {
      if (Uh(l)) throw $h("Can't call method on " + l);
      return l;
    };
  });
  var It = E(function (Nd, gi) {
    var Hh = mi(),
        zh = xs();

    gi.exports = function (l) {
      return Hh(zh(l));
    };
  });
  var Ps = E(function (kd, Pi) {
    var gs = (typeof document === "undefined" ? "undefined" : _typeof(document)) == "object" && document.all,
        Vh = _typeof(gs) > "u" && gs !== void 0;
    Pi.exports = {
      all: gs,
      IS_HTMLDDA: Vh
    };
  });
  var ee = E(function (Dd, Ti) {
    var Ai = Ps(),
        Kh = Ai.all;
    Ti.exports = Ai.IS_HTMLDDA ? function (l) {
      return typeof l == "function" || l === Kh;
    } : function (l) {
      return typeof l == "function";
    };
  });
  var Ie = E(function (Fd, Ci) {
    var vi = ee(),
        Ei = Ps(),
        Wh = Ei.all;
    Ci.exports = Ei.IS_HTMLDDA ? function (l) {
      return _typeof(l) == "object" ? l !== null : vi(l) || l === Wh;
    } : function (l) {
      return _typeof(l) == "object" ? l !== null : vi(l);
    };
  });
  var Qe = E(function (Ld, bi) {
    var As = re(),
        Gh = ee(),
        Jh = function Jh(l) {
      return Gh(l) ? l : void 0;
    };

    bi.exports = function (l, h) {
      return arguments.length < 2 ? Jh(As[l]) : As[l] && As[l][h];
    };
  });
  var wi = E(function (Od, Si) {
    var Xh = ae();
    Si.exports = Xh({}.isPrototypeOf);
  });
  var Ni = E(function (Bd, Ii) {
    var Yh = Qe();
    Ii.exports = Yh("navigator", "userAgent") || "";
  });
  var Mi = E(function (Md, Bi) {
    var Oi = re(),
        Ts = Ni(),
        ki = Oi.process,
        Di = Oi.Deno,
        Fi = ki && ki.versions || Di && Di.version,
        Li = Fi && Fi.v8,
        ne,
        Nt;
    Li && (ne = Li.split("."), Nt = ne[0] > 0 && ne[0] < 4 ? 1 : +(ne[0] + ne[1]));
    !Nt && Ts && (ne = Ts.match(/Edge\/(\d+)/), (!ne || ne[1] >= 74) && (ne = Ts.match(/Chrome\/(\d+)/), ne && (Nt = +ne[1])));
    Bi.exports = Nt;
  });
  var vs = E(function (_d, Ri) {
    var _i = Mi(),
        Qh = ie();

    Ri.exports = !!Object.getOwnPropertySymbols && !Qh(function () {
      var l = Symbol();
      return !String(l) || !(Object(l) instanceof Symbol) || !Symbol.sham && _i && _i < 41;
    });
  });
  var Es = E(function (Rd, ji) {
    var Zh = vs();
    ji.exports = Zh && !Symbol.sham && _typeof(Symbol.iterator) == "symbol";
  });
  var Cs = E(function (jd, qi) {
    var eu = Qe(),
        tu = ee(),
        su = wi(),
        ru = Es(),
        iu = Object;
    qi.exports = ru ? function (l) {
      return _typeof(l) == "symbol";
    } : function (l) {
      var h = eu("Symbol");
      return tu(h) && su(h.prototype, iu(l));
    };
  });
  var $i = E(function (qd, Ui) {
    var au = String;

    Ui.exports = function (l) {
      try {
        return au(l);
      } catch (_unused2) {
        return "Object";
      }
    };
  });
  var kt = E(function (Ud, Hi) {
    var nu = ee(),
        ou = $i(),
        lu = TypeError;

    Hi.exports = function (l) {
      if (nu(l)) return l;
      throw lu(ou(l) + " is not a function");
    };
  });
  var Vi = E(function ($d, zi) {
    var hu = kt(),
        uu = ys();

    zi.exports = function (l, h) {
      var p = l[h];
      return uu(p) ? void 0 : hu(p);
    };
  });
  var Wi = E(function (Hd, Ki) {
    var bs = wt(),
        Ss = ee(),
        ws = Ie(),
        cu = TypeError;

    Ki.exports = function (l, h) {
      var p, d;
      if (h === "string" && Ss(p = l.toString) && !ws(d = bs(p, l)) || Ss(p = l.valueOf) && !ws(d = bs(p, l)) || h !== "string" && Ss(p = l.toString) && !ws(d = bs(p, l))) return d;
      throw cu("Can't convert object to primitive value");
    };
  });
  var Ji = E(function (zd, Gi) {
    Gi.exports = !1;
  });
  var Dt = E(function (Vd, Yi) {
    var Xi = re(),
        pu = Object.defineProperty;

    Yi.exports = function (l, h) {
      try {
        pu(Xi, l, {
          value: h,
          configurable: !0,
          writable: !0
        });
      } catch (_unused3) {
        Xi[l] = h;
      }

      return h;
    };
  });
  var Ft = E(function (Kd, Zi) {
    var fu = re(),
        du = Dt(),
        Qi = "__core-js_shared__",
        mu = fu[Qi] || du(Qi, {});
    Zi.exports = mu;
  });
  var Is = E(function (Wd, ta) {
    var yu = Ji(),
        ea = Ft();
    (ta.exports = function (l, h) {
      return ea[l] || (ea[l] = h !== void 0 ? h : {});
    })("versions", []).push({
      version: "3.26.1",
      mode: yu ? "pure" : "global",
      copyright: "\xA9 2014-2022 Denis Pushkarev (zloirock.ru)",
      license: "https://github.com/zloirock/core-js/blob/v3.26.1/LICENSE",
      source: "https://github.com/zloirock/core-js"
    });
  });
  var Ns = E(function (Gd, sa) {
    var xu = xs(),
        gu = Object;

    sa.exports = function (l) {
      return gu(xu(l));
    };
  });
  var ve = E(function (Jd, ra) {
    var Pu = ae(),
        Au = Ns(),
        Tu = Pu({}.hasOwnProperty);

    ra.exports = Object.hasOwn || function (h, p) {
      return Tu(Au(h), p);
    };
  });
  var ks = E(function (Xd, ia) {
    var vu = ae(),
        Eu = 0,
        Cu = Math.random(),
        bu = vu(1 .toString);

    ia.exports = function (l) {
      return "Symbol(" + (l === void 0 ? "" : l) + ")_" + bu(++Eu + Cu, 36);
    };
  });
  var Ze = E(function (Yd, ha) {
    var Su = re(),
        wu = Is(),
        aa = ve(),
        Iu = ks(),
        na = vs(),
        la = Es(),
        qe = wu("wks"),
        Ne = Su.Symbol,
        oa = Ne && Ne["for"],
        Nu = la ? Ne : Ne && Ne.withoutSetter || Iu;

    ha.exports = function (l) {
      if (!aa(qe, l) || !(na || typeof qe[l] == "string")) {
        var h = "Symbol." + l;
        na && aa(Ne, l) ? qe[l] = Ne[l] : la && oa ? qe[l] = oa(h) : qe[l] = Nu(h);
      }

      return qe[l];
    };
  });
  var fa = E(function (Qd, pa) {
    var ku = wt(),
        ua = Ie(),
        ca = Cs(),
        Du = Vi(),
        Fu = Wi(),
        Lu = Ze(),
        Ou = TypeError,
        Bu = Lu("toPrimitive");

    pa.exports = function (l, h) {
      if (!ua(l) || ca(l)) return l;
      var p = Du(l, Bu),
          d;

      if (p) {
        if (h === void 0 && (h = "default"), d = ku(p, l, h), !ua(d) || ca(d)) return d;
        throw Ou("Can't convert object to primitive value");
      }

      return h === void 0 && (h = "number"), Fu(l, h);
    };
  });
  var Ds = E(function (Zd, da) {
    var Mu = fa(),
        _u = Cs();

    da.exports = function (l) {
      var h = Mu(l, "string");
      return _u(h) ? h : h + "";
    };
  });
  var xa = E(function (em, ya) {
    var Ru = re(),
        ma = Ie(),
        Fs = Ru.document,
        ju = ma(Fs) && ma(Fs.createElement);

    ya.exports = function (l) {
      return ju ? Fs.createElement(l) : {};
    };
  });
  var Ls = E(function (tm, ga) {
    var qu = ye(),
        Uu = ie(),
        $u = xa();
    ga.exports = !qu && !Uu(function () {
      return Object.defineProperty($u("div"), "a", {
        get: function get() {
          return 7;
        }
      }).a != 7;
    });
  });
  var Os = E(function (Aa) {
    var Hu = ye(),
        zu = wt(),
        Vu = oi(),
        Ku = fs(),
        Wu = It(),
        Gu = Ds(),
        Ju = ve(),
        Xu = Ls(),
        Pa = Object.getOwnPropertyDescriptor;
    Aa.f = Hu ? Pa : function (h, p) {
      if (h = Wu(h), p = Gu(p), Xu) try {
        return Pa(h, p);
      } catch (_unused4) {}
      if (Ju(h, p)) return Ku(!zu(Vu.f, h, p), h[p]);
    };
  });
  var va = E(function (rm, Ta) {
    var Yu = ye(),
        Qu = ie();
    Ta.exports = Yu && Qu(function () {
      return Object.defineProperty(function () {}, "prototype", {
        value: 42,
        writable: !1
      }).prototype != 42;
    });
  });
  var Lt = E(function (im, Ea) {
    var Zu = Ie(),
        ec = String,
        tc = TypeError;

    Ea.exports = function (l) {
      if (Zu(l)) return l;
      throw tc(ec(l) + " is not an object");
    };
  });
  var et = E(function (ba) {
    var sc = ye(),
        rc = Ls(),
        ic = va(),
        Ot = Lt(),
        Ca = Ds(),
        ac = TypeError,
        Bs = Object.defineProperty,
        nc = Object.getOwnPropertyDescriptor,
        Ms = "enumerable",
        _s = "configurable",
        Rs = "writable";
    ba.f = sc ? ic ? function (h, p, d) {
      if (Ot(h), p = Ca(p), Ot(d), typeof h == "function" && p === "prototype" && "value" in d && Rs in d && !d[Rs]) {
        var x = nc(h, p);
        x && x[Rs] && (h[p] = d.value, d = {
          configurable: _s in d ? d[_s] : x[_s],
          enumerable: Ms in d ? d[Ms] : x[Ms],
          writable: !1
        });
      }

      return Bs(h, p, d);
    } : Bs : function (h, p, d) {
      if (Ot(h), p = Ca(p), Ot(d), rc) try {
        return Bs(h, p, d);
      } catch (_unused5) {}
      if ("get" in d || "set" in d) throw ac("Accessors not supported");
      return "value" in d && (h[p] = d.value), h;
    };
  });
  var js = E(function (nm, Sa) {
    var oc = ye(),
        lc = et(),
        hc = fs();
    Sa.exports = oc ? function (l, h, p) {
      return lc.f(l, h, hc(1, p));
    } : function (l, h, p) {
      return l[h] = p, l;
    };
  });
  var Na = E(function (om, Ia) {
    var qs = ye(),
        uc = ve(),
        wa = Function.prototype,
        cc = qs && Object.getOwnPropertyDescriptor,
        Us = uc(wa, "name"),
        pc = Us && function () {}.name === "something",
        fc = Us && (!qs || qs && cc(wa, "name").configurable);

    Ia.exports = {
      EXISTS: Us,
      PROPER: pc,
      CONFIGURABLE: fc
    };
  });
  var Hs = E(function (lm, ka) {
    var dc = ae(),
        mc = ee(),
        $s = Ft(),
        yc = dc(Function.toString);
    mc($s.inspectSource) || ($s.inspectSource = function (l) {
      return yc(l);
    });
    ka.exports = $s.inspectSource;
  });
  var La = E(function (hm, Fa) {
    var xc = re(),
        gc = ee(),
        Da = xc.WeakMap;
    Fa.exports = gc(Da) && /native code/.test(String(Da));
  });
  var Ma = E(function (um, Ba) {
    var Pc = Is(),
        Ac = ks(),
        Oa = Pc("keys");

    Ba.exports = function (l) {
      return Oa[l] || (Oa[l] = Ac(l));
    };
  });
  var zs = E(function (cm, _a) {
    _a.exports = {};
  });
  var Ua = E(function (pm, qa) {
    var Tc = La(),
        ja = re(),
        vc = Ie(),
        Ec = js(),
        Vs = ve(),
        Ks = Ft(),
        Cc = Ma(),
        bc = zs(),
        Ra = "Object already initialized",
        Ws = ja.TypeError,
        Sc = ja.WeakMap,
        Bt,
        tt,
        Mt,
        wc = function wc(l) {
      return Mt(l) ? tt(l) : Bt(l, {});
    },
        Ic = function Ic(l) {
      return function (h) {
        var p;
        if (!vc(h) || (p = tt(h)).type !== l) throw Ws("Incompatible receiver, " + l + " required");
        return p;
      };
    };

    Tc || Ks.state ? (oe = Ks.state || (Ks.state = new Sc()), oe.get = oe.get, oe.has = oe.has, oe.set = oe.set, Bt = function Bt(l, h) {
      if (oe.has(l)) throw Ws(Ra);
      return h.facade = l, oe.set(l, h), h;
    }, tt = function tt(l) {
      return oe.get(l) || {};
    }, Mt = function Mt(l) {
      return oe.has(l);
    }) : (ke = Cc("state"), bc[ke] = !0, Bt = function Bt(l, h) {
      if (Vs(l, ke)) throw Ws(Ra);
      return h.facade = l, Ec(l, ke, h), h;
    }, tt = function tt(l) {
      return Vs(l, ke) ? l[ke] : {};
    }, Mt = function Mt(l) {
      return Vs(l, ke);
    });
    var oe, ke;
    qa.exports = {
      set: Bt,
      get: tt,
      has: Mt,
      enforce: wc,
      getterFor: Ic
    };
  });
  var Js = E(function (fm, Ha) {
    var Nc = ie(),
        kc = ee(),
        _t = ve(),
        Gs = ye(),
        Dc = Na().CONFIGURABLE,
        Fc = Hs(),
        $a = Ua(),
        Lc = $a.enforce,
        Oc = $a.get,
        Rt = Object.defineProperty,
        Bc = Gs && !Nc(function () {
      return Rt(function () {}, "length", {
        value: 8
      }).length !== 8;
    }),
        Mc = String(String).split("String"),
        _c = Ha.exports = function (l, h, p) {
      String(h).slice(0, 7) === "Symbol(" && (h = "[" + String(h).replace(/^Symbol\(([^)]*)\)/, "$1") + "]"), p && p.getter && (h = "get " + h), p && p.setter && (h = "set " + h), (!_t(l, "name") || Dc && l.name !== h) && (Gs ? Rt(l, "name", {
        value: h,
        configurable: !0
      }) : l.name = h), Bc && p && _t(p, "arity") && l.length !== p.arity && Rt(l, "length", {
        value: p.arity
      });

      try {
        p && _t(p, "constructor") && p.constructor ? Gs && Rt(l, "prototype", {
          writable: !1
        }) : l.prototype && (l.prototype = void 0);
      } catch (_unused6) {}

      var d = Lc(l);
      return _t(d, "source") || (d.source = Mc.join(typeof h == "string" ? h : "")), l;
    };

    Function.prototype.toString = _c(function () {
      return kc(this) && Oc(this).source || Fc(this);
    }, "toString");
  });
  var Va = E(function (dm, za) {
    var Rc = ee(),
        jc = et(),
        qc = Js(),
        Uc = Dt();

    za.exports = function (l, h, p, d) {
      d || (d = {});
      var x = d.enumerable,
          P = d.name !== void 0 ? d.name : h;
      if (Rc(p) && qc(p, P, d), d.global) x ? l[h] = p : Uc(h, p);else {
        try {
          d.unsafe ? l[h] && (x = !0) : delete l[h];
        } catch (_unused7) {}

        x ? l[h] = p : jc.f(l, h, {
          value: p,
          enumerable: !1,
          configurable: !d.nonConfigurable,
          writable: !d.nonWritable
        });
      }
      return l;
    };
  });
  var Wa = E(function (mm, Ka) {
    var $c = Math.ceil,
        Hc = Math.floor;

    Ka.exports = Math.trunc || function (h) {
      var p = +h;
      return (p > 0 ? Hc : $c)(p);
    };
  });
  var Xs = E(function (ym, Ga) {
    var zc = Wa();

    Ga.exports = function (l) {
      var h = +l;
      return h !== h || h === 0 ? 0 : zc(h);
    };
  });
  var Xa = E(function (xm, Ja) {
    var Vc = Xs(),
        Kc = Math.max,
        Wc = Math.min;

    Ja.exports = function (l, h) {
      var p = Vc(l);
      return p < 0 ? Kc(p + h, 0) : Wc(p, h);
    };
  });
  var Qa = E(function (gm, Ya) {
    var Gc = Xs(),
        Jc = Math.min;

    Ya.exports = function (l) {
      return l > 0 ? Jc(Gc(l), 9007199254740991) : 0;
    };
  });
  var jt = E(function (Pm, Za) {
    var Xc = Qa();

    Za.exports = function (l) {
      return Xc(l.length);
    };
  });
  var sn = E(function (Am, tn) {
    var Yc = It(),
        Qc = Xa(),
        Zc = jt(),
        en = function en(l) {
      return function (h, p, d) {
        var x = Yc(h),
            P = Zc(x),
            m = Qc(d, P),
            v;

        if (l && p != p) {
          for (; P > m;) {
            if (v = x[m++], v != v) return !0;
          }
        } else for (; P > m; m++) {
          if ((l || m in x) && x[m] === p) return l || m || 0;
        }

        return !l && -1;
      };
    };

    tn.exports = {
      includes: en(!0),
      indexOf: en(!1)
    };
  });
  var nn = E(function (Tm, an) {
    var ep = ae(),
        Ys = ve(),
        tp = It(),
        sp = sn().indexOf,
        rp = zs(),
        rn = ep([].push);

    an.exports = function (l, h) {
      var p = tp(l),
          d = 0,
          x = [],
          P;

      for (P in p) {
        !Ys(rp, P) && Ys(p, P) && rn(x, P);
      }

      for (; h.length > d;) {
        Ys(p, P = h[d++]) && (~sp(x, P) || rn(x, P));
      }

      return x;
    };
  });
  var ln = E(function (vm, on) {
    on.exports = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
  });
  var un = E(function (hn) {
    var ip = nn(),
        ap = ln(),
        np = ap.concat("length", "prototype");

    hn.f = Object.getOwnPropertyNames || function (h) {
      return ip(h, np);
    };
  });
  var pn = E(function (cn) {
    cn.f = Object.getOwnPropertySymbols;
  });
  var dn = E(function (bm, fn) {
    var op = Qe(),
        lp = ae(),
        hp = un(),
        up = pn(),
        cp = Lt(),
        pp = lp([].concat);

    fn.exports = op("Reflect", "ownKeys") || function (h) {
      var p = hp.f(cp(h)),
          d = up.f;
      return d ? pp(p, d(h)) : p;
    };
  });
  var xn = E(function (Sm, yn) {
    var mn = ve(),
        fp = dn(),
        dp = Os(),
        mp = et();

    yn.exports = function (l, h, p) {
      for (var d = fp(h), x = mp.f, P = dp.f, m = 0; m < d.length; m++) {
        var v = d[m];
        !mn(l, v) && !(p && mn(p, v)) && x(l, v, P(h, v));
      }
    };
  });
  var Pn = E(function (wm, gn) {
    var yp = ie(),
        xp = ee(),
        gp = /#|\.prototype\./,
        st = function st(l, h) {
      var p = Ap[Pp(l)];
      return p == vp ? !0 : p == Tp ? !1 : xp(h) ? yp(h) : !!h;
    },
        Pp = st.normalize = function (l) {
      return String(l).replace(gp, ".").toLowerCase();
    },
        Ap = st.data = {},
        Tp = st.NATIVE = "N",
        vp = st.POLYFILL = "P";

    gn.exports = st;
  });
  var Zs = E(function (Im, An) {
    var Qs = re(),
        Ep = Os().f,
        Cp = js(),
        bp = Va(),
        Sp = Dt(),
        wp = xn(),
        Ip = Pn();

    An.exports = function (l, h) {
      var p = l.target,
          d = l.global,
          x = l.stat,
          P,
          m,
          v,
          S,
          k,
          F;
      if (d ? m = Qs : x ? m = Qs[p] || Sp(p, {}) : m = (Qs[p] || {}).prototype, m) for (v in h) {
        if (k = h[v], l.dontCallGetSet ? (F = Ep(m, v), S = F && F.value) : S = m[v], P = Ip(d ? v : p + (x ? "." : "#") + v, l.forced), !P && S !== void 0) {
          if (_typeof(k) == _typeof(S)) continue;
          wp(k, S);
        }

        (l.sham || S && S.sham) && Cp(k, "sham", !0), bp(m, v, k, l);
      }
    };
  });
  var Tn = E(function () {
    var Np = Zs(),
        er = re();
    Np({
      global: !0,
      forced: er.globalThis !== er
    }, {
      globalThis: er
    });
  });
  var vn = E(function () {
    Tn();
  });
  var bn = E(function (Lm, Cn) {
    var En = Js(),
        kp = et();

    Cn.exports = function (l, h, p) {
      return p.get && En(p.get, h, {
        getter: !0
      }), p.set && En(p.set, h, {
        setter: !0
      }), kp.f(l, h, p);
    };
  });
  var wn = E(function (Om, Sn) {
    "use strict";

    var Dp = Lt();

    Sn.exports = function () {
      var l = Dp(this),
          h = "";
      return l.hasIndices && (h += "d"), l.global && (h += "g"), l.ignoreCase && (h += "i"), l.multiline && (h += "m"), l.dotAll && (h += "s"), l.unicode && (h += "u"), l.unicodeSets && (h += "v"), l.sticky && (h += "y"), h;
    };
  });
  var kn = E(function () {
    var Fp = re(),
        Lp = ye(),
        Op = bn(),
        Bp = wn(),
        Mp = ie(),
        In = Fp.RegExp,
        Nn = In.prototype,
        _p = Lp && Mp(function () {
      var l = !0;

      try {
        In(".", "d");
      } catch (_unused8) {
        l = !1;
      }

      var h = {},
          p = "",
          d = l ? "dgimsy" : "gimsy",
          x = function x(S, k) {
        Object.defineProperty(h, S, {
          get: function get() {
            return p += k, !0;
          }
        });
      },
          P = {
        dotAll: "s",
        global: "g",
        ignoreCase: "i",
        multiline: "m",
        sticky: "y"
      };

      l && (P.hasIndices = "d");

      for (var m in P) {
        x(m, P[m]);
      }

      var v = Object.getOwnPropertyDescriptor(Nn, "flags").get.call(h);
      return v !== d || p !== d;
    });

    _p && Op(Nn, "flags", {
      configurable: !0,
      get: Bp
    });
  });
  var tr = E(function (_m, Dn) {
    var Rp = Ye();

    Dn.exports = Array.isArray || function (h) {
      return Rp(h) == "Array";
    };
  });
  var Ln = E(function (Rm, Fn) {
    var jp = TypeError,
        qp = 9007199254740991;

    Fn.exports = function (l) {
      if (l > qp) throw jp("Maximum allowed index exceeded");
      return l;
    };
  });
  var Bn = E(function (jm, On) {
    var Up = Ye(),
        $p = ae();

    On.exports = function (l) {
      if (Up(l) === "Function") return $p(l);
    };
  });
  var Rn = E(function (qm, _n) {
    var Mn = Bn(),
        Hp = kt(),
        zp = bt(),
        Vp = Mn(Mn.bind);

    _n.exports = function (l, h) {
      return Hp(l), h === void 0 ? l : zp ? Vp(l, h) : function () {
        return l.apply(h, arguments);
      };
    };
  });
  var Un = E(function (Um, qn) {
    "use strict";

    var Kp = tr(),
        Wp = jt(),
        Gp = Ln(),
        Jp = Rn(),
        jn = function jn(l, h, p, d, x, P, m, v) {
      for (var S = x, k = 0, F = m ? Jp(m, v) : !1, w, L; k < d;) {
        k in p && (w = F ? F(p[k], k, h) : p[k], P > 0 && Kp(w) ? (L = Wp(w), S = jn(l, h, w, L, S, P - 1) - 1) : (Gp(S + 1), l[S] = w), S++), k++;
      }

      return S;
    };

    qn.exports = jn;
  });
  var zn = E(function ($m, Hn) {
    var Xp = Ze(),
        Yp = Xp("toStringTag"),
        $n = {};
    $n[Yp] = "z";
    Hn.exports = String($n) === "[object z]";
  });
  var Kn = E(function (Hm, Vn) {
    var Qp = zn(),
        Zp = ee(),
        qt = Ye(),
        ef = Ze(),
        tf = ef("toStringTag"),
        sf = Object,
        rf = qt(function () {
      return arguments;
    }()) == "Arguments",
        af = function af(l, h) {
      try {
        return l[h];
      } catch (_unused9) {}
    };

    Vn.exports = Qp ? qt : function (l) {
      var h, p, d;
      return l === void 0 ? "Undefined" : l === null ? "Null" : typeof (p = af(h = sf(l), tf)) == "string" ? p : rf ? qt(h) : (d = qt(h)) == "Object" && Zp(h.callee) ? "Arguments" : d;
    };
  });
  var Qn = E(function (zm, Yn) {
    var nf = ae(),
        of = ie(),
        Wn = ee(),
        lf = Kn(),
        hf = Qe(),
        uf = Hs(),
        Gn = function Gn() {},
        cf = [],
        Jn = hf("Reflect", "construct"),
        sr = /^\s*(?:class|function)\b/,
        pf = nf(sr.exec),
        ff = !sr.exec(Gn),
        rt = function rt(h) {
      if (!Wn(h)) return !1;

      try {
        return Jn(Gn, cf, h), !0;
      } catch (_unused10) {
        return !1;
      }
    },
        Xn = function Xn(h) {
      if (!Wn(h)) return !1;

      switch (lf(h)) {
        case "AsyncFunction":
        case "GeneratorFunction":
        case "AsyncGeneratorFunction":
          return !1;
      }

      try {
        return ff || !!pf(sr, uf(h));
      } catch (_unused11) {
        return !0;
      }
    };

    Xn.sham = !0;
    Yn.exports = !Jn || of(function () {
      var l;
      return rt(rt.call) || !rt(Object) || !rt(function () {
        l = !0;
      }) || l;
    }) ? Xn : rt;
  });
  var so = E(function (Vm, to) {
    var Zn = tr(),
        df = Qn(),
        mf = Ie(),
        yf = Ze(),
        xf = yf("species"),
        eo = Array;

    to.exports = function (l) {
      var h;
      return Zn(l) && (h = l.constructor, df(h) && (h === eo || Zn(h.prototype)) ? h = void 0 : mf(h) && (h = h[xf], h === null && (h = void 0))), h === void 0 ? eo : h;
    };
  });
  var io = E(function (Km, ro) {
    var gf = so();

    ro.exports = function (l, h) {
      return new (gf(l))(h === 0 ? 0 : h);
    };
  });
  var ao = E(function () {
    "use strict";

    var Pf = Zs(),
        Af = Un(),
        Tf = kt(),
        vf = Ns(),
        Ef = jt(),
        Cf = io();
    Pf({
      target: "Array",
      proto: !0
    }, {
      flatMap: function flatMap(h) {
        var p = vf(this),
            d = Ef(p),
            x;
        return Tf(h), x = Cf(p, 0), x.length = Af(x, p, p, d, 0, 1, h, arguments.length > 1 ? arguments[1] : void 0), x;
      }
    });
  });
  var md = E(function (ty, Oo) {
    vn();
    kn();
    ao();

    var nr = Object.defineProperty,
        bf = Object.getOwnPropertyDescriptor,
        or = Object.getOwnPropertyNames,
        Sf = Object.prototype.hasOwnProperty,
        co = function co(l, h) {
      return function () {
        return l && (h = (0, l[or(l)[0]])(l = 0)), h;
      };
    },
        $ = function $(l, h) {
      return function () {
        return h || (0, l[or(l)[0]])((h = {
          exports: {}
        }).exports, h), h.exports;
      };
    },
        wf = function wf(l, h) {
      for (var p in h) {
        nr(l, p, {
          get: h[p],
          enumerable: !0
        });
      }
    },
        If = function If(l, h, p, d) {
      if (h && _typeof(h) == "object" || typeof h == "function") {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          var _loop = function _loop() {
            var x = _step.value;
            !Sf.call(l, x) && x !== p && nr(l, x, {
              get: function get() {
                return h[x];
              },
              enumerable: !(d = bf(h, x)) || d.enumerable
            });
          };

          for (var _iterator = or(h)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            _loop();
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }

      return l;
    },
        Nf = function Nf(l) {
      return If(nr({}, "__esModule", {
        value: !0
      }), l);
    },
        U = co({
      "<define:process>": function defineProcess() {}
    }),
        kf = $({
      "src/utils/try-combinations.js": function srcUtilsTryCombinationsJs(l, h) {
        "use strict";

        U();

        function p() {
          var d;

          for (var x = arguments.length, P = new Array(x), m = 0; m < x; m++) {
            P[m] = arguments[m];
          }

          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = P.entries()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var _step2$value = _slicedToArray(_step2.value, 2),
                  v = _step2$value[0],
                  S = _step2$value[1];

              try {
                return {
                  result: S()
                };
              } catch (k) {
                v === 0 && (d = k);
              }
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                _iterator2["return"]();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }

          return {
            error: d
          };
        }

        h.exports = p;
      }
    }),
        po = $({
      "src/language-js/utils/get-shebang.js": function srcLanguageJsUtilsGetShebangJs(l, h) {
        "use strict";

        U();

        function p(d) {
          if (!d.startsWith("#!")) return "";
          var x = d.indexOf("\n");
          return x === -1 ? d : d.slice(0, x);
        }

        h.exports = p;
      }
    }),
        Df = $({
      "src/utils/text/skip-inline-comment.js": function srcUtilsTextSkipInlineCommentJs(l, h) {
        "use strict";

        U();

        function p(d, x) {
          if (x === !1) return !1;

          if (d.charAt(x) === "/" && d.charAt(x + 1) === "*") {
            for (var P = x + 2; P < d.length; ++P) {
              if (d.charAt(P) === "*" && d.charAt(P + 1) === "/") return P + 2;
            }
          }

          return x;
        }

        h.exports = p;
      }
    }),
        Ff = $({
      "src/utils/text/skip-newline.js": function srcUtilsTextSkipNewlineJs(l, h) {
        "use strict";

        U();

        function p(d, x, P) {
          var m = P && P.backwards;
          if (x === !1) return !1;
          var v = d.charAt(x);

          if (m) {
            if (d.charAt(x - 1) === "\r" && v === "\n") return x - 2;
            if (v === "\n" || v === "\r" || v === "\u2028" || v === "\u2029") return x - 1;
          } else {
            if (v === "\r" && d.charAt(x + 1) === "\n") return x + 2;
            if (v === "\n" || v === "\r" || v === "\u2028" || v === "\u2029") return x + 1;
          }

          return x;
        }

        h.exports = p;
      }
    }),
        fo = $({
      "src/utils/text/skip.js": function srcUtilsTextSkipJs(l, h) {
        "use strict";

        U();

        function p(v) {
          return function (S, k, F) {
            var w = F && F.backwards;
            if (k === !1) return !1;
            var L = S.length,
                A = k;

            for (; A >= 0 && A < L;) {
              var _ = S.charAt(A);

              if (v instanceof RegExp) {
                if (!v.test(_)) return A;
              } else if (!v.includes(_)) return A;

              w ? A-- : A++;
            }

            return A === -1 || A === L ? A : !1;
          };
        }

        var d = p(/\s/),
            x = p(" 	"),
            P = p(",; 	"),
            m = p(/[^\n\r]/);
        h.exports = {
          skipWhitespace: d,
          skipSpaces: x,
          skipToLineEnd: P,
          skipEverythingButNewLine: m
        };
      }
    }),
        Lf = $({
      "src/utils/text/skip-trailing-comment.js": function srcUtilsTextSkipTrailingCommentJs(l, h) {
        "use strict";

        U();

        var _fo = fo(),
            p = _fo.skipEverythingButNewLine;

        function d(x, P) {
          return P === !1 ? !1 : x.charAt(P) === "/" && x.charAt(P + 1) === "/" ? p(x, P) : P;
        }

        h.exports = d;
      }
    }),
        Of = $({
      "src/utils/text/get-next-non-space-non-comment-character-index-with-start-index.js": function srcUtilsTextGetNextNonSpaceNonCommentCharacterIndexWithStartIndexJs(l, h) {
        "use strict";

        U();

        var p = Df(),
            d = Ff(),
            x = Lf(),
            _fo2 = fo(),
            P = _fo2.skipSpaces;

        function m(v, S) {
          var k = null,
              F = S;

          for (; F !== k;) {
            k = F, F = P(v, F), F = p(v, F), F = x(v, F), F = d(v, F);
          }

          return F;
        }

        h.exports = m;
      }
    }),
        mo = {};

    wf(mo, {
      EOL: function EOL() {
        return ar;
      },
      arch: function arch() {
        return Bf;
      },
      cpus: function cpus() {
        return vo;
      },
      "default": function _default() {
        return wo;
      },
      endianness: function endianness() {
        return yo;
      },
      freemem: function freemem() {
        return Ao;
      },
      getNetworkInterfaces: function getNetworkInterfaces() {
        return So;
      },
      hostname: function hostname() {
        return xo;
      },
      loadavg: function loadavg() {
        return go;
      },
      networkInterfaces: function networkInterfaces() {
        return bo;
      },
      platform: function platform() {
        return Mf;
      },
      release: function release() {
        return Co;
      },
      tmpDir: function tmpDir() {
        return rr;
      },
      tmpdir: function tmpdir() {
        return ir;
      },
      totalmem: function totalmem() {
        return To;
      },
      type: function type() {
        return Eo;
      },
      uptime: function uptime() {
        return Po;
      }
    });

    function yo() {
      if (_typeof(Ut) > "u") {
        var l = new ArrayBuffer(2),
            h = new Uint8Array(l),
            p = new Uint16Array(l);
        if (h[0] = 1, h[1] = 2, p[0] === 258) Ut = "BE";else if (p[0] === 513) Ut = "LE";else throw new Error("unable to figure out endianess");
      }

      return Ut;
    }

    function xo() {
      return _typeof(globalThis.location) < "u" ? globalThis.location.hostname : "";
    }

    function go() {
      return [];
    }

    function Po() {
      return 0;
    }

    function Ao() {
      return Number.MAX_VALUE;
    }

    function To() {
      return Number.MAX_VALUE;
    }

    function vo() {
      return [];
    }

    function Eo() {
      return "Browser";
    }

    function Co() {
      return _typeof(globalThis.navigator) < "u" ? globalThis.navigator.appVersion : "";
    }

    function bo() {}

    function So() {}

    function Bf() {
      return "javascript";
    }

    function Mf() {
      return "browser";
    }

    function rr() {
      return "/tmp";
    }

    var Ut,
        ir,
        ar,
        wo,
        _f = co({
      "node-modules-polyfills:os": function nodeModulesPolyfillsOs() {
        U(), ir = rr, ar = "\n", wo = {
          EOL: ar,
          tmpdir: ir,
          tmpDir: rr,
          networkInterfaces: bo,
          getNetworkInterfaces: So,
          release: Co,
          type: Eo,
          cpus: vo,
          totalmem: To,
          freemem: Ao,
          uptime: Po,
          loadavg: go,
          hostname: xo,
          endianness: yo
        };
      }
    }),
        Rf = $({
      "node-modules-polyfills-commonjs:os": function nodeModulesPolyfillsCommonjsOs(l, h) {
        U();
        var p = (_f(), Nf(mo));

        if (p && p["default"]) {
          h.exports = p["default"];

          for (var d in p) {
            h.exports[d] = p[d];
          }
        } else p && (h.exports = p);
      }
    }),
        jf = $({
      "node_modules/detect-newline/index.js": function node_modulesDetectNewlineIndexJs(l, h) {
        "use strict";

        U();

        var p = function p(d) {
          if (typeof d != "string") throw new TypeError("Expected a string");
          var x = d.match(/(?:\r?\n)/g) || [];
          if (x.length === 0) return;
          var P = x.filter(function (v) {
            return v === "\r\n";
          }).length,
              m = x.length - P;
          return P > m ? "\r\n" : "\n";
        };

        h.exports = p, h.exports.graceful = function (d) {
          return typeof d == "string" && p(d) || "\n";
        };
      }
    }),
        qf = $({
      "node_modules/jest-docblock/build/index.js": function node_modulesJestDocblockBuildIndexJs(l) {
        "use strict";

        U(), Object.defineProperty(l, "__esModule", {
          value: !0
        }), l.extract = A, l.parse = G, l.parseWithComments = N, l.print = O, l.strip = _;

        function h() {
          var R = Rf();
          return h = function h() {
            return R;
          }, R;
        }

        function p() {
          var R = d(jf());
          return p = function p() {
            return R;
          }, R;
        }

        function d(R) {
          return R && R.__esModule ? R : {
            "default": R
          };
        }

        var x = /\*\/$/,
            P = /^\/\*\*?/,
            m = /^\s*(\/\*\*?(.|\r?\n)*?\*\/)/,
            v = /(^|\s+)\/\/([^\r\n]*)/g,
            S = /^(\r?\n)+/,
            k = /(?:^|\r?\n) *(@[^\r\n]*?) *\r?\n *(?![^@\r\n]*\/\/[^]*)([^@\r\n\s][^@\r\n]+?) *\r?\n/g,
            F = /(?:^|\r?\n) *@(\S+) *([^\r\n]*)/g,
            w = /(\r?\n|^) *\* ?/g,
            L = [];

        function A(R) {
          var z = R.match(m);
          return z ? z[0].trimLeft() : "";
        }

        function _(R) {
          var z = R.match(m);
          return z && z[0] ? R.substring(z[0].length) : R;
        }

        function G(R) {
          return N(R).pragmas;
        }

        function N(R) {
          var z = (0, p()["default"])(R) || h().EOL;
          R = R.replace(P, "").replace(x, "").replace(w, "$1");
          var Q = "";

          for (; Q !== R;) {
            Q = R, R = R.replace(k, "".concat(z, "$1 $2").concat(z));
          }

          R = R.replace(S, "").trimRight();
          var b = Object.create(null),
              B = R.replace(F, "").replace(S, "").trimRight(),
              Z;

          for (; Z = F.exec(R);) {
            var q = Z[2].replace(v, "");
            typeof b[Z[1]] == "string" || Array.isArray(b[Z[1]]) ? b[Z[1]] = L.concat(b[Z[1]], q) : b[Z[1]] = q;
          }

          return {
            comments: B,
            pragmas: b
          };
        }

        function O(R) {
          var _R$comments = R.comments,
              z = _R$comments === void 0 ? "" : _R$comments,
              _R$pragmas = R.pragmas,
              Q = _R$pragmas === void 0 ? {} : _R$pragmas,
              b = (0, p()["default"])(z) || h().EOL,
              B = "/**",
              Z = " *",
              q = " */",
              ue = Object.keys(Q),
              te = ue.map(function (se) {
            return H(se, Q[se]);
          }).reduce(function (se, He) {
            return se.concat(He);
          }, []).map(function (se) {
            return "".concat(Z, " ").concat(se).concat(b);
          }).join("");

          if (!z) {
            if (ue.length === 0) return "";

            if (ue.length === 1 && !Array.isArray(Q[ue[0]])) {
              var se = Q[ue[0]];
              return "".concat(B, " ").concat(H(ue[0], se)[0]).concat(q);
            }
          }

          var it = z.split(b).map(function (se) {
            return "".concat(Z, " ").concat(se);
          }).join(b) + b;
          return B + b + (z ? it : "") + (z && ue.length ? Z + b : "") + te + q;
        }

        function H(R, z) {
          return L.concat(z).map(function (Q) {
            return "@".concat(R, " ").concat(Q).trim();
          });
        }
      }
    }),
        Uf = $({
      "src/common/end-of-line.js": function srcCommonEndOfLineJs(l, h) {
        "use strict";

        U();

        function p(m) {
          var v = m.indexOf("\r");
          return v >= 0 ? m.charAt(v + 1) === "\n" ? "crlf" : "cr" : "lf";
        }

        function d(m) {
          switch (m) {
            case "cr":
              return "\r";

            case "crlf":
              return "\r\n";

            default:
              return "\n";
          }
        }

        function x(m, v) {
          var S;

          switch (v) {
            case "\n":
              S = /\n/g;
              break;

            case "\r":
              S = /\r/g;
              break;

            case "\r\n":
              S = /\r\n/g;
              break;

            default:
              throw new Error("Unexpected \"eol\" ".concat(JSON.stringify(v), "."));
          }

          var k = m.match(S);
          return k ? k.length : 0;
        }

        function P(m) {
          return m.replace(/\r\n?/g, "\n");
        }

        h.exports = {
          guessEndOfLine: p,
          convertEndOfLineToChars: d,
          countEndOfLineChars: x,
          normalizeEndOfLine: P
        };
      }
    }),
        $f = $({
      "src/language-js/pragma.js": function srcLanguageJsPragmaJs(l, h) {
        "use strict";

        U();

        var _qf = qf(),
            p = _qf.parseWithComments,
            d = _qf.strip,
            x = _qf.extract,
            P = _qf.print,
            _Uf = Uf(),
            m = _Uf.normalizeEndOfLine,
            v = po();

        function S(w) {
          var L = v(w);
          L && (w = w.slice(L.length + 1));

          var A = x(w),
              _p2 = p(A),
              _ = _p2.pragmas,
              G = _p2.comments;

          return {
            shebang: L,
            text: w,
            pragmas: _,
            comments: G
          };
        }

        function k(w) {
          var L = Object.keys(S(w).pragmas);
          return L.includes("prettier") || L.includes("format");
        }

        function F(w) {
          var _S = S(w),
              L = _S.shebang,
              A = _S.text,
              _ = _S.pragmas,
              G = _S.comments,
              N = d(A),
              O = P({
            pragmas: Object.assign({
              format: ""
            }, _),
            comments: G.trimStart()
          });

          return (L ? "".concat(L, "\n") : "") + m(O) + (N.startsWith("\n") ? "\n" : "\n\n") + N;
        }

        h.exports = {
          hasPragma: k,
          insertPragma: F
        };
      }
    }),
        Io = $({
      "src/utils/is-non-empty-array.js": function srcUtilsIsNonEmptyArrayJs(l, h) {
        "use strict";

        U();

        function p(d) {
          return Array.isArray(d) && d.length > 0;
        }

        h.exports = p;
      }
    }),
        No = $({
      "src/language-js/loc.js": function srcLanguageJsLocJs(l, h) {
        "use strict";

        U();
        var p = Io();

        function d(S) {
          var k, F;
          var w = S.range ? S.range[0] : S.start,
              L = (k = (F = S.declaration) === null || F === void 0 ? void 0 : F.decorators) !== null && k !== void 0 ? k : S.decorators;
          return p(L) ? Math.min(d(L[0]), w) : w;
        }

        function x(S) {
          return S.range ? S.range[1] : S.end;
        }

        function P(S, k) {
          var F = d(S);
          return Number.isInteger(F) && F === d(k);
        }

        function m(S, k) {
          var F = x(S);
          return Number.isInteger(F) && F === x(k);
        }

        function v(S, k) {
          return P(S, k) && m(S, k);
        }

        h.exports = {
          locStart: d,
          locEnd: x,
          hasSameLocStart: P,
          hasSameLoc: v
        };
      }
    }),
        ko = $({
      "src/language-js/parse/utils/create-parser.js": function srcLanguageJsParseUtilsCreateParserJs(l, h) {
        "use strict";

        U();

        var _$f = $f(),
            p = _$f.hasPragma,
            _No = No(),
            d = _No.locStart,
            x = _No.locEnd;

        function P(m) {
          return m = typeof m == "function" ? {
            parse: m
          } : m, Object.assign({
            astFormat: "estree",
            hasPragma: p,
            locStart: d,
            locEnd: x
          }, m);
        }

        h.exports = P;
      }
    }),
        lr = $({
      "src/common/parser-create-error.js": function srcCommonParserCreateErrorJs(l, h) {
        "use strict";

        U();

        function p(d, x) {
          var P = new SyntaxError(d + " (" + x.start.line + ":" + x.start.column + ")");
          return P.loc = x, P;
        }

        h.exports = p;
      }
    }),
        Do = $({
      "src/language-js/parse/utils/create-babel-parse-error.js": function srcLanguageJsParseUtilsCreateBabelParseErrorJs(l, h) {
        "use strict";

        U();
        var p = lr();

        function d(x) {
          var P = x.message,
              m = x.loc;
          return p(P.replace(/ \(.*\)/, ""), {
            start: {
              line: m ? m.line : 0,
              column: m ? m.column + 1 : 0
            }
          });
        }

        h.exports = d;
      }
    }),
        Hf = $({
      "src/language-js/utils/is-ts-keyword-type.js": function srcLanguageJsUtilsIsTsKeywordTypeJs(l, h) {
        "use strict";

        U();

        function p(d) {
          var x = d.type;
          return x.startsWith("TS") && x.endsWith("Keyword");
        }

        h.exports = p;
      }
    }),
        zf = $({
      "src/language-js/utils/is-block-comment.js": function srcLanguageJsUtilsIsBlockCommentJs(l, h) {
        "use strict";

        U();

        var p = new Set(["Block", "CommentBlock", "MultiLine"]),
            d = function d(x) {
          return p.has(x == null ? void 0 : x.type);
        };

        h.exports = d;
      }
    }),
        Vf = $({
      "src/language-js/utils/is-type-cast-comment.js": function srcLanguageJsUtilsIsTypeCastCommentJs(l, h) {
        "use strict";

        U();
        var p = zf();

        function d(x) {
          return p(x) && x.value[0] === "*" && /@(?:type|satisfies)\b/.test(x.value);
        }

        h.exports = d;
      }
    }),
        Kf = $({
      "src/utils/get-last.js": function srcUtilsGetLastJs(l, h) {
        "use strict";

        U();

        var p = function p(d) {
          return d[d.length - 1];
        };

        h.exports = p;
      }
    }),
        Wf = $({
      "src/language-js/parse/postprocess/visit-node.js": function srcLanguageJsParsePostprocessVisitNodeJs(l, h) {
        "use strict";

        U();

        function p(d, x) {
          if (Array.isArray(d)) {
            for (var P = 0; P < d.length; P++) {
              d[P] = p(d[P], x);
            }

            return d;
          }

          if (d && _typeof(d) == "object" && typeof d.type == "string") {
            var _P = Object.keys(d);

            for (var m = 0; m < _P.length; m++) {
              d[_P[m]] = p(d[_P[m]], x);
            }

            return x(d) || d;
          }

          return d;
        }

        h.exports = p;
      }
    }),
        Gf = $({
      "src/language-js/parse/postprocess/throw-syntax-error.js": function srcLanguageJsParsePostprocessThrowSyntaxErrorJs(l, h) {
        "use strict";

        U();
        var p = lr();

        function d(x, P) {
          var _x$loc = x.loc,
              m = _x$loc.start,
              v = _x$loc.end;
          throw p(P, {
            start: {
              line: m.line,
              column: m.column + 1
            },
            end: {
              line: v.line,
              column: v.column + 1
            }
          });
        }

        h.exports = d;
      }
    }),
        Jf = $({
      "src/language-js/parse/postprocess/index.js": function srcLanguageJsParsePostprocessIndexJs(l, h) {
        "use strict";

        U();

        var _No2 = No(),
            p = _No2.locStart,
            d = _No2.locEnd,
            x = Hf(),
            P = Vf(),
            m = Kf(),
            v = Wf(),
            S = Gf();

        function k(A, _) {
          if (_.parser !== "typescript" && _.parser !== "flow" && _.parser !== "acorn" && _.parser !== "espree" && _.parser !== "meriyah") {
            var N = new Set();
            A = v(A, function (O) {
              O.leadingComments && O.leadingComments.some(P) && N.add(p(O));
            }), A = v(A, function (O) {
              if (O.type === "ParenthesizedExpression") {
                var H = O.expression;
                if (H.type === "TypeCastExpression") return H.range = O.range, H;
                var R = p(O);
                if (!N.has(R)) return H.extra = Object.assign(Object.assign({}, H.extra), {}, {
                  parenthesized: !0
                }), H;
              }
            });
          }

          return A = v(A, function (N) {
            switch (N.type) {
              case "ChainExpression":
                return F(N.expression);

              case "LogicalExpression":
                {
                  if (w(N)) return L(N);
                  break;
                }

              case "VariableDeclaration":
                {
                  var O = m(N.declarations);
                  O && O.init && G(N, O);
                  break;
                }

              case "TSParenthesizedType":
                return x(N.typeAnnotation) || N.typeAnnotation.type === "TSThisType" || (N.typeAnnotation.range = [p(N), d(N)]), N.typeAnnotation;

              case "TSTypeParameter":
                if (typeof N.name == "string") {
                  var _O = p(N);

                  N.name = {
                    type: "Identifier",
                    name: N.name,
                    range: [_O, _O + N.name.length]
                  };
                }

                break;

              case "ObjectExpression":
                if (_.parser === "typescript") {
                  var _O2 = N.properties.find(function (H) {
                    return H.type === "Property" && H.value.type === "TSEmptyBodyFunctionExpression";
                  });

                  _O2 && S(_O2.value, "Unexpected token.");
                }

                break;

              case "SequenceExpression":
                {
                  var _O3 = m(N.expressions);

                  N.range = [p(N), Math.min(d(_O3), d(N))];
                  break;
                }

              case "TopicReference":
                _.__isUsingHackPipeline = !0;
                break;

              case "ExportAllDeclaration":
                {
                  var _O4 = N.exported;

                  if (_.parser === "meriyah" && _O4 && _O4.type === "Identifier") {
                    var H = _.originalText.slice(p(_O4), d(_O4));

                    (H.startsWith('"') || H.startsWith("'")) && (N.exported = Object.assign(Object.assign({}, N.exported), {}, {
                      type: "Literal",
                      value: N.exported.name,
                      raw: H
                    }));
                  }

                  break;
                }

              case "PropertyDefinition":
                if (_.parser === "meriyah" && N["static"] && !N.computed && !N.key) {
                  var _O5 = "static",
                      _H = p(N);

                  Object.assign(N, {
                    "static": !1,
                    key: {
                      type: "Identifier",
                      name: _O5,
                      range: [_H, _H + _O5.length]
                    }
                  });
                }

                break;
            }
          }), A;

          function G(N, O) {
            _.originalText[d(O)] !== ";" && (N.range = [p(N), d(O)]);
          }
        }

        function F(A) {
          switch (A.type) {
            case "CallExpression":
              A.type = "OptionalCallExpression", A.callee = F(A.callee);
              break;

            case "MemberExpression":
              A.type = "OptionalMemberExpression", A.object = F(A.object);
              break;

            case "TSNonNullExpression":
              A.expression = F(A.expression);
              break;
          }

          return A;
        }

        function w(A) {
          return A.type === "LogicalExpression" && A.right.type === "LogicalExpression" && A.operator === A.right.operator;
        }

        function L(A) {
          return w(A) ? L({
            type: "LogicalExpression",
            operator: A.operator,
            left: L({
              type: "LogicalExpression",
              operator: A.operator,
              left: A.left,
              right: A.right.left,
              range: [p(A.left), d(A.right.left)]
            }),
            right: A.right.right,
            range: [p(A), d(A)]
          }) : A;
        }

        h.exports = k;
      }
    }),
        Fo = $({
      "node_modules/@babel/parser/lib/index.js": function node_modulesBabelParserLibIndexJs(l) {
        "use strict";

        U(), Object.defineProperty(l, "__esModule", {
          value: !0
        });
        var h = {
          sourceType: "script",
          sourceFilename: void 0,
          startColumn: 0,
          startLine: 1,
          allowAwaitOutsideFunction: !1,
          allowReturnOutsideFunction: !1,
          allowNewTargetOutsideFunction: !1,
          allowImportExportEverywhere: !1,
          allowSuperOutsideMethod: !1,
          allowUndeclaredExports: !1,
          plugins: [],
          strictMode: null,
          ranges: !1,
          tokens: !1,
          createParenthesizedExpressions: !1,
          errorRecovery: !1,
          attachComment: !0,
          annexB: !0
        };

        function p(t) {
          if (t && t.annexB != null && t.annexB !== !1) throw new Error("The `annexB` option can only be set to `false`.");
          var r = {};

          for (var _i2 = 0, _Object$keys = Object.keys(h); _i2 < _Object$keys.length; _i2++) {
            var e = _Object$keys[_i2];
            r[e] = t && t[e] != null ? t[e] : h[e];
          }

          return r;
        }

        var d = function d(t, r) {
          _classCallCheck(this, d);

          this.token = void 0, this.preserveSpace = void 0, this.token = t, this.preserveSpace = !!r;
        },
            x = {
          brace: new d("{"),
          j_oTag: new d("<tag"),
          j_cTag: new d("</tag"),
          j_expr: new d("<tag>...</tag>", !0)
        };

        x.template = new d("`", !0);

        var P = !0,
            m = !0,
            v = !0,
            S = !0,
            k = !0,
            F = !0,
            w = function w(t) {
          _classCallCheck(this, w);

          var r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          this.label = void 0, this.keyword = void 0, this.beforeExpr = void 0, this.startsExpr = void 0, this.rightAssociative = void 0, this.isLoop = void 0, this.isAssign = void 0, this.prefix = void 0, this.postfix = void 0, this.binop = void 0, this.label = t, this.keyword = r.keyword, this.beforeExpr = !!r.beforeExpr, this.startsExpr = !!r.startsExpr, this.rightAssociative = !!r.rightAssociative, this.isLoop = !!r.isLoop, this.isAssign = !!r.isAssign, this.prefix = !!r.prefix, this.postfix = !!r.postfix, this.binop = r.binop != null ? r.binop : null, this.updateContext = null;
        },
            L = new Map();

        function A(t) {
          var r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          r.keyword = t;
          var e = b(t, r);
          return L.set(t, e), e;
        }

        function _(t, r) {
          return b(t, {
            beforeExpr: P,
            binop: r
          });
        }

        var G = -1,
            N = [],
            O = [],
            H = [],
            R = [],
            z = [],
            Q = [];

        function b(t) {
          var r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var e, s, i, a;
          return ++G, O.push(t), H.push((e = r.binop) != null ? e : -1), R.push((s = r.beforeExpr) != null ? s : !1), z.push((i = r.startsExpr) != null ? i : !1), Q.push((a = r.prefix) != null ? a : !1), N.push(new w(t, r)), G;
        }

        function B(t) {
          var r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var e, s, i, a;
          return ++G, L.set(t, G), O.push(t), H.push((e = r.binop) != null ? e : -1), R.push((s = r.beforeExpr) != null ? s : !1), z.push((i = r.startsExpr) != null ? i : !1), Q.push((a = r.prefix) != null ? a : !1), N.push(new w("name", r)), G;
        }

        var Z = {
          bracketL: b("[", {
            beforeExpr: P,
            startsExpr: m
          }),
          bracketHashL: b("#[", {
            beforeExpr: P,
            startsExpr: m
          }),
          bracketBarL: b("[|", {
            beforeExpr: P,
            startsExpr: m
          }),
          bracketR: b("]"),
          bracketBarR: b("|]"),
          braceL: b("{", {
            beforeExpr: P,
            startsExpr: m
          }),
          braceBarL: b("{|", {
            beforeExpr: P,
            startsExpr: m
          }),
          braceHashL: b("#{", {
            beforeExpr: P,
            startsExpr: m
          }),
          braceR: b("}"),
          braceBarR: b("|}"),
          parenL: b("(", {
            beforeExpr: P,
            startsExpr: m
          }),
          parenR: b(")"),
          comma: b(",", {
            beforeExpr: P
          }),
          semi: b(";", {
            beforeExpr: P
          }),
          colon: b(":", {
            beforeExpr: P
          }),
          doubleColon: b("::", {
            beforeExpr: P
          }),
          dot: b("."),
          question: b("?", {
            beforeExpr: P
          }),
          questionDot: b("?."),
          arrow: b("=>", {
            beforeExpr: P
          }),
          template: b("template"),
          ellipsis: b("...", {
            beforeExpr: P
          }),
          backQuote: b("`", {
            startsExpr: m
          }),
          dollarBraceL: b("${", {
            beforeExpr: P,
            startsExpr: m
          }),
          templateTail: b("...`", {
            startsExpr: m
          }),
          templateNonTail: b("...${", {
            beforeExpr: P,
            startsExpr: m
          }),
          at: b("@"),
          hash: b("#", {
            startsExpr: m
          }),
          interpreterDirective: b("#!..."),
          eq: b("=", {
            beforeExpr: P,
            isAssign: S
          }),
          assign: b("_=", {
            beforeExpr: P,
            isAssign: S
          }),
          slashAssign: b("_=", {
            beforeExpr: P,
            isAssign: S
          }),
          xorAssign: b("_=", {
            beforeExpr: P,
            isAssign: S
          }),
          moduloAssign: b("_=", {
            beforeExpr: P,
            isAssign: S
          }),
          incDec: b("++/--", {
            prefix: k,
            postfix: F,
            startsExpr: m
          }),
          bang: b("!", {
            beforeExpr: P,
            prefix: k,
            startsExpr: m
          }),
          tilde: b("~", {
            beforeExpr: P,
            prefix: k,
            startsExpr: m
          }),
          doubleCaret: b("^^", {
            startsExpr: m
          }),
          doubleAt: b("@@", {
            startsExpr: m
          }),
          pipeline: _("|>", 0),
          nullishCoalescing: _("??", 1),
          logicalOR: _("||", 1),
          logicalAND: _("&&", 2),
          bitwiseOR: _("|", 3),
          bitwiseXOR: _("^", 4),
          bitwiseAND: _("&", 5),
          equality: _("==/!=/===/!==", 6),
          lt: _("</>/<=/>=", 7),
          gt: _("</>/<=/>=", 7),
          relational: _("</>/<=/>=", 7),
          bitShift: _("<</>>/>>>", 8),
          bitShiftL: _("<</>>/>>>", 8),
          bitShiftR: _("<</>>/>>>", 8),
          plusMin: b("+/-", {
            beforeExpr: P,
            binop: 9,
            prefix: k,
            startsExpr: m
          }),
          modulo: b("%", {
            binop: 10,
            startsExpr: m
          }),
          star: b("*", {
            binop: 10
          }),
          slash: _("/", 10),
          exponent: b("**", {
            beforeExpr: P,
            binop: 11,
            rightAssociative: !0
          }),
          _in: A("in", {
            beforeExpr: P,
            binop: 7
          }),
          _instanceof: A("instanceof", {
            beforeExpr: P,
            binop: 7
          }),
          _break: A("break"),
          _case: A("case", {
            beforeExpr: P
          }),
          _catch: A("catch"),
          _continue: A("continue"),
          _debugger: A("debugger"),
          _default: A("default", {
            beforeExpr: P
          }),
          _else: A("else", {
            beforeExpr: P
          }),
          _finally: A("finally"),
          _function: A("function", {
            startsExpr: m
          }),
          _if: A("if"),
          _return: A("return", {
            beforeExpr: P
          }),
          _switch: A("switch"),
          _throw: A("throw", {
            beforeExpr: P,
            prefix: k,
            startsExpr: m
          }),
          _try: A("try"),
          _var: A("var"),
          _const: A("const"),
          _with: A("with"),
          _new: A("new", {
            beforeExpr: P,
            startsExpr: m
          }),
          _this: A("this", {
            startsExpr: m
          }),
          _super: A("super", {
            startsExpr: m
          }),
          _class: A("class", {
            startsExpr: m
          }),
          _extends: A("extends", {
            beforeExpr: P
          }),
          _export: A("export"),
          _import: A("import", {
            startsExpr: m
          }),
          _null: A("null", {
            startsExpr: m
          }),
          _true: A("true", {
            startsExpr: m
          }),
          _false: A("false", {
            startsExpr: m
          }),
          _typeof: A("typeof", {
            beforeExpr: P,
            prefix: k,
            startsExpr: m
          }),
          _void: A("void", {
            beforeExpr: P,
            prefix: k,
            startsExpr: m
          }),
          _delete: A("delete", {
            beforeExpr: P,
            prefix: k,
            startsExpr: m
          }),
          _do: A("do", {
            isLoop: v,
            beforeExpr: P
          }),
          _for: A("for", {
            isLoop: v
          }),
          _while: A("while", {
            isLoop: v
          }),
          _as: B("as", {
            startsExpr: m
          }),
          _assert: B("assert", {
            startsExpr: m
          }),
          _async: B("async", {
            startsExpr: m
          }),
          _await: B("await", {
            startsExpr: m
          }),
          _from: B("from", {
            startsExpr: m
          }),
          _get: B("get", {
            startsExpr: m
          }),
          _let: B("let", {
            startsExpr: m
          }),
          _meta: B("meta", {
            startsExpr: m
          }),
          _of: B("of", {
            startsExpr: m
          }),
          _sent: B("sent", {
            startsExpr: m
          }),
          _set: B("set", {
            startsExpr: m
          }),
          _static: B("static", {
            startsExpr: m
          }),
          _using: B("using", {
            startsExpr: m
          }),
          _yield: B("yield", {
            startsExpr: m
          }),
          _asserts: B("asserts", {
            startsExpr: m
          }),
          _checks: B("checks", {
            startsExpr: m
          }),
          _exports: B("exports", {
            startsExpr: m
          }),
          _global: B("global", {
            startsExpr: m
          }),
          _implements: B("implements", {
            startsExpr: m
          }),
          _intrinsic: B("intrinsic", {
            startsExpr: m
          }),
          _infer: B("infer", {
            startsExpr: m
          }),
          _is: B("is", {
            startsExpr: m
          }),
          _mixins: B("mixins", {
            startsExpr: m
          }),
          _proto: B("proto", {
            startsExpr: m
          }),
          _require: B("require", {
            startsExpr: m
          }),
          _satisfies: B("satisfies", {
            startsExpr: m
          }),
          _keyof: B("keyof", {
            startsExpr: m
          }),
          _readonly: B("readonly", {
            startsExpr: m
          }),
          _unique: B("unique", {
            startsExpr: m
          }),
          _abstract: B("abstract", {
            startsExpr: m
          }),
          _declare: B("declare", {
            startsExpr: m
          }),
          _enum: B("enum", {
            startsExpr: m
          }),
          _module: B("module", {
            startsExpr: m
          }),
          _namespace: B("namespace", {
            startsExpr: m
          }),
          _interface: B("interface", {
            startsExpr: m
          }),
          _type: B("type", {
            startsExpr: m
          }),
          _opaque: B("opaque", {
            startsExpr: m
          }),
          name: b("name", {
            startsExpr: m
          }),
          string: b("string", {
            startsExpr: m
          }),
          num: b("num", {
            startsExpr: m
          }),
          bigint: b("bigint", {
            startsExpr: m
          }),
          decimal: b("decimal", {
            startsExpr: m
          }),
          regexp: b("regexp", {
            startsExpr: m
          }),
          privateName: b("#name", {
            startsExpr: m
          }),
          eof: b("eof"),
          jsxName: b("jsxName"),
          jsxText: b("jsxText", {
            beforeExpr: !0
          }),
          jsxTagStart: b("jsxTagStart", {
            startsExpr: !0
          }),
          jsxTagEnd: b("jsxTagEnd"),
          placeholder: b("%%", {
            startsExpr: !0
          })
        };

        function q(t) {
          return t >= 93 && t <= 130;
        }

        function ue(t) {
          return t <= 92;
        }

        function te(t) {
          return t >= 58 && t <= 130;
        }

        function it(t) {
          return t >= 58 && t <= 134;
        }

        function se(t) {
          return R[t];
        }

        function He(t) {
          return z[t];
        }

        function Bo(t) {
          return t >= 29 && t <= 33;
        }

        function hr(t) {
          return t >= 127 && t <= 129;
        }

        function Mo(t) {
          return t >= 90 && t <= 92;
        }

        function $t(t) {
          return t >= 58 && t <= 92;
        }

        function _o(t) {
          return t >= 39 && t <= 59;
        }

        function Ro(t) {
          return t === 34;
        }

        function jo(t) {
          return Q[t];
        }

        function qo(t) {
          return t >= 119 && t <= 121;
        }

        function Uo(t) {
          return t >= 122 && t <= 128;
        }

        function xe(t) {
          return O[t];
        }

        function at(t) {
          return H[t];
        }

        function $o(t) {
          return t === 57;
        }

        function nt(t) {
          return t >= 24 && t <= 25;
        }

        function ce(t) {
          return N[t];
        }

        N[8].updateContext = function (t) {
          t.pop();
        }, N[5].updateContext = N[7].updateContext = N[23].updateContext = function (t) {
          t.push(x.brace);
        }, N[22].updateContext = function (t) {
          t[t.length - 1] === x.template ? t.pop() : t.push(x.template);
        }, N[140].updateContext = function (t) {
          t.push(x.j_expr, x.j_oTag);
        };

        function ot(t, r) {
          if (t == null) return {};
          var e = {},
              s = Object.keys(t),
              i,
              a;

          for (a = 0; a < s.length; a++) {
            i = s[a], !(r.indexOf(i) >= 0) && (e[i] = t[i]);
          }

          return e;
        }

        var ge = function ge(t, r, e) {
          _classCallCheck(this, ge);

          this.line = void 0, this.column = void 0, this.index = void 0, this.line = t, this.column = r, this.index = e;
        },
            lt = function lt(t, r) {
          _classCallCheck(this, lt);

          this.start = void 0, this.end = void 0, this.filename = void 0, this.identifierName = void 0, this.start = t, this.end = r;
        };

        function Y(t, r) {
          var e = t.line,
              s = t.column,
              i = t.index;
          return new ge(e, s + r, i + r);
        }

        var Ht = {
          SyntaxError: "BABEL_PARSER_SYNTAX_ERROR",
          SourceTypeModuleError: "BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED"
        },
            Ho = function Ho(t) {
          var r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : t.length - 1;
          return {
            get: function get() {
              return t.reduce(function (e, s) {
                return e[s];
              }, this);
            },
            set: function set(e) {
              t.reduce(function (s, i, a) {
                return a === r ? s[i] = e : s[i];
              }, this);
            }
          };
        },
            zo = function zo(t, r, e) {
          return Object.keys(e).map(function (s) {
            return [s, e[s]];
          }).filter(function (s) {
            var _s2 = _slicedToArray(s, 2),
                i = _s2[1];

            return !!i;
          }).map(function (s) {
            var _s3 = _slicedToArray(s, 2),
                i = _s3[0],
                a = _s3[1];

            return [i, typeof a == "function" ? {
              value: a,
              enumerable: !1
            } : typeof a.reflect == "string" ? Object.assign({}, a, Ho(a.reflect.split("."))) : a];
          }).reduce(function (s, i) {
            var _i3 = _slicedToArray(i, 2),
                a = _i3[0],
                n = _i3[1];

            return Object.defineProperty(s, a, Object.assign({
              configurable: !0
            }, n));
          }, Object.assign(new t(), r));
        },
            Vo = {
          ImportMetaOutsideModule: {
            message: "import.meta may appear only with 'sourceType: \"module\"'",
            code: Ht.SourceTypeModuleError
          },
          ImportOutsideModule: {
            message: "'import' and 'export' may appear only with 'sourceType: \"module\"'",
            code: Ht.SourceTypeModuleError
          }
        },
            ur = {
          ArrayPattern: "array destructuring pattern",
          AssignmentExpression: "assignment expression",
          AssignmentPattern: "assignment expression",
          ArrowFunctionExpression: "arrow function expression",
          ConditionalExpression: "conditional expression",
          CatchClause: "catch clause",
          ForOfStatement: "for-of statement",
          ForInStatement: "for-in statement",
          ForStatement: "for-loop",
          FormalParameters: "function parameter list",
          Identifier: "identifier",
          ImportSpecifier: "import specifier",
          ImportDefaultSpecifier: "import default specifier",
          ImportNamespaceSpecifier: "import namespace specifier",
          ObjectPattern: "object destructuring pattern",
          ParenthesizedExpression: "parenthesized expression",
          RestElement: "rest element",
          UpdateExpression: {
            "true": "prefix operation",
            "false": "postfix operation"
          },
          VariableDeclarator: "variable declaration",
          YieldExpression: "yield expression"
        },
            zt = function zt(t) {
          var r = t.type,
              e = t.prefix;
          return r === "UpdateExpression" ? ur.UpdateExpression[String(e)] : ur[r];
        },
            Ko = {
          AccessorIsGenerator: function AccessorIsGenerator(t) {
            var r = t.kind;
            return "A ".concat(r, "ter cannot be a generator.");
          },
          ArgumentsInClass: "'arguments' is only allowed in functions and class methods.",
          AsyncFunctionInSingleStatementContext: "Async functions can only be declared at the top level or inside a block.",
          AwaitBindingIdentifier: "Can not use 'await' as identifier inside an async function.",
          AwaitBindingIdentifierInStaticBlock: "Can not use 'await' as identifier inside a static block.",
          AwaitExpressionFormalParameter: "'await' is not allowed in async function parameters.",
          AwaitInUsingBinding: "'await' is not allowed to be used as a name in 'using' declarations.",
          AwaitNotInAsyncContext: "'await' is only allowed within async functions and at the top levels of modules.",
          AwaitNotInAsyncFunction: "'await' is only allowed within async functions.",
          BadGetterArity: "A 'get' accessor must not have any formal parameters.",
          BadSetterArity: "A 'set' accessor must have exactly one formal parameter.",
          BadSetterRestParameter: "A 'set' accessor function argument must not be a rest parameter.",
          ConstructorClassField: "Classes may not have a field named 'constructor'.",
          ConstructorClassPrivateField: "Classes may not have a private field named '#constructor'.",
          ConstructorIsAccessor: "Class constructor may not be an accessor.",
          ConstructorIsAsync: "Constructor can't be an async function.",
          ConstructorIsGenerator: "Constructor can't be a generator.",
          DeclarationMissingInitializer: function DeclarationMissingInitializer(t) {
            var r = t.kind;
            return "Missing initializer in ".concat(r, " declaration.");
          },
          DecoratorArgumentsOutsideParentheses: "Decorator arguments must be moved inside parentheses: use '@(decorator(args))' instead of '@(decorator)(args)'.",
          DecoratorBeforeExport: "Decorators must be placed *before* the 'export' keyword. Remove the 'decoratorsBeforeExport: true' option to use the 'export @decorator class {}' syntax.",
          DecoratorsBeforeAfterExport: "Decorators can be placed *either* before or after the 'export' keyword, but not in both locations at the same time.",
          DecoratorConstructor: "Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?",
          DecoratorExportClass: "Decorators must be placed *after* the 'export' keyword. Remove the 'decoratorsBeforeExport: false' option to use the '@decorator export class {}' syntax.",
          DecoratorSemicolon: "Decorators must not be followed by a semicolon.",
          DecoratorStaticBlock: "Decorators can't be used with a static block.",
          DeletePrivateField: "Deleting a private field is not allowed.",
          DestructureNamedImport: "ES2015 named imports do not destructure. Use another statement for destructuring after the import.",
          DuplicateConstructor: "Duplicate constructor in the same class.",
          DuplicateDefaultExport: "Only one default export allowed per module.",
          DuplicateExport: function DuplicateExport(t) {
            var r = t.exportName;
            return "`".concat(r, "` has already been exported. Exported identifiers must be unique.");
          },
          DuplicateProto: "Redefinition of __proto__ property.",
          DuplicateRegExpFlags: "Duplicate regular expression flag.",
          ElementAfterRest: "Rest element must be last element.",
          EscapedCharNotAnIdentifier: "Invalid Unicode escape.",
          ExportBindingIsString: function ExportBindingIsString(t) {
            var r = t.localName,
                e = t.exportName;
            return "A string literal cannot be used as an exported binding without `from`.\n- Did you mean `export { '".concat(r, "' as '").concat(e, "' } from 'some-module'`?");
          },
          ExportDefaultFromAsIdentifier: "'from' is not allowed as an identifier after 'export default'.",
          ForInOfLoopInitializer: function ForInOfLoopInitializer(t) {
            var r = t.type;
            return "'".concat(r === "ForInStatement" ? "for-in" : "for-of", "' loop variable declaration may not have an initializer.");
          },
          ForInUsing: "For-in loop may not start with 'using' declaration.",
          ForOfAsync: "The left-hand side of a for-of loop may not be 'async'.",
          ForOfLet: "The left-hand side of a for-of loop may not start with 'let'.",
          GeneratorInSingleStatementContext: "Generators can only be declared at the top level or inside a block.",
          IllegalBreakContinue: function IllegalBreakContinue(t) {
            var r = t.type;
            return "Unsyntactic ".concat(r === "BreakStatement" ? "break" : "continue", ".");
          },
          IllegalLanguageModeDirective: "Illegal 'use strict' directive in function with non-simple parameter list.",
          IllegalReturn: "'return' outside of function.",
          ImportBindingIsString: function ImportBindingIsString(t) {
            var r = t.importName;
            return "A string literal cannot be used as an imported binding.\n- Did you mean `import { \"".concat(r, "\" as foo }`?");
          },
          ImportCallArgumentTrailingComma: "Trailing comma is disallowed inside import(...) arguments.",
          ImportCallArity: function ImportCallArity(t) {
            var r = t.maxArgumentCount;
            return "`import()` requires exactly ".concat(r === 1 ? "one argument" : "one or two arguments", ".");
          },
          ImportCallNotNewExpression: "Cannot use new with import(...).",
          ImportCallSpreadArgument: "`...` is not allowed in `import()`.",
          ImportJSONBindingNotDefault: "A JSON module can only be imported with `default`.",
          ImportReflectionHasAssertion: "`import module x` cannot have assertions.",
          ImportReflectionNotBinding: 'Only `import module x from "./module"` is valid.',
          IncompatibleRegExpUVFlags: "The 'u' and 'v' regular expression flags cannot be enabled at the same time.",
          InvalidBigIntLiteral: "Invalid BigIntLiteral.",
          InvalidCodePoint: "Code point out of bounds.",
          InvalidCoverInitializedName: "Invalid shorthand property initializer.",
          InvalidDecimal: "Invalid decimal.",
          InvalidDigit: function InvalidDigit(t) {
            var r = t.radix;
            return "Expected number in radix ".concat(r, ".");
          },
          InvalidEscapeSequence: "Bad character escape sequence.",
          InvalidEscapeSequenceTemplate: "Invalid escape sequence in template.",
          InvalidEscapedReservedWord: function InvalidEscapedReservedWord(t) {
            var r = t.reservedWord;
            return "Escape sequence in keyword ".concat(r, ".");
          },
          InvalidIdentifier: function InvalidIdentifier(t) {
            var r = t.identifierName;
            return "Invalid identifier ".concat(r, ".");
          },
          InvalidLhs: function InvalidLhs(t) {
            var r = t.ancestor;
            return "Invalid left-hand side in ".concat(zt(r), ".");
          },
          InvalidLhsBinding: function InvalidLhsBinding(t) {
            var r = t.ancestor;
            return "Binding invalid left-hand side in ".concat(zt(r), ".");
          },
          InvalidNumber: "Invalid number.",
          InvalidOrMissingExponent: "Floating-point numbers require a valid exponent after the 'e'.",
          InvalidOrUnexpectedToken: function InvalidOrUnexpectedToken(t) {
            var r = t.unexpected;
            return "Unexpected character '".concat(r, "'.");
          },
          InvalidParenthesizedAssignment: "Invalid parenthesized assignment pattern.",
          InvalidPrivateFieldResolution: function InvalidPrivateFieldResolution(t) {
            var r = t.identifierName;
            return "Private name #".concat(r, " is not defined.");
          },
          InvalidPropertyBindingPattern: "Binding member expression.",
          InvalidRecordProperty: "Only properties and spread elements are allowed in record definitions.",
          InvalidRestAssignmentPattern: "Invalid rest operator's argument.",
          LabelRedeclaration: function LabelRedeclaration(t) {
            var r = t.labelName;
            return "Label '".concat(r, "' is already declared.");
          },
          LetInLexicalBinding: "'let' is not allowed to be used as a name in 'let' or 'const' declarations.",
          LineTerminatorBeforeArrow: "No line break is allowed before '=>'.",
          MalformedRegExpFlags: "Invalid regular expression flag.",
          MissingClassName: "A class name is required.",
          MissingEqInAssignment: "Only '=' operator can be used for specifying default value.",
          MissingSemicolon: "Missing semicolon.",
          MissingPlugin: function MissingPlugin(t) {
            var r = t.missingPlugin;
            return "This experimental syntax requires enabling the parser plugin: ".concat(r.map(function (e) {
              return JSON.stringify(e);
            }).join(", "), ".");
          },
          MissingOneOfPlugins: function MissingOneOfPlugins(t) {
            var r = t.missingPlugin;
            return "This experimental syntax requires enabling one of the following parser plugin(s): ".concat(r.map(function (e) {
              return JSON.stringify(e);
            }).join(", "), ".");
          },
          MissingUnicodeEscape: "Expecting Unicode escape sequence \\uXXXX.",
          MixingCoalesceWithLogical: "Nullish coalescing operator(??) requires parens when mixing with logical operators.",
          ModuleAttributeDifferentFromType: "The only accepted module attribute is `type`.",
          ModuleAttributeInvalidValue: "Only string literals are allowed as module attribute values.",
          ModuleAttributesWithDuplicateKeys: function ModuleAttributesWithDuplicateKeys(t) {
            var r = t.key;
            return "Duplicate key \"".concat(r, "\" is not allowed in module attributes.");
          },
          ModuleExportNameHasLoneSurrogate: function ModuleExportNameHasLoneSurrogate(t) {
            var r = t.surrogateCharCode;
            return "An export name cannot include a lone surrogate, found '\\u".concat(r.toString(16), "'.");
          },
          ModuleExportUndefined: function ModuleExportUndefined(t) {
            var r = t.localName;
            return "Export '".concat(r, "' is not defined.");
          },
          MultipleDefaultsInSwitch: "Multiple default clauses.",
          NewlineAfterThrow: "Illegal newline after throw.",
          NoCatchOrFinally: "Missing catch or finally clause.",
          NumberIdentifier: "Identifier directly after number.",
          NumericSeparatorInEscapeSequence: "Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.",
          ObsoleteAwaitStar: "'await*' has been removed from the async functions proposal. Use Promise.all() instead.",
          OptionalChainingNoNew: "Constructors in/after an Optional Chain are not allowed.",
          OptionalChainingNoTemplate: "Tagged Template Literals are not allowed in optionalChain.",
          OverrideOnConstructor: "'override' modifier cannot appear on a constructor declaration.",
          ParamDupe: "Argument name clash.",
          PatternHasAccessor: "Object pattern can't contain getter or setter.",
          PatternHasMethod: "Object pattern can't contain methods.",
          PrivateInExpectedIn: function PrivateInExpectedIn(t) {
            var r = t.identifierName;
            return "Private names are only allowed in property accesses (`obj.#".concat(r, "`) or in `in` expressions (`#").concat(r, " in obj`).");
          },
          PrivateNameRedeclaration: function PrivateNameRedeclaration(t) {
            var r = t.identifierName;
            return "Duplicate private name #".concat(r, ".");
          },
          RecordExpressionBarIncorrectEndSyntaxType: "Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
          RecordExpressionBarIncorrectStartSyntaxType: "Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
          RecordExpressionHashIncorrectStartSyntaxType: "Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.",
          RecordNoProto: "'__proto__' is not allowed in Record expressions.",
          RestTrailingComma: "Unexpected trailing comma after rest element.",
          SloppyFunction: "In non-strict mode code, functions can only be declared at top level or inside a block.",
          SloppyFunctionAnnexB: "In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.",
          StaticPrototype: "Classes may not have static property named prototype.",
          SuperNotAllowed: "`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?",
          SuperPrivateField: "Private fields can't be accessed on super.",
          TrailingDecorator: "Decorators must be attached to a class element.",
          TupleExpressionBarIncorrectEndSyntaxType: "Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
          TupleExpressionBarIncorrectStartSyntaxType: "Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
          TupleExpressionHashIncorrectStartSyntaxType: "Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.",
          UnexpectedArgumentPlaceholder: "Unexpected argument placeholder.",
          UnexpectedAwaitAfterPipelineBody: 'Unexpected "await" after pipeline body; await must have parentheses in minimal proposal.',
          UnexpectedDigitAfterHash: "Unexpected digit after hash token.",
          UnexpectedImportExport: "'import' and 'export' may only appear at the top level.",
          UnexpectedKeyword: function UnexpectedKeyword(t) {
            var r = t.keyword;
            return "Unexpected keyword '".concat(r, "'.");
          },
          UnexpectedLeadingDecorator: "Leading decorators must be attached to a class declaration.",
          UnexpectedLexicalDeclaration: "Lexical declaration cannot appear in a single-statement context.",
          UnexpectedNewTarget: "`new.target` can only be used in functions or class properties.",
          UnexpectedNumericSeparator: "A numeric separator is only allowed between two digits.",
          UnexpectedPrivateField: "Unexpected private name.",
          UnexpectedReservedWord: function UnexpectedReservedWord(t) {
            var r = t.reservedWord;
            return "Unexpected reserved word '".concat(r, "'.");
          },
          UnexpectedSuper: "'super' is only allowed in object methods and classes.",
          UnexpectedToken: function UnexpectedToken(t) {
            var r = t.expected,
                e = t.unexpected;
            return "Unexpected token".concat(e ? " '".concat(e, "'.") : "").concat(r ? ", expected \"".concat(r, "\"") : "");
          },
          UnexpectedTokenUnaryExponentiation: "Illegal expression. Wrap left hand side or entire exponentiation in parentheses.",
          UnexpectedUsingDeclaration: "Using declaration cannot appear in the top level when source type is `script`.",
          UnsupportedBind: "Binding should be performed on object property.",
          UnsupportedDecoratorExport: "A decorated export must export a class declaration.",
          UnsupportedDefaultExport: "Only expressions, functions or classes are allowed as the `default` export.",
          UnsupportedImport: "`import` can only be used in `import()` or `import.meta`.",
          UnsupportedMetaProperty: function UnsupportedMetaProperty(t) {
            var r = t.target,
                e = t.onlyValidPropertyName;
            return "The only valid meta property for ".concat(r, " is ").concat(r, ".").concat(e, ".");
          },
          UnsupportedParameterDecorator: "Decorators cannot be used to decorate parameters.",
          UnsupportedPropertyDecorator: "Decorators cannot be used to decorate object literal properties.",
          UnsupportedSuper: "'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).",
          UnterminatedComment: "Unterminated comment.",
          UnterminatedRegExp: "Unterminated regular expression.",
          UnterminatedString: "Unterminated string constant.",
          UnterminatedTemplate: "Unterminated template.",
          UsingDeclarationHasBindingPattern: "Using declaration cannot have destructuring patterns.",
          VarRedeclaration: function VarRedeclaration(t) {
            var r = t.identifierName;
            return "Identifier '".concat(r, "' has already been declared.");
          },
          YieldBindingIdentifier: "Can not use 'yield' as identifier inside a generator.",
          YieldInParameter: "Yield expression is not allowed in formal parameters.",
          ZeroDigitNumericSeparator: "Numeric separator can not be used after leading 0."
        },
            Wo = {
          StrictDelete: "Deleting local variable in strict mode.",
          StrictEvalArguments: function StrictEvalArguments(t) {
            var r = t.referenceName;
            return "Assigning to '".concat(r, "' in strict mode.");
          },
          StrictEvalArgumentsBinding: function StrictEvalArgumentsBinding(t) {
            var r = t.bindingName;
            return "Binding '".concat(r, "' in strict mode.");
          },
          StrictFunction: "In strict mode code, functions can only be declared at top level or inside a block.",
          StrictNumericEscape: "The only valid numeric escape in strict mode is '\\0'.",
          StrictOctalLiteral: "Legacy octal literals are not allowed in strict mode.",
          StrictWith: "'with' in strict mode."
        },
            Go = new Set(["ArrowFunctionExpression", "AssignmentExpression", "ConditionalExpression", "YieldExpression"]),
            Jo = {
          PipeBodyIsTighter: "Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.",
          PipeTopicRequiresHackPipes: 'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.',
          PipeTopicUnbound: "Topic reference is unbound; it must be inside a pipe body.",
          PipeTopicUnconfiguredToken: function PipeTopicUnconfiguredToken(t) {
            var r = t.token;
            return "Invalid topic token ".concat(r, ". In order to use ").concat(r, " as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"").concat(r, "\" }.");
          },
          PipeTopicUnused: "Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.",
          PipeUnparenthesizedBody: function PipeUnparenthesizedBody(t) {
            var r = t.type;
            return "Hack-style pipe body cannot be an unparenthesized ".concat(zt({
              type: r
            }), "; please wrap it in parentheses.");
          },
          PipelineBodyNoArrow: 'Unexpected arrow "=>" after pipeline body; arrow function in pipeline body must be parenthesized.',
          PipelineBodySequenceExpression: "Pipeline body may not be a comma-separated sequence expression.",
          PipelineHeadSequenceExpression: "Pipeline head should not be a comma-separated sequence expression.",
          PipelineTopicUnused: "Pipeline is in topic style but does not use topic reference.",
          PrimaryTopicNotAllowed: "Topic reference was used in a lexical context without topic binding.",
          PrimaryTopicRequiresSmartPipeline: 'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.'
        },
            Xo = ["toMessage"],
            Yo = ["message"];

        function Qo(t) {
          var r = t.toMessage,
              e = ot(t, Xo);
          return function s(i) {
            var a = i.loc,
                n = i.details;
            return zo(SyntaxError, Object.assign({}, e, {
              loc: a
            }), {
              clone: function clone() {
                var o = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {},
                    u = o.loc || {};
                return s({
                  loc: new ge("line" in u ? u.line : this.loc.line, "column" in u ? u.column : this.loc.column, "index" in u ? u.index : this.loc.index),
                  details: Object.assign({}, this.details, o.details)
                });
              },
              details: {
                value: n,
                enumerable: !1
              },
              message: {
                get: function get() {
                  return "".concat(r(this.details), " (").concat(this.loc.line, ":").concat(this.loc.column, ")");
                },
                set: function set(o) {
                  Object.defineProperty(this, "message", {
                    value: o
                  });
                }
              },
              pos: {
                reflect: "loc.index",
                enumerable: !0
              },
              missingPlugin: "missingPlugin" in n && {
                reflect: "details.missingPlugin",
                enumerable: !0
              }
            });
          };
        }

        function pe(t, r) {
          if (Array.isArray(t)) return function (s) {
            return pe(s, t[0]);
          };
          var e = {};

          var _loop2 = function _loop2() {
            var s = _Object$keys2[_i4];
            var i = t[s],
                a = typeof i == "string" ? {
              message: function message() {
                return i;
              }
            } : typeof i == "function" ? {
              message: i
            } : i,
                n = a.message,
                o = ot(a, Yo),
                u = typeof n == "string" ? function () {
              return n;
            } : n;
            e[s] = Qo(Object.assign({
              code: Ht.SyntaxError,
              reasonCode: s,
              toMessage: u
            }, r ? {
              syntaxPlugin: r
            } : {}, o));
          };

          for (var _i4 = 0, _Object$keys2 = Object.keys(t); _i4 < _Object$keys2.length; _i4++) {
            _loop2();
          }

          return e;
        }

        var f = Object.assign({}, pe(Vo), pe(Ko), pe(Wo), pe(_templateObject())(Jo)),
            Zo = Object.defineProperty,
            cr = function cr(t, r) {
          return Zo(t, r, {
            enumerable: !1,
            value: t[r]
          });
        };

        function ze(t) {
          return t.loc.start && cr(t.loc.start, "index"), t.loc.end && cr(t.loc.end, "index"), t;
        }

        var el = function el(t) {
          return (
            /*#__PURE__*/
            function (_t2) {
              _inherits(_class, _t2);

              function _class() {
                _classCallCheck(this, _class);

                return _possibleConstructorReturn(this, _getPrototypeOf(_class).apply(this, arguments));
              }

              _createClass(_class, [{
                key: "parse",
                value: function parse() {
                  var e = ze(_get(_getPrototypeOf(_class.prototype), "parse", this).call(this));
                  return this.options.tokens && (e.tokens = e.tokens.map(ze)), e;
                }
              }, {
                key: "parseRegExpLiteral",
                value: function parseRegExpLiteral(e) {
                  var s = e.pattern,
                      i = e.flags,
                      a = null;

                  try {
                    a = new RegExp(s, i);
                  } catch (_unused12) {}

                  var n = this.estreeParseLiteral(a);
                  return n.regex = {
                    pattern: s,
                    flags: i
                  }, n;
                }
              }, {
                key: "parseBigIntLiteral",
                value: function parseBigIntLiteral(e) {
                  var s;

                  try {
                    s = BigInt(e);
                  } catch (_unused13) {
                    s = null;
                  }

                  var i = this.estreeParseLiteral(s);
                  return i.bigint = String(i.value || e), i;
                }
              }, {
                key: "parseDecimalLiteral",
                value: function parseDecimalLiteral(e) {
                  var i = this.estreeParseLiteral(null);
                  return i.decimal = String(i.value || e), i;
                }
              }, {
                key: "estreeParseLiteral",
                value: function estreeParseLiteral(e) {
                  return this.parseLiteral(e, "Literal");
                }
              }, {
                key: "parseStringLiteral",
                value: function parseStringLiteral(e) {
                  return this.estreeParseLiteral(e);
                }
              }, {
                key: "parseNumericLiteral",
                value: function parseNumericLiteral(e) {
                  return this.estreeParseLiteral(e);
                }
              }, {
                key: "parseNullLiteral",
                value: function parseNullLiteral() {
                  return this.estreeParseLiteral(null);
                }
              }, {
                key: "parseBooleanLiteral",
                value: function parseBooleanLiteral(e) {
                  return this.estreeParseLiteral(e);
                }
              }, {
                key: "directiveToStmt",
                value: function directiveToStmt(e) {
                  var s = e.value;
                  delete e.value, s.type = "Literal", s.raw = s.extra.raw, s.value = s.extra.expressionValue;
                  var i = e;
                  return i.type = "ExpressionStatement", i.expression = s, i.directive = s.extra.rawValue, delete s.extra, i;
                }
              }, {
                key: "initFunction",
                value: function initFunction(e, s) {
                  _get(_getPrototypeOf(_class.prototype), "initFunction", this).call(this, e, s), e.expression = !1;
                }
              }, {
                key: "checkDeclaration",
                value: function checkDeclaration(e) {
                  e != null && this.isObjectProperty(e) ? this.checkDeclaration(e.value) : _get(_getPrototypeOf(_class.prototype), "checkDeclaration", this).call(this, e);
                }
              }, {
                key: "getObjectOrClassMethodParams",
                value: function getObjectOrClassMethodParams(e) {
                  return e.value.params;
                }
              }, {
                key: "isValidDirective",
                value: function isValidDirective(e) {
                  var s;
                  return e.type === "ExpressionStatement" && e.expression.type === "Literal" && typeof e.expression.value == "string" && !((s = e.expression.extra) != null && s.parenthesized);
                }
              }, {
                key: "parseBlockBody",
                value: function parseBlockBody(e, s, i, a, n) {
                  var _this = this;

                  _get(_getPrototypeOf(_class.prototype), "parseBlockBody", this).call(this, e, s, i, a, n);

                  var o = e.directives.map(function (u) {
                    return _this.directiveToStmt(u);
                  });
                  e.body = o.concat(e.body), delete e.directives;
                }
              }, {
                key: "pushClassMethod",
                value: function pushClassMethod(e, s, i, a, n, o) {
                  this.parseMethod(s, i, a, n, o, "ClassMethod", !0), s.typeParameters && (s.value.typeParameters = s.typeParameters, delete s.typeParameters), e.body.push(s);
                }
              }, {
                key: "parsePrivateName",
                value: function parsePrivateName() {
                  var e = _get(_getPrototypeOf(_class.prototype), "parsePrivateName", this).call(this);

                  return this.getPluginOption("estree", "classFeatures") ? this.convertPrivateNameToPrivateIdentifier(e) : e;
                }
              }, {
                key: "convertPrivateNameToPrivateIdentifier",
                value: function convertPrivateNameToPrivateIdentifier(e) {
                  var s = _get(_getPrototypeOf(_class.prototype), "getPrivateNameSV", this).call(this, e);

                  return e = e, delete e.id, e.name = s, e.type = "PrivateIdentifier", e;
                }
              }, {
                key: "isPrivateName",
                value: function isPrivateName(e) {
                  return this.getPluginOption("estree", "classFeatures") ? e.type === "PrivateIdentifier" : _get(_getPrototypeOf(_class.prototype), "isPrivateName", this).call(this, e);
                }
              }, {
                key: "getPrivateNameSV",
                value: function getPrivateNameSV(e) {
                  return this.getPluginOption("estree", "classFeatures") ? e.name : _get(_getPrototypeOf(_class.prototype), "getPrivateNameSV", this).call(this, e);
                }
              }, {
                key: "parseLiteral",
                value: function parseLiteral(e, s) {
                  var i = _get(_getPrototypeOf(_class.prototype), "parseLiteral", this).call(this, e, s);

                  return i.raw = i.extra.raw, delete i.extra, i;
                }
              }, {
                key: "parseFunctionBody",
                value: function parseFunctionBody(e, s) {
                  var i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;
                  _get(_getPrototypeOf(_class.prototype), "parseFunctionBody", this).call(this, e, s, i), e.expression = e.body.type !== "BlockStatement";
                }
              }, {
                key: "parseMethod",
                value: function parseMethod(e, s, i, a, n, o) {
                  var u = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : !1,
                      c = this.startNode();
                  return c.kind = e.kind, c = _get(_getPrototypeOf(_class.prototype), "parseMethod", this).call(this, c, s, i, a, n, o, u), c.type = "FunctionExpression", delete c.kind, e.value = c, o === "ClassPrivateMethod" && (e.computed = !1), this.finishNode(e, "MethodDefinition");
                }
              }, {
                key: "parseClassProperty",
                value: function parseClassProperty() {
                  var e = _get(_getPrototypeOf(_class.prototype), "parseClassProperty", this).apply(this, arguments);

                  return this.getPluginOption("estree", "classFeatures") && (e.type = "PropertyDefinition"), e;
                }
              }, {
                key: "parseClassPrivateProperty",
                value: function parseClassPrivateProperty() {
                  var e = _get(_getPrototypeOf(_class.prototype), "parseClassPrivateProperty", this).apply(this, arguments);

                  return this.getPluginOption("estree", "classFeatures") && (e.type = "PropertyDefinition", e.computed = !1), e;
                }
              }, {
                key: "parseObjectMethod",
                value: function parseObjectMethod(e, s, i, a, n) {
                  var o = _get(_getPrototypeOf(_class.prototype), "parseObjectMethod", this).call(this, e, s, i, a, n);

                  return o && (o.type = "Property", o.kind === "method" && (o.kind = "init"), o.shorthand = !1), o;
                }
              }, {
                key: "parseObjectProperty",
                value: function parseObjectProperty(e, s, i, a) {
                  var n = _get(_getPrototypeOf(_class.prototype), "parseObjectProperty", this).call(this, e, s, i, a);

                  return n && (n.kind = "init", n.type = "Property"), n;
                }
              }, {
                key: "isValidLVal",
                value: function isValidLVal(e, s, i) {
                  return e === "Property" ? "value" : _get(_getPrototypeOf(_class.prototype), "isValidLVal", this).call(this, e, s, i);
                }
              }, {
                key: "isAssignable",
                value: function isAssignable(e, s) {
                  return e != null && this.isObjectProperty(e) ? this.isAssignable(e.value, s) : _get(_getPrototypeOf(_class.prototype), "isAssignable", this).call(this, e, s);
                }
              }, {
                key: "toAssignable",
                value: function toAssignable(e) {
                  var s = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;

                  if (e != null && this.isObjectProperty(e)) {
                    var i = e.key,
                        a = e.value;
                    this.isPrivateName(i) && this.classScope.usePrivateName(this.getPrivateNameSV(i), i.loc.start), this.toAssignable(a, s);
                  } else _get(_getPrototypeOf(_class.prototype), "toAssignable", this).call(this, e, s);
                }
              }, {
                key: "toAssignableObjectExpressionProp",
                value: function toAssignableObjectExpressionProp(e, s, i) {
                  e.kind === "get" || e.kind === "set" ? this.raise(f.PatternHasAccessor, {
                    at: e.key
                  }) : e.method ? this.raise(f.PatternHasMethod, {
                    at: e.key
                  }) : _get(_getPrototypeOf(_class.prototype), "toAssignableObjectExpressionProp", this).call(this, e, s, i);
                }
              }, {
                key: "finishCallExpression",
                value: function finishCallExpression(e, s) {
                  var i = _get(_getPrototypeOf(_class.prototype), "finishCallExpression", this).call(this, e, s);

                  if (i.callee.type === "Import") {
                    if (i.type = "ImportExpression", i.source = i.arguments[0], this.hasPlugin("importAssertions")) {
                      var a;
                      i.attributes = (a = i.arguments[1]) != null ? a : null;
                    }

                    delete i.arguments, delete i.callee;
                  }

                  return i;
                }
              }, {
                key: "toReferencedArguments",
                value: function toReferencedArguments(e) {
                  e.type !== "ImportExpression" && _get(_getPrototypeOf(_class.prototype), "toReferencedArguments", this).call(this, e);
                }
              }, {
                key: "parseExport",
                value: function parseExport(e, s) {
                  var i = this.state.lastTokStartLoc,
                      a = _get(_getPrototypeOf(_class.prototype), "parseExport", this).call(this, e, s);

                  switch (a.type) {
                    case "ExportAllDeclaration":
                      a.exported = null;
                      break;

                    case "ExportNamedDeclaration":
                      a.specifiers.length === 1 && a.specifiers[0].type === "ExportNamespaceSpecifier" && (a.type = "ExportAllDeclaration", a.exported = a.specifiers[0].exported, delete a.specifiers);

                    case "ExportDefaultDeclaration":
                      {
                        var n;
                        var o = a.declaration;
                        (o == null ? void 0 : o.type) === "ClassDeclaration" && ((n = o.decorators) == null ? void 0 : n.length) > 0 && o.start === a.start && this.resetStartLocation(a, i);
                      }
                      break;
                  }

                  return a;
                }
              }, {
                key: "parseSubscript",
                value: function parseSubscript(e, s, i, a) {
                  var n = _get(_getPrototypeOf(_class.prototype), "parseSubscript", this).call(this, e, s, i, a);

                  if (a.optionalChainMember) {
                    if ((n.type === "OptionalMemberExpression" || n.type === "OptionalCallExpression") && (n.type = n.type.substring(8)), a.stop) {
                      var o = this.startNodeAtNode(n);
                      return o.expression = n, this.finishNode(o, "ChainExpression");
                    }
                  } else (n.type === "MemberExpression" || n.type === "CallExpression") && (n.optional = !1);

                  return n;
                }
              }, {
                key: "hasPropertyAsPrivateName",
                value: function hasPropertyAsPrivateName(e) {
                  return e.type === "ChainExpression" && (e = e.expression), _get(_getPrototypeOf(_class.prototype), "hasPropertyAsPrivateName", this).call(this, e);
                }
              }, {
                key: "isObjectProperty",
                value: function isObjectProperty(e) {
                  return e.type === "Property" && e.kind === "init" && !e.method;
                }
              }, {
                key: "isObjectMethod",
                value: function isObjectMethod(e) {
                  return e.method || e.kind === "get" || e.kind === "set";
                }
              }, {
                key: "finishNodeAt",
                value: function finishNodeAt(e, s, i) {
                  return ze(_get(_getPrototypeOf(_class.prototype), "finishNodeAt", this).call(this, e, s, i));
                }
              }, {
                key: "resetStartLocation",
                value: function resetStartLocation(e, s) {
                  _get(_getPrototypeOf(_class.prototype), "resetStartLocation", this).call(this, e, s), ze(e);
                }
              }, {
                key: "resetEndLocation",
                value: function resetEndLocation(e) {
                  var s = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.state.lastTokEndLoc;
                  _get(_getPrototypeOf(_class.prototype), "resetEndLocation", this).call(this, e, s), ze(e);
                }
              }]);

              return _class;
            }(t)
          );
        },
            Vt = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC",
            pr = "\u200C\u200D\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3C\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0CF3\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECE\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u180F-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1ABF-\u1ACE\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DFF\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F",
            tl = new RegExp("[" + Vt + "]"),
            sl = new RegExp("[" + Vt + pr + "]");

        Vt = pr = null;
        var fr = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 4026, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 757, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938, 6, 4191],
            rl = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 81, 2, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 9, 5351, 0, 7, 14, 13835, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 983, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];

        function Kt(t, r) {
          var e = 65536;

          for (var s = 0, i = r.length; s < i; s += 2) {
            if (e += r[s], e > t) return !1;
            if (e += r[s + 1], e >= t) return !0;
          }

          return !1;
        }

        function fe(t) {
          return t < 65 ? t === 36 : t <= 90 ? !0 : t < 97 ? t === 95 : t <= 122 ? !0 : t <= 65535 ? t >= 170 && tl.test(String.fromCharCode(t)) : Kt(t, fr);
        }

        function De(t) {
          return t < 48 ? t === 36 : t < 58 ? !0 : t < 65 ? !1 : t <= 90 ? !0 : t < 97 ? t === 95 : t <= 122 ? !0 : t <= 65535 ? t >= 170 && sl.test(String.fromCharCode(t)) : Kt(t, fr) || Kt(t, rl);
        }

        var Wt = {
          keyword: ["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete"],
          strict: ["implements", "interface", "let", "package", "private", "protected", "public", "static", "yield"],
          strictBind: ["eval", "arguments"]
        },
            il = new Set(Wt.keyword),
            al = new Set(Wt.strict),
            nl = new Set(Wt.strictBind);

        function dr(t, r) {
          return r && t === "await" || t === "enum";
        }

        function mr(t, r) {
          return dr(t, r) || al.has(t);
        }

        function yr(t) {
          return nl.has(t);
        }

        function xr(t, r) {
          return mr(t, r) || yr(t);
        }

        function ol(t) {
          return il.has(t);
        }

        function ll(t, r, e) {
          return t === 64 && r === 64 && fe(e);
        }

        var hl = new Set(["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete", "implements", "interface", "let", "package", "private", "protected", "public", "static", "yield", "eval", "arguments", "enum", "await"]);

        function ul(t) {
          return hl.has(t);
        }

        var Fe = 0,
            Le = 1,
            de = 2,
            Gt = 4,
            gr = 8,
            ht = 16,
            Pr = 32,
            Ee = 64,
            ut = 128,
            Oe = 256,
            ct = Le | de | ut | Oe,
            le = 1,
            Ce = 2,
            Ar = 4,
            be = 8,
            pt = 16,
            Tr = 64,
            ft = 128,
            Jt = 256,
            Xt = 512,
            Yt = 1024,
            Qt = 2048,
            Ve = 4096,
            dt = 8192,
            vr = le | Ce | be | ft | dt,
            Be = le | 0 | be | dt,
            cl = le | 0 | be | 0,
            mt = le | 0 | Ar | 0,
            Er = le | 0 | pt | 0,
            pl = 0 | Ce | 0 | ft,
            fl = 0 | Ce | 0 | 0,
            Cr = le | Ce | be | Jt | dt,
            br = 0 | Yt,
            Pe = 0 | Tr,
            dl = le | 0 | 0 | Tr,
            ml = Cr | Xt,
            yl = 0 | Yt,
            Sr = 0 | Ce | 0 | Ve,
            xl = Qt,
            yt = 4,
            Zt = 2,
            es = 1,
            ts = Zt | es,
            gl = Zt | yt,
            Pl = es | yt,
            Al = Zt,
            Tl = es,
            ss = 0,
            rs = function rs(t) {
          _classCallCheck(this, rs);

          this["var"] = new Set(), this.lexical = new Set(), this.functions = new Set(), this.flags = t;
        },
            is =
        /*#__PURE__*/
        function () {
          function is(t, r) {
            _classCallCheck(this, is);

            this.parser = void 0, this.scopeStack = [], this.inModule = void 0, this.undefinedExports = new Map(), this.parser = t, this.inModule = r;
          }

          _createClass(is, [{
            key: "createScope",
            value: function createScope(t) {
              return new rs(t);
            }
          }, {
            key: "enter",
            value: function enter(t) {
              this.scopeStack.push(this.createScope(t));
            }
          }, {
            key: "exit",
            value: function exit() {
              return this.scopeStack.pop().flags;
            }
          }, {
            key: "treatFunctionsAsVarInScope",
            value: function treatFunctionsAsVarInScope(t) {
              return !!(t.flags & (de | ut) || !this.parser.inModule && t.flags & Le);
            }
          }, {
            key: "declareName",
            value: function declareName(t, r, e) {
              var s = this.currentScope();
              if (r & be || r & pt) this.checkRedeclarationInScope(s, t, r, e), r & pt ? s.functions.add(t) : s.lexical.add(t), r & be && this.maybeExportDefined(s, t);else if (r & Ar) for (var i = this.scopeStack.length - 1; i >= 0 && (s = this.scopeStack[i], this.checkRedeclarationInScope(s, t, r, e), s["var"].add(t), this.maybeExportDefined(s, t), !(s.flags & ct)); --i) {
                ;
              }
              this.parser.inModule && s.flags & Le && this.undefinedExports["delete"](t);
            }
          }, {
            key: "maybeExportDefined",
            value: function maybeExportDefined(t, r) {
              this.parser.inModule && t.flags & Le && this.undefinedExports["delete"](r);
            }
          }, {
            key: "checkRedeclarationInScope",
            value: function checkRedeclarationInScope(t, r, e, s) {
              this.isRedeclaredInScope(t, r, e) && this.parser.raise(f.VarRedeclaration, {
                at: s,
                identifierName: r
              });
            }
          }, {
            key: "isRedeclaredInScope",
            value: function isRedeclaredInScope(t, r, e) {
              return e & le ? e & be ? t.lexical.has(r) || t.functions.has(r) || t["var"].has(r) : e & pt ? t.lexical.has(r) || !this.treatFunctionsAsVarInScope(t) && t["var"].has(r) : t.lexical.has(r) && !(t.flags & gr && t.lexical.values().next().value === r) || !this.treatFunctionsAsVarInScope(t) && t.functions.has(r) : !1;
            }
          }, {
            key: "checkLocalExport",
            value: function checkLocalExport(t) {
              var r = t.name,
                  e = this.scopeStack[0];
              !e.lexical.has(r) && !e["var"].has(r) && !e.functions.has(r) && this.undefinedExports.set(r, t.loc.start);
            }
          }, {
            key: "currentScope",
            value: function currentScope() {
              return this.scopeStack[this.scopeStack.length - 1];
            }
          }, {
            key: "currentVarScopeFlags",
            value: function currentVarScopeFlags() {
              for (var t = this.scopeStack.length - 1;; t--) {
                var r = this.scopeStack[t].flags;
                if (r & ct) return r;
              }
            }
          }, {
            key: "currentThisScopeFlags",
            value: function currentThisScopeFlags() {
              for (var t = this.scopeStack.length - 1;; t--) {
                var r = this.scopeStack[t].flags;
                if (r & (ct | Ee) && !(r & Gt)) return r;
              }
            }
          }, {
            key: "inTopLevel",
            get: function get() {
              return (this.currentScope().flags & Le) > 0;
            }
          }, {
            key: "inFunction",
            get: function get() {
              return (this.currentVarScopeFlags() & de) > 0;
            }
          }, {
            key: "allowSuper",
            get: function get() {
              return (this.currentThisScopeFlags() & ht) > 0;
            }
          }, {
            key: "allowDirectSuper",
            get: function get() {
              return (this.currentThisScopeFlags() & Pr) > 0;
            }
          }, {
            key: "inClass",
            get: function get() {
              return (this.currentThisScopeFlags() & Ee) > 0;
            }
          }, {
            key: "inClassAndNotInNonArrowFunction",
            get: function get() {
              var t = this.currentThisScopeFlags();
              return (t & Ee) > 0 && (t & de) === 0;
            }
          }, {
            key: "inStaticBlock",
            get: function get() {
              for (var t = this.scopeStack.length - 1;; t--) {
                var r = this.scopeStack[t].flags;
                if (r & ut) return !0;
                if (r & (ct | Ee)) return !1;
              }
            }
          }, {
            key: "inNonArrowFunction",
            get: function get() {
              return (this.currentThisScopeFlags() & de) > 0;
            }
          }, {
            key: "treatFunctionsAsVar",
            get: function get() {
              return this.treatFunctionsAsVarInScope(this.currentScope());
            }
          }]);

          return is;
        }(),
            vl =
        /*#__PURE__*/
        function (_rs) {
          _inherits(vl, _rs);

          function vl() {
            var _this2;

            _classCallCheck(this, vl);

            _this2 = _possibleConstructorReturn(this, _getPrototypeOf(vl).apply(this, arguments)), _this2.declareFunctions = new Set();
            return _this2;
          }

          return vl;
        }(rs),
            El =
        /*#__PURE__*/
        function (_is) {
          _inherits(El, _is);

          function El() {
            _classCallCheck(this, El);

            return _possibleConstructorReturn(this, _getPrototypeOf(El).apply(this, arguments));
          }

          _createClass(El, [{
            key: "createScope",
            value: function createScope(t) {
              return new vl(t);
            }
          }, {
            key: "declareName",
            value: function declareName(t, r, e) {
              var s = this.currentScope();

              if (r & Qt) {
                this.checkRedeclarationInScope(s, t, r, e), this.maybeExportDefined(s, t), s.declareFunctions.add(t);
                return;
              }

              _get(_getPrototypeOf(El.prototype), "declareName", this).call(this, t, r, e);
            }
          }, {
            key: "isRedeclaredInScope",
            value: function isRedeclaredInScope(t, r, e) {
              return _get(_getPrototypeOf(El.prototype), "isRedeclaredInScope", this).call(this, t, r, e) ? !0 : e & Qt ? !t.declareFunctions.has(r) && (t.lexical.has(r) || t.functions.has(r)) : !1;
            }
          }, {
            key: "checkLocalExport",
            value: function checkLocalExport(t) {
              this.scopeStack[0].declareFunctions.has(t.name) || _get(_getPrototypeOf(El.prototype), "checkLocalExport", this).call(this, t);
            }
          }]);

          return El;
        }(is),
            Cl =
        /*#__PURE__*/
        function () {
          function Cl() {
            _classCallCheck(this, Cl);

            this.sawUnambiguousESM = !1, this.ambiguousScriptDifferentAst = !1;
          }

          _createClass(Cl, [{
            key: "hasPlugin",
            value: function hasPlugin(t) {
              if (typeof t == "string") return this.plugins.has(t);
              {
                var _t3 = _slicedToArray(t, 2),
                    r = _t3[0],
                    e = _t3[1];

                if (!this.hasPlugin(r)) return !1;
                var s = this.plugins.get(r);

                for (var _i5 = 0, _Object$keys3 = Object.keys(e); _i5 < _Object$keys3.length; _i5++) {
                  var i = _Object$keys3[_i5];
                  if ((s == null ? void 0 : s[i]) !== e[i]) return !1;
                }

                return !0;
              }
            }
          }, {
            key: "getPluginOption",
            value: function getPluginOption(t, r) {
              var e;
              return (e = this.plugins.get(t)) == null ? void 0 : e[r];
            }
          }]);

          return Cl;
        }();

        function wr(t, r) {
          var _t$trailingComments;

          t.trailingComments === void 0 ? t.trailingComments = r : (_t$trailingComments = t.trailingComments).unshift.apply(_t$trailingComments, _toConsumableArray(r));
        }

        function bl(t, r) {
          var _t$leadingComments;

          t.leadingComments === void 0 ? t.leadingComments = r : (_t$leadingComments = t.leadingComments).unshift.apply(_t$leadingComments, _toConsumableArray(r));
        }

        function Ke(t, r) {
          var _t$innerComments;

          t.innerComments === void 0 ? t.innerComments = r : (_t$innerComments = t.innerComments).unshift.apply(_t$innerComments, _toConsumableArray(r));
        }

        function We(t, r, e) {
          var s = null,
              i = r.length;

          for (; s === null && i > 0;) {
            s = r[--i];
          }

          s === null || s.start > e.start ? Ke(t, e.comments) : wr(s, e.comments);
        }

        var Sl =
        /*#__PURE__*/
        function (_Cl) {
          _inherits(Sl, _Cl);

          function Sl() {
            _classCallCheck(this, Sl);

            return _possibleConstructorReturn(this, _getPrototypeOf(Sl).apply(this, arguments));
          }

          _createClass(Sl, [{
            key: "addComment",
            value: function addComment(t) {
              this.filename && (t.loc.filename = this.filename), this.state.comments.push(t);
            }
          }, {
            key: "processComment",
            value: function processComment(t) {
              var r = this.state.commentStack,
                  e = r.length;
              if (e === 0) return;
              var s = e - 1,
                  i = r[s];
              i.start === t.end && (i.leadingNode = t, s--);
              var a = t.start;

              for (; s >= 0; s--) {
                var n = r[s],
                    o = n.end;
                if (o > a) n.containingNode = t, this.finalizeComment(n), r.splice(s, 1);else {
                  o === a && (n.trailingNode = t);
                  break;
                }
              }
            }
          }, {
            key: "finalizeComment",
            value: function finalizeComment(t) {
              var r = t.comments;
              if (t.leadingNode !== null || t.trailingNode !== null) t.leadingNode !== null && wr(t.leadingNode, r), t.trailingNode !== null && bl(t.trailingNode, r);else {
                var e = t.containingNode,
                    s = t.start;
                if (this.input.charCodeAt(s - 1) === 44) switch (e.type) {
                  case "ObjectExpression":
                  case "ObjectPattern":
                  case "RecordExpression":
                    We(e, e.properties, t);
                    break;

                  case "CallExpression":
                  case "OptionalCallExpression":
                    We(e, e.arguments, t);
                    break;

                  case "FunctionDeclaration":
                  case "FunctionExpression":
                  case "ArrowFunctionExpression":
                  case "ObjectMethod":
                  case "ClassMethod":
                  case "ClassPrivateMethod":
                    We(e, e.params, t);
                    break;

                  case "ArrayExpression":
                  case "ArrayPattern":
                  case "TupleExpression":
                    We(e, e.elements, t);
                    break;

                  case "ExportNamedDeclaration":
                  case "ImportDeclaration":
                    We(e, e.specifiers, t);
                    break;

                  default:
                    Ke(e, r);
                } else Ke(e, r);
              }
            }
          }, {
            key: "finalizeRemainingComments",
            value: function finalizeRemainingComments() {
              var t = this.state.commentStack;

              for (var r = t.length - 1; r >= 0; r--) {
                this.finalizeComment(t[r]);
              }

              this.state.commentStack = [];
            }
          }, {
            key: "resetPreviousNodeTrailingComments",
            value: function resetPreviousNodeTrailingComments(t) {
              var r = this.state.commentStack,
                  e = r.length;
              if (e === 0) return;
              var s = r[e - 1];
              s.leadingNode === t && (s.leadingNode = null);
            }
          }, {
            key: "takeSurroundingComments",
            value: function takeSurroundingComments(t, r, e) {
              var s = this.state.commentStack,
                  i = s.length;
              if (i === 0) return;
              var a = i - 1;

              for (; a >= 0; a--) {
                var n = s[a],
                    o = n.end;
                if (n.start === e) n.leadingNode = t;else if (o === r) n.trailingNode = t;else if (o < r) break;
              }
            }
          }]);

          return Sl;
        }(Cl),
            as = /\r\n?|[\n\u2028\u2029]/,
            xt = new RegExp(as.source, "g");

        function Ge(t) {
          switch (t) {
            case 10:
            case 13:
            case 8232:
            case 8233:
              return !0;

            default:
              return !1;
          }
        }

        var ns = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g,
            wl = new RegExp("(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*", "y"),
            Ir = new RegExp("(?=(" + wl.source + "))\\1" + /(?=[\n\r\u2028\u2029]|\/\*(?!.*?\*\/)|$)/.source, "y");

        function Il(t) {
          switch (t) {
            case 9:
            case 11:
            case 12:
            case 32:
            case 160:
            case 5760:
            case 8192:
            case 8193:
            case 8194:
            case 8195:
            case 8196:
            case 8197:
            case 8198:
            case 8199:
            case 8200:
            case 8201:
            case 8202:
            case 8239:
            case 8287:
            case 12288:
            case 65279:
              return !0;

            default:
              return !1;
          }
        }

        var Nr =
        /*#__PURE__*/
        function () {
          function Nr() {
            _classCallCheck(this, Nr);

            this.strict = void 0, this.curLine = void 0, this.lineStart = void 0, this.startLoc = void 0, this.endLoc = void 0, this.errors = [], this.potentialArrowAt = -1, this.noArrowAt = [], this.noArrowParamsConversionAt = [], this.maybeInArrowParameters = !1, this.inType = !1, this.noAnonFunctionType = !1, this.hasFlowComment = !1, this.isAmbientContext = !1, this.inAbstractClass = !1, this.inDisallowConditionalTypesContext = !1, this.topicContext = {
              maxNumOfResolvableTopics: 0,
              maxTopicIndex: null
            }, this.soloAwait = !1, this.inFSharpPipelineDirectBody = !1, this.labels = [], this.comments = [], this.commentStack = [], this.pos = 0, this.type = 137, this.value = null, this.start = 0, this.end = 0, this.lastTokEndLoc = null, this.lastTokStartLoc = null, this.lastTokStart = 0, this.context = [x.brace], this.canStartJSXElement = !0, this.containsEsc = !1, this.firstInvalidTemplateEscapePos = null, this.strictErrors = new Map(), this.tokensLength = 0;
          }

          _createClass(Nr, [{
            key: "init",
            value: function init(t) {
              var r = t.strictMode,
                  e = t.sourceType,
                  s = t.startLine,
                  i = t.startColumn;
              this.strict = r === !1 ? !1 : r === !0 ? !0 : e === "module", this.curLine = s, this.lineStart = -i, this.startLoc = this.endLoc = new ge(s, i, 0);
            }
          }, {
            key: "curPosition",
            value: function curPosition() {
              return new ge(this.curLine, this.pos - this.lineStart, this.pos);
            }
          }, {
            key: "clone",
            value: function clone(t) {
              var r = new Nr(),
                  e = Object.keys(this);

              for (var s = 0, i = e.length; s < i; s++) {
                var a = e[s],
                    n = this[a];
                !t && Array.isArray(n) && (n = n.slice()), r[a] = n;
              }

              return r;
            }
          }]);

          return Nr;
        }(),
            Nl = function Nl(r) {
          return r >= 48 && r <= 57;
        },
            kr = {
          decBinOct: new Set([46, 66, 69, 79, 95, 98, 101, 111]),
          hex: new Set([46, 88, 95, 120])
        },
            gt = {
          bin: function bin(t) {
            return t === 48 || t === 49;
          },
          oct: function oct(t) {
            return t >= 48 && t <= 55;
          },
          dec: function dec(t) {
            return t >= 48 && t <= 57;
          },
          hex: function hex(t) {
            return t >= 48 && t <= 57 || t >= 65 && t <= 70 || t >= 97 && t <= 102;
          }
        };

        function Dr(t, r, e, s, i, a) {
          var n = e,
              o = s,
              u = i,
              c = "",
              y = null,
              g = e,
              T = r.length;

          for (;;) {
            if (e >= T) {
              a.unterminated(n, o, u), c += r.slice(g, e);
              break;
            }

            var C = r.charCodeAt(e);

            if (kl(t, C, r, e)) {
              c += r.slice(g, e);
              break;
            }

            if (C === 92) {
              var _M;

              c += r.slice(g, e);
              var M = Dl(r, e, s, i, t === "template", a);
              M.ch === null && !y ? y = {
                pos: e,
                lineStart: s,
                curLine: i
              } : c += M.ch, (_M = M, e = _M.pos, s = _M.lineStart, i = _M.curLine, _M), g = e;
            } else C === 8232 || C === 8233 ? (++e, ++i, s = e) : C === 10 || C === 13 ? t === "template" ? (c += r.slice(g, e) + "\n", ++e, C === 13 && r.charCodeAt(e) === 10 && ++e, ++i, g = s = e) : a.unterminated(n, o, u) : ++e;
          }

          return {
            pos: e,
            str: c,
            firstInvalidLoc: y,
            lineStart: s,
            curLine: i,
            containsInvalid: !!y
          };
        }

        function kl(t, r, e, s) {
          return t === "template" ? r === 96 || r === 36 && e.charCodeAt(s + 1) === 123 : r === (t === "double" ? 34 : 39);
        }

        function Dl(t, r, e, s, i, a) {
          var n = !i;
          r++;

          var o = function o(c) {
            return {
              pos: r,
              ch: c,
              lineStart: e,
              curLine: s
            };
          },
              u = t.charCodeAt(r++);

          switch (u) {
            case 110:
              return o("\n");

            case 114:
              return o("\r");

            case 120:
              {
                var _os;

                var c;
                return (_os = os(t, r, e, s, 2, !1, n, a), c = _os.code, r = _os.pos, _os), o(c === null ? null : String.fromCharCode(c));
              }

            case 117:
              {
                var _Lr;

                var _c2;

                return (_Lr = Lr(t, r, e, s, n, a), _c2 = _Lr.code, r = _Lr.pos, _Lr), o(_c2 === null ? null : String.fromCodePoint(_c2));
              }

            case 116:
              return o("	");

            case 98:
              return o("\b");

            case 118:
              return o("\v");

            case 102:
              return o("\f");

            case 13:
              t.charCodeAt(r) === 10 && ++r;

            case 10:
              e = r, ++s;

            case 8232:
            case 8233:
              return o("");

            case 56:
            case 57:
              if (i) return o(null);
              a.strictNumericEscape(r - 1, e, s);

            default:
              if (u >= 48 && u <= 55) {
                var _c3 = r - 1,
                    g = t.slice(_c3, r + 2).match(/^[0-7]+/)[0],
                    T = parseInt(g, 8);

                T > 255 && (g = g.slice(0, -1), T = parseInt(g, 8)), r += g.length - 1;
                var C = t.charCodeAt(r);

                if (g !== "0" || C === 56 || C === 57) {
                  if (i) return o(null);
                  a.strictNumericEscape(_c3, e, s);
                }

                return o(String.fromCharCode(T));
              }

              return o(String.fromCharCode(u));
          }
        }

        function os(t, r, e, s, i, a, n, o) {
          var _Fr;

          var u = r,
              c;
          return (_Fr = Fr(t, r, e, s, 16, i, a, !1, o, !n), c = _Fr.n, r = _Fr.pos, _Fr), c === null && (n ? o.invalidEscapeSequence(u, e, s) : r = u - 1), {
            code: c,
            pos: r
          };
        }

        function Fr(t, r, e, s, i, a, n, o, u, c) {
          var y = r,
              g = i === 16 ? kr.hex : kr.decBinOct,
              T = i === 16 ? gt.hex : i === 10 ? gt.dec : i === 8 ? gt.oct : gt.bin,
              C = !1,
              M = 0;

          for (var j = 0, K = a == null ? 1 / 0 : a; j < K; ++j) {
            var W = t.charCodeAt(r),
                V = void 0;

            if (W === 95 && o !== "bail") {
              var X = t.charCodeAt(r - 1),
                  je = t.charCodeAt(r + 1);

              if (o) {
                if (Number.isNaN(je) || !T(je) || g.has(X) || g.has(je)) {
                  if (c) return {
                    n: null,
                    pos: r
                  };
                  u.unexpectedNumericSeparator(r, e, s);
                }
              } else {
                if (c) return {
                  n: null,
                  pos: r
                };
                u.numericSeparatorInEscapeSequence(r, e, s);
              }

              ++r;
              continue;
            }

            if (W >= 97 ? V = W - 97 + 10 : W >= 65 ? V = W - 65 + 10 : Nl(W) ? V = W - 48 : V = 1 / 0, V >= i) {
              if (V <= 9 && c) return {
                n: null,
                pos: r
              };
              if (V <= 9 && u.invalidDigit(r, e, s, i)) V = 0;else if (n) V = 0, C = !0;else break;
            }

            ++r, M = M * i + V;
          }

          return r === y || a != null && r - y !== a || C ? {
            n: null,
            pos: r
          } : {
            n: M,
            pos: r
          };
        }

        function Lr(t, r, e, s, i, a) {
          var n = t.charCodeAt(r),
              o;

          if (n === 123) {
            var _os2;

            if (++r, (_os2 = os(t, r, e, s, t.indexOf("}", r) - r, !0, i, a), o = _os2.code, r = _os2.pos, _os2), ++r, o !== null && o > 1114111) if (i) a.invalidCodePoint(r, e, s);else return {
              code: null,
              pos: r
            };
          } else {
            var _os3 = os(t, r, e, s, 4, !1, i, a);

            o = _os3.code;
            r = _os3.pos;
          }

          return {
            code: o,
            pos: r
          };
        }

        var Fl = ["at"],
            Ll = ["at"];

        function Je(t, r, e) {
          return new ge(e, t - r, t);
        }

        var Ol = new Set([103, 109, 115, 105, 121, 117, 100, 118]),
            Ae = function Ae(t) {
          _classCallCheck(this, Ae);

          this.type = t.type, this.value = t.value, this.start = t.start, this.end = t.end, this.loc = new lt(t.startLoc, t.endLoc);
        },
            Bl =
        /*#__PURE__*/
        function (_Sl) {
          _inherits(Bl, _Sl);

          function Bl(t, r) {
            var _this3;

            _classCallCheck(this, Bl);

            _this3 = _possibleConstructorReturn(this, _getPrototypeOf(Bl).call(this)), _this3.isLookahead = void 0, _this3.tokens = [], _this3.errorHandlers_readInt = {
              invalidDigit: function invalidDigit(e, s, i, a) {
                return _this3.options.errorRecovery ? (_this3.raise(f.InvalidDigit, {
                  at: Je(e, s, i),
                  radix: a
                }), !0) : !1;
              },
              numericSeparatorInEscapeSequence: _this3.errorBuilder(f.NumericSeparatorInEscapeSequence),
              unexpectedNumericSeparator: _this3.errorBuilder(f.UnexpectedNumericSeparator)
            }, _this3.errorHandlers_readCodePoint = Object.assign({}, _this3.errorHandlers_readInt, {
              invalidEscapeSequence: _this3.errorBuilder(f.InvalidEscapeSequence),
              invalidCodePoint: _this3.errorBuilder(f.InvalidCodePoint)
            }), _this3.errorHandlers_readStringContents_string = Object.assign({}, _this3.errorHandlers_readCodePoint, {
              strictNumericEscape: function strictNumericEscape(e, s, i) {
                _this3.recordStrictModeErrors(f.StrictNumericEscape, {
                  at: Je(e, s, i)
                });
              },
              unterminated: function unterminated(e, s, i) {
                throw _this3.raise(f.UnterminatedString, {
                  at: Je(e - 1, s, i)
                });
              }
            }), _this3.errorHandlers_readStringContents_template = Object.assign({}, _this3.errorHandlers_readCodePoint, {
              strictNumericEscape: _this3.errorBuilder(f.StrictNumericEscape),
              unterminated: function unterminated(e, s, i) {
                throw _this3.raise(f.UnterminatedTemplate, {
                  at: Je(e, s, i)
                });
              }
            }), _this3.state = new Nr(), _this3.state.init(t), _this3.input = r, _this3.length = r.length, _this3.isLookahead = !1;
            return _this3;
          }

          _createClass(Bl, [{
            key: "pushToken",
            value: function pushToken(t) {
              this.tokens.length = this.state.tokensLength, this.tokens.push(t), ++this.state.tokensLength;
            }
          }, {
            key: "next",
            value: function next() {
              this.checkKeywordEscapes(), this.options.tokens && this.pushToken(new Ae(this.state)), this.state.lastTokStart = this.state.start, this.state.lastTokEndLoc = this.state.endLoc, this.state.lastTokStartLoc = this.state.startLoc, this.nextToken();
            }
          }, {
            key: "eat",
            value: function eat(t) {
              return this.match(t) ? (this.next(), !0) : !1;
            }
          }, {
            key: "match",
            value: function match(t) {
              return this.state.type === t;
            }
          }, {
            key: "createLookaheadState",
            value: function createLookaheadState(t) {
              return {
                pos: t.pos,
                value: null,
                type: t.type,
                start: t.start,
                end: t.end,
                context: [this.curContext()],
                inType: t.inType,
                startLoc: t.startLoc,
                lastTokEndLoc: t.lastTokEndLoc,
                curLine: t.curLine,
                lineStart: t.lineStart,
                curPosition: t.curPosition
              };
            }
          }, {
            key: "lookahead",
            value: function lookahead() {
              var t = this.state;
              this.state = this.createLookaheadState(t), this.isLookahead = !0, this.nextToken(), this.isLookahead = !1;
              var r = this.state;
              return this.state = t, r;
            }
          }, {
            key: "nextTokenStart",
            value: function nextTokenStart() {
              return this.nextTokenStartSince(this.state.pos);
            }
          }, {
            key: "nextTokenStartSince",
            value: function nextTokenStartSince(t) {
              return ns.lastIndex = t, ns.test(this.input) ? ns.lastIndex : t;
            }
          }, {
            key: "lookaheadCharCode",
            value: function lookaheadCharCode() {
              return this.input.charCodeAt(this.nextTokenStart());
            }
          }, {
            key: "codePointAtPos",
            value: function codePointAtPos(t) {
              var r = this.input.charCodeAt(t);

              if ((r & 64512) === 55296 && ++t < this.input.length) {
                var e = this.input.charCodeAt(t);
                (e & 64512) === 56320 && (r = 65536 + ((r & 1023) << 10) + (e & 1023));
              }

              return r;
            }
          }, {
            key: "setStrict",
            value: function setStrict(t) {
              var _this4 = this;

              this.state.strict = t, t && (this.state.strictErrors.forEach(function (r) {
                var _r2 = _slicedToArray(r, 2),
                    e = _r2[0],
                    s = _r2[1];

                return _this4.raise(e, {
                  at: s
                });
              }), this.state.strictErrors.clear());
            }
          }, {
            key: "curContext",
            value: function curContext() {
              return this.state.context[this.state.context.length - 1];
            }
          }, {
            key: "nextToken",
            value: function nextToken() {
              if (this.skipSpace(), this.state.start = this.state.pos, this.isLookahead || (this.state.startLoc = this.state.curPosition()), this.state.pos >= this.length) {
                this.finishToken(137);
                return;
              }

              this.getTokenFromCode(this.codePointAtPos(this.state.pos));
            }
          }, {
            key: "skipBlockComment",
            value: function skipBlockComment(t) {
              var r;
              this.isLookahead || (r = this.state.curPosition());
              var e = this.state.pos,
                  s = this.input.indexOf(t, e + 2);
              if (s === -1) throw this.raise(f.UnterminatedComment, {
                at: this.state.curPosition()
              });

              for (this.state.pos = s + t.length, xt.lastIndex = e + 2; xt.test(this.input) && xt.lastIndex <= s;) {
                ++this.state.curLine, this.state.lineStart = xt.lastIndex;
              }

              if (this.isLookahead) return;
              var i = {
                type: "CommentBlock",
                value: this.input.slice(e + 2, s),
                start: e,
                end: s + t.length,
                loc: new lt(r, this.state.curPosition())
              };
              return this.options.tokens && this.pushToken(i), i;
            }
          }, {
            key: "skipLineComment",
            value: function skipLineComment(t) {
              var r = this.state.pos,
                  e;
              this.isLookahead || (e = this.state.curPosition());
              var s = this.input.charCodeAt(this.state.pos += t);
              if (this.state.pos < this.length) for (; !Ge(s) && ++this.state.pos < this.length;) {
                s = this.input.charCodeAt(this.state.pos);
              }
              if (this.isLookahead) return;
              var i = this.state.pos,
                  n = {
                type: "CommentLine",
                value: this.input.slice(r + t, i),
                start: r,
                end: i,
                loc: new lt(e, this.state.curPosition())
              };
              return this.options.tokens && this.pushToken(n), n;
            }
          }, {
            key: "skipSpace",
            value: function skipSpace() {
              var t = this.state.pos,
                  r = [];

              e: for (; this.state.pos < this.length;) {
                var e = this.input.charCodeAt(this.state.pos);

                switch (e) {
                  case 32:
                  case 160:
                  case 9:
                    ++this.state.pos;
                    break;

                  case 13:
                    this.input.charCodeAt(this.state.pos + 1) === 10 && ++this.state.pos;

                  case 10:
                  case 8232:
                  case 8233:
                    ++this.state.pos, ++this.state.curLine, this.state.lineStart = this.state.pos;
                    break;

                  case 47:
                    switch (this.input.charCodeAt(this.state.pos + 1)) {
                      case 42:
                        {
                          var s = this.skipBlockComment("*/");
                          s !== void 0 && (this.addComment(s), this.options.attachComment && r.push(s));
                          break;
                        }

                      case 47:
                        {
                          var _s4 = this.skipLineComment(2);

                          _s4 !== void 0 && (this.addComment(_s4), this.options.attachComment && r.push(_s4));
                          break;
                        }

                      default:
                        break e;
                    }

                    break;

                  default:
                    if (Il(e)) ++this.state.pos;else if (e === 45 && !this.inModule && this.options.annexB) {
                      var _s5 = this.state.pos;

                      if (this.input.charCodeAt(_s5 + 1) === 45 && this.input.charCodeAt(_s5 + 2) === 62 && (t === 0 || this.state.lineStart > t)) {
                        var i = this.skipLineComment(3);
                        i !== void 0 && (this.addComment(i), this.options.attachComment && r.push(i));
                      } else break e;
                    } else if (e === 60 && !this.inModule && this.options.annexB) {
                      var _s6 = this.state.pos;

                      if (this.input.charCodeAt(_s6 + 1) === 33 && this.input.charCodeAt(_s6 + 2) === 45 && this.input.charCodeAt(_s6 + 3) === 45) {
                        var _i6 = this.skipLineComment(4);

                        _i6 !== void 0 && (this.addComment(_i6), this.options.attachComment && r.push(_i6));
                      } else break e;
                    } else break e;
                }
              }

              if (r.length > 0) {
                var _e2 = this.state.pos,
                    _s7 = {
                  start: t,
                  end: _e2,
                  comments: r,
                  leadingNode: null,
                  trailingNode: null,
                  containingNode: null
                };
                this.state.commentStack.push(_s7);
              }
            }
          }, {
            key: "finishToken",
            value: function finishToken(t, r) {
              this.state.end = this.state.pos, this.state.endLoc = this.state.curPosition();
              var e = this.state.type;
              this.state.type = t, this.state.value = r, this.isLookahead || this.updateContext(e);
            }
          }, {
            key: "replaceToken",
            value: function replaceToken(t) {
              this.state.type = t, this.updateContext();
            }
          }, {
            key: "readToken_numberSign",
            value: function readToken_numberSign() {
              if (this.state.pos === 0 && this.readToken_interpreter()) return;
              var t = this.state.pos + 1,
                  r = this.codePointAtPos(t);
              if (r >= 48 && r <= 57) throw this.raise(f.UnexpectedDigitAfterHash, {
                at: this.state.curPosition()
              });

              if (r === 123 || r === 91 && this.hasPlugin("recordAndTuple")) {
                if (this.expectPlugin("recordAndTuple"), this.getPluginOption("recordAndTuple", "syntaxType") === "bar") throw this.raise(r === 123 ? f.RecordExpressionHashIncorrectStartSyntaxType : f.TupleExpressionHashIncorrectStartSyntaxType, {
                  at: this.state.curPosition()
                });
                this.state.pos += 2, r === 123 ? this.finishToken(7) : this.finishToken(1);
              } else fe(r) ? (++this.state.pos, this.finishToken(136, this.readWord1(r))) : r === 92 ? (++this.state.pos, this.finishToken(136, this.readWord1())) : this.finishOp(27, 1);
            }
          }, {
            key: "readToken_dot",
            value: function readToken_dot() {
              var t = this.input.charCodeAt(this.state.pos + 1);

              if (t >= 48 && t <= 57) {
                this.readNumber(!0);
                return;
              }

              t === 46 && this.input.charCodeAt(this.state.pos + 2) === 46 ? (this.state.pos += 3, this.finishToken(21)) : (++this.state.pos, this.finishToken(16));
            }
          }, {
            key: "readToken_slash",
            value: function readToken_slash() {
              this.input.charCodeAt(this.state.pos + 1) === 61 ? this.finishOp(31, 2) : this.finishOp(56, 1);
            }
          }, {
            key: "readToken_interpreter",
            value: function readToken_interpreter() {
              if (this.state.pos !== 0 || this.length < 2) return !1;
              var t = this.input.charCodeAt(this.state.pos + 1);
              if (t !== 33) return !1;
              var r = this.state.pos;

              for (this.state.pos += 1; !Ge(t) && ++this.state.pos < this.length;) {
                t = this.input.charCodeAt(this.state.pos);
              }

              var e = this.input.slice(r + 2, this.state.pos);
              return this.finishToken(28, e), !0;
            }
          }, {
            key: "readToken_mult_modulo",
            value: function readToken_mult_modulo(t) {
              var r = t === 42 ? 55 : 54,
                  e = 1,
                  s = this.input.charCodeAt(this.state.pos + 1);
              t === 42 && s === 42 && (e++, s = this.input.charCodeAt(this.state.pos + 2), r = 57), s === 61 && !this.state.inType && (e++, r = t === 37 ? 33 : 30), this.finishOp(r, e);
            }
          }, {
            key: "readToken_pipe_amp",
            value: function readToken_pipe_amp(t) {
              var r = this.input.charCodeAt(this.state.pos + 1);

              if (r === t) {
                this.input.charCodeAt(this.state.pos + 2) === 61 ? this.finishOp(30, 3) : this.finishOp(t === 124 ? 41 : 42, 2);
                return;
              }

              if (t === 124) {
                if (r === 62) {
                  this.finishOp(39, 2);
                  return;
                }

                if (this.hasPlugin("recordAndTuple") && r === 125) {
                  if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") throw this.raise(f.RecordExpressionBarIncorrectEndSyntaxType, {
                    at: this.state.curPosition()
                  });
                  this.state.pos += 2, this.finishToken(9);
                  return;
                }

                if (this.hasPlugin("recordAndTuple") && r === 93) {
                  if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") throw this.raise(f.TupleExpressionBarIncorrectEndSyntaxType, {
                    at: this.state.curPosition()
                  });
                  this.state.pos += 2, this.finishToken(4);
                  return;
                }
              }

              if (r === 61) {
                this.finishOp(30, 2);
                return;
              }

              this.finishOp(t === 124 ? 43 : 45, 1);
            }
          }, {
            key: "readToken_caret",
            value: function readToken_caret() {
              var t = this.input.charCodeAt(this.state.pos + 1);
              t === 61 && !this.state.inType ? this.finishOp(32, 2) : t === 94 && this.hasPlugin(["pipelineOperator", {
                proposal: "hack",
                topicToken: "^^"
              }]) ? (this.finishOp(37, 2), this.input.codePointAt(this.state.pos) === 94 && this.unexpected()) : this.finishOp(44, 1);
            }
          }, {
            key: "readToken_atSign",
            value: function readToken_atSign() {
              this.input.charCodeAt(this.state.pos + 1) === 64 && this.hasPlugin(["pipelineOperator", {
                proposal: "hack",
                topicToken: "@@"
              }]) ? this.finishOp(38, 2) : this.finishOp(26, 1);
            }
          }, {
            key: "readToken_plus_min",
            value: function readToken_plus_min(t) {
              var r = this.input.charCodeAt(this.state.pos + 1);

              if (r === t) {
                this.finishOp(34, 2);
                return;
              }

              r === 61 ? this.finishOp(30, 2) : this.finishOp(53, 1);
            }
          }, {
            key: "readToken_lt",
            value: function readToken_lt() {
              var t = this.state.pos,
                  r = this.input.charCodeAt(t + 1);

              if (r === 60) {
                if (this.input.charCodeAt(t + 2) === 61) {
                  this.finishOp(30, 3);
                  return;
                }

                this.finishOp(51, 2);
                return;
              }

              if (r === 61) {
                this.finishOp(49, 2);
                return;
              }

              this.finishOp(47, 1);
            }
          }, {
            key: "readToken_gt",
            value: function readToken_gt() {
              var t = this.state.pos,
                  r = this.input.charCodeAt(t + 1);

              if (r === 62) {
                var e = this.input.charCodeAt(t + 2) === 62 ? 3 : 2;

                if (this.input.charCodeAt(t + e) === 61) {
                  this.finishOp(30, e + 1);
                  return;
                }

                this.finishOp(52, e);
                return;
              }

              if (r === 61) {
                this.finishOp(49, 2);
                return;
              }

              this.finishOp(48, 1);
            }
          }, {
            key: "readToken_eq_excl",
            value: function readToken_eq_excl(t) {
              var r = this.input.charCodeAt(this.state.pos + 1);

              if (r === 61) {
                this.finishOp(46, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);
                return;
              }

              if (t === 61 && r === 62) {
                this.state.pos += 2, this.finishToken(19);
                return;
              }

              this.finishOp(t === 61 ? 29 : 35, 1);
            }
          }, {
            key: "readToken_question",
            value: function readToken_question() {
              var t = this.input.charCodeAt(this.state.pos + 1),
                  r = this.input.charCodeAt(this.state.pos + 2);
              t === 63 ? r === 61 ? this.finishOp(30, 3) : this.finishOp(40, 2) : t === 46 && !(r >= 48 && r <= 57) ? (this.state.pos += 2, this.finishToken(18)) : (++this.state.pos, this.finishToken(17));
            }
          }, {
            key: "getTokenFromCode",
            value: function getTokenFromCode(t) {
              switch (t) {
                case 46:
                  this.readToken_dot();
                  return;

                case 40:
                  ++this.state.pos, this.finishToken(10);
                  return;

                case 41:
                  ++this.state.pos, this.finishToken(11);
                  return;

                case 59:
                  ++this.state.pos, this.finishToken(13);
                  return;

                case 44:
                  ++this.state.pos, this.finishToken(12);
                  return;

                case 91:
                  if (this.hasPlugin("recordAndTuple") && this.input.charCodeAt(this.state.pos + 1) === 124) {
                    if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") throw this.raise(f.TupleExpressionBarIncorrectStartSyntaxType, {
                      at: this.state.curPosition()
                    });
                    this.state.pos += 2, this.finishToken(2);
                  } else ++this.state.pos, this.finishToken(0);

                  return;

                case 93:
                  ++this.state.pos, this.finishToken(3);
                  return;

                case 123:
                  if (this.hasPlugin("recordAndTuple") && this.input.charCodeAt(this.state.pos + 1) === 124) {
                    if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") throw this.raise(f.RecordExpressionBarIncorrectStartSyntaxType, {
                      at: this.state.curPosition()
                    });
                    this.state.pos += 2, this.finishToken(6);
                  } else ++this.state.pos, this.finishToken(5);

                  return;

                case 125:
                  ++this.state.pos, this.finishToken(8);
                  return;

                case 58:
                  this.hasPlugin("functionBind") && this.input.charCodeAt(this.state.pos + 1) === 58 ? this.finishOp(15, 2) : (++this.state.pos, this.finishToken(14));
                  return;

                case 63:
                  this.readToken_question();
                  return;

                case 96:
                  this.readTemplateToken();
                  return;

                case 48:
                  {
                    var r = this.input.charCodeAt(this.state.pos + 1);

                    if (r === 120 || r === 88) {
                      this.readRadixNumber(16);
                      return;
                    }

                    if (r === 111 || r === 79) {
                      this.readRadixNumber(8);
                      return;
                    }

                    if (r === 98 || r === 66) {
                      this.readRadixNumber(2);
                      return;
                    }
                  }

                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                  this.readNumber(!1);
                  return;

                case 34:
                case 39:
                  this.readString(t);
                  return;

                case 47:
                  this.readToken_slash();
                  return;

                case 37:
                case 42:
                  this.readToken_mult_modulo(t);
                  return;

                case 124:
                case 38:
                  this.readToken_pipe_amp(t);
                  return;

                case 94:
                  this.readToken_caret();
                  return;

                case 43:
                case 45:
                  this.readToken_plus_min(t);
                  return;

                case 60:
                  this.readToken_lt();
                  return;

                case 62:
                  this.readToken_gt();
                  return;

                case 61:
                case 33:
                  this.readToken_eq_excl(t);
                  return;

                case 126:
                  this.finishOp(36, 1);
                  return;

                case 64:
                  this.readToken_atSign();
                  return;

                case 35:
                  this.readToken_numberSign();
                  return;

                case 92:
                  this.readWord();
                  return;

                default:
                  if (fe(t)) {
                    this.readWord(t);
                    return;
                  }

              }

              throw this.raise(f.InvalidOrUnexpectedToken, {
                at: this.state.curPosition(),
                unexpected: String.fromCodePoint(t)
              });
            }
          }, {
            key: "finishOp",
            value: function finishOp(t, r) {
              var e = this.input.slice(this.state.pos, this.state.pos + r);
              this.state.pos += r, this.finishToken(t, e);
            }
          }, {
            key: "readRegexp",
            value: function readRegexp() {
              var t = this.state.startLoc,
                  r = this.state.start + 1,
                  e,
                  s,
                  i = this.state.pos;

              for (;; ++i) {
                if (i >= this.length) throw this.raise(f.UnterminatedRegExp, {
                  at: Y(t, 1)
                });
                var u = this.input.charCodeAt(i);
                if (Ge(u)) throw this.raise(f.UnterminatedRegExp, {
                  at: Y(t, 1)
                });
                if (e) e = !1;else {
                  if (u === 91) s = !0;else if (u === 93 && s) s = !1;else if (u === 47 && !s) break;
                  e = u === 92;
                }
              }

              var a = this.input.slice(r, i);
              ++i;

              var n = "",
                  o = function o() {
                return Y(t, i + 2 - r);
              };

              for (; i < this.length;) {
                var _u2 = this.codePointAtPos(i),
                    c = String.fromCharCode(_u2);

                if (Ol.has(_u2)) _u2 === 118 ? (this.expectPlugin("regexpUnicodeSets", o()), n.includes("u") && this.raise(f.IncompatibleRegExpUVFlags, {
                  at: o()
                })) : _u2 === 117 && n.includes("v") && this.raise(f.IncompatibleRegExpUVFlags, {
                  at: o()
                }), n.includes(c) && this.raise(f.DuplicateRegExpFlags, {
                  at: o()
                });else if (De(_u2) || _u2 === 92) this.raise(f.MalformedRegExpFlags, {
                  at: o()
                });else break;
                ++i, n += c;
              }

              this.state.pos = i, this.finishToken(135, {
                pattern: a,
                flags: n
              });
            }
          }, {
            key: "readInt",
            value: function readInt(t, r) {
              var e = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1,
                  s = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !0,
                  _Fr2 = Fr(this.input, this.state.pos, this.state.lineStart, this.state.curLine, t, r, e, s, this.errorHandlers_readInt, !1),
                  i = _Fr2.n,
                  a = _Fr2.pos;

              return this.state.pos = a, i;
            }
          }, {
            key: "readRadixNumber",
            value: function readRadixNumber(t) {
              var r = this.state.curPosition(),
                  e = !1;
              this.state.pos += 2;
              var s = this.readInt(t);
              s == null && this.raise(f.InvalidDigit, {
                at: Y(r, 2),
                radix: t
              });
              var i = this.input.charCodeAt(this.state.pos);
              if (i === 110) ++this.state.pos, e = !0;else if (i === 109) throw this.raise(f.InvalidDecimal, {
                at: r
              });
              if (fe(this.codePointAtPos(this.state.pos))) throw this.raise(f.NumberIdentifier, {
                at: this.state.curPosition()
              });

              if (e) {
                var a = this.input.slice(r.index, this.state.pos).replace(/[_n]/g, "");
                this.finishToken(133, a);
                return;
              }

              this.finishToken(132, s);
            }
          }, {
            key: "readNumber",
            value: function readNumber(t) {
              var r = this.state.pos,
                  e = this.state.curPosition(),
                  s = !1,
                  i = !1,
                  a = !1,
                  n = !1,
                  o = !1;
              !t && this.readInt(10) === null && this.raise(f.InvalidNumber, {
                at: this.state.curPosition()
              });
              var u = this.state.pos - r >= 2 && this.input.charCodeAt(r) === 48;

              if (u) {
                var T = this.input.slice(r, this.state.pos);

                if (this.recordStrictModeErrors(f.StrictOctalLiteral, {
                  at: e
                }), !this.state.strict) {
                  var C = T.indexOf("_");
                  C > 0 && this.raise(f.ZeroDigitNumericSeparator, {
                    at: Y(e, C)
                  });
                }

                o = u && !/[89]/.test(T);
              }

              var c = this.input.charCodeAt(this.state.pos);
              if (c === 46 && !o && (++this.state.pos, this.readInt(10), s = !0, c = this.input.charCodeAt(this.state.pos)), (c === 69 || c === 101) && !o && (c = this.input.charCodeAt(++this.state.pos), (c === 43 || c === 45) && ++this.state.pos, this.readInt(10) === null && this.raise(f.InvalidOrMissingExponent, {
                at: e
              }), s = !0, n = !0, c = this.input.charCodeAt(this.state.pos)), c === 110 && ((s || u) && this.raise(f.InvalidBigIntLiteral, {
                at: e
              }), ++this.state.pos, i = !0), c === 109 && (this.expectPlugin("decimal", this.state.curPosition()), (n || u) && this.raise(f.InvalidDecimal, {
                at: e
              }), ++this.state.pos, a = !0), fe(this.codePointAtPos(this.state.pos))) throw this.raise(f.NumberIdentifier, {
                at: this.state.curPosition()
              });
              var y = this.input.slice(r, this.state.pos).replace(/[_mn]/g, "");

              if (i) {
                this.finishToken(133, y);
                return;
              }

              if (a) {
                this.finishToken(134, y);
                return;
              }

              var g = o ? parseInt(y, 8) : parseFloat(y);
              this.finishToken(132, g);
            }
          }, {
            key: "readCodePoint",
            value: function readCodePoint(t) {
              var _Lr2 = Lr(this.input, this.state.pos, this.state.lineStart, this.state.curLine, t, this.errorHandlers_readCodePoint),
                  r = _Lr2.code,
                  e = _Lr2.pos;

              return this.state.pos = e, r;
            }
          }, {
            key: "readString",
            value: function readString(t) {
              var _Dr = Dr(t === 34 ? "double" : "single", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_string),
                  r = _Dr.str,
                  e = _Dr.pos,
                  s = _Dr.curLine,
                  i = _Dr.lineStart;

              this.state.pos = e + 1, this.state.lineStart = i, this.state.curLine = s, this.finishToken(131, r);
            }
          }, {
            key: "readTemplateContinuation",
            value: function readTemplateContinuation() {
              this.match(8) || this.unexpected(null, 8), this.state.pos--, this.readTemplateToken();
            }
          }, {
            key: "readTemplateToken",
            value: function readTemplateToken() {
              var t = this.input[this.state.pos],
                  _Dr2 = Dr("template", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_template),
                  r = _Dr2.str,
                  e = _Dr2.firstInvalidLoc,
                  s = _Dr2.pos,
                  i = _Dr2.curLine,
                  a = _Dr2.lineStart;

              this.state.pos = s + 1, this.state.lineStart = a, this.state.curLine = i, e && (this.state.firstInvalidTemplateEscapePos = new ge(e.curLine, e.pos - e.lineStart, e.pos)), this.input.codePointAt(s) === 96 ? this.finishToken(24, e ? null : t + r + "`") : (this.state.pos++, this.finishToken(25, e ? null : t + r + "${"));
            }
          }, {
            key: "recordStrictModeErrors",
            value: function recordStrictModeErrors(t, r) {
              var e = r.at,
                  s = e.index;
              this.state.strict && !this.state.strictErrors.has(s) ? this.raise(t, {
                at: e
              }) : this.state.strictErrors.set(s, [t, e]);
            }
          }, {
            key: "readWord1",
            value: function readWord1(t) {
              this.state.containsEsc = !1;
              var r = "",
                  e = this.state.pos,
                  s = this.state.pos;

              for (t !== void 0 && (this.state.pos += t <= 65535 ? 1 : 2); this.state.pos < this.length;) {
                var i = this.codePointAtPos(this.state.pos);
                if (De(i)) this.state.pos += i <= 65535 ? 1 : 2;else if (i === 92) {
                  this.state.containsEsc = !0, r += this.input.slice(s, this.state.pos);
                  var a = this.state.curPosition(),
                      n = this.state.pos === e ? fe : De;

                  if (this.input.charCodeAt(++this.state.pos) !== 117) {
                    this.raise(f.MissingUnicodeEscape, {
                      at: this.state.curPosition()
                    }), s = this.state.pos - 1;
                    continue;
                  }

                  ++this.state.pos;
                  var o = this.readCodePoint(!0);
                  o !== null && (n(o) || this.raise(f.EscapedCharNotAnIdentifier, {
                    at: a
                  }), r += String.fromCodePoint(o)), s = this.state.pos;
                } else break;
              }

              return r + this.input.slice(s, this.state.pos);
            }
          }, {
            key: "readWord",
            value: function readWord(t) {
              var r = this.readWord1(t),
                  e = L.get(r);
              e !== void 0 ? this.finishToken(e, xe(e)) : this.finishToken(130, r);
            }
          }, {
            key: "checkKeywordEscapes",
            value: function checkKeywordEscapes() {
              var t = this.state.type;
              $t(t) && this.state.containsEsc && this.raise(f.InvalidEscapedReservedWord, {
                at: this.state.startLoc,
                reservedWord: xe(t)
              });
            }
          }, {
            key: "raise",
            value: function raise(t, r) {
              var e = r.at,
                  s = ot(r, Fl),
                  i = e instanceof ge ? e : e.loc.start,
                  a = t({
                loc: i,
                details: s
              });
              if (!this.options.errorRecovery) throw a;
              return this.isLookahead || this.state.errors.push(a), a;
            }
          }, {
            key: "raiseOverwrite",
            value: function raiseOverwrite(t, r) {
              var e = r.at,
                  s = ot(r, Ll),
                  i = e instanceof ge ? e : e.loc.start,
                  a = i.index,
                  n = this.state.errors;

              for (var o = n.length - 1; o >= 0; o--) {
                var u = n[o];
                if (u.loc.index === a) return n[o] = t({
                  loc: i,
                  details: s
                });
                if (u.loc.index < a) break;
              }

              return this.raise(t, r);
            }
          }, {
            key: "updateContext",
            value: function updateContext(t) {}
          }, {
            key: "unexpected",
            value: function unexpected(t, r) {
              throw this.raise(f.UnexpectedToken, {
                expected: r ? xe(r) : null,
                at: t != null ? t : this.state.startLoc
              });
            }
          }, {
            key: "expectPlugin",
            value: function expectPlugin(t, r) {
              if (this.hasPlugin(t)) return !0;
              throw this.raise(f.MissingPlugin, {
                at: r != null ? r : this.state.startLoc,
                missingPlugin: [t]
              });
            }
          }, {
            key: "expectOnePlugin",
            value: function expectOnePlugin(t) {
              var _this5 = this;

              if (!t.some(function (r) {
                return _this5.hasPlugin(r);
              })) throw this.raise(f.MissingOneOfPlugins, {
                at: this.state.startLoc,
                missingPlugin: t
              });
            }
          }, {
            key: "errorBuilder",
            value: function errorBuilder(t) {
              var _this6 = this;

              return function (r, e, s) {
                _this6.raise(t, {
                  at: Je(r, e, s)
                });
              };
            }
          }]);

          return Bl;
        }(Sl),
            Ml = function Ml() {
          _classCallCheck(this, Ml);

          this.privateNames = new Set(), this.loneAccessors = new Map(), this.undefinedPrivateNames = new Map();
        },
            _l =
        /*#__PURE__*/
        function () {
          function _l(t) {
            _classCallCheck(this, _l);

            this.parser = void 0, this.stack = [], this.undefinedPrivateNames = new Map(), this.parser = t;
          }

          _createClass(_l, [{
            key: "current",
            value: function current() {
              return this.stack[this.stack.length - 1];
            }
          }, {
            key: "enter",
            value: function enter() {
              this.stack.push(new Ml());
            }
          }, {
            key: "exit",
            value: function exit() {
              var t = this.stack.pop(),
                  r = this.current();

              for (var _i7 = 0, _Array$from = Array.from(t.undefinedPrivateNames); _i7 < _Array$from.length; _i7++) {
                var _Array$from$_i = _slicedToArray(_Array$from[_i7], 2),
                    e = _Array$from$_i[0],
                    s = _Array$from$_i[1];

                r ? r.undefinedPrivateNames.has(e) || r.undefinedPrivateNames.set(e, s) : this.parser.raise(f.InvalidPrivateFieldResolution, {
                  at: s,
                  identifierName: e
                });
              }
            }
          }, {
            key: "declarePrivateName",
            value: function declarePrivateName(t, r, e) {
              var _this$current = this.current(),
                  s = _this$current.privateNames,
                  i = _this$current.loneAccessors,
                  a = _this$current.undefinedPrivateNames,
                  n = s.has(t);

              if (r & ts) {
                var o = n && i.get(t);

                if (o) {
                  var u = o & yt,
                      c = r & yt,
                      y = o & ts,
                      g = r & ts;
                  n = y === g || u !== c, n || i["delete"](t);
                } else n || i.set(t, r);
              }

              n && this.parser.raise(f.PrivateNameRedeclaration, {
                at: e,
                identifierName: t
              }), s.add(t), a["delete"](t);
            }
          }, {
            key: "usePrivateName",
            value: function usePrivateName(t, r) {
              var e;
              var _iteratorNormalCompletion3 = true;
              var _didIteratorError3 = false;
              var _iteratorError3 = undefined;

              try {
                for (var _iterator3 = this.stack[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                  e = _step3.value;
                  if (e.privateNames.has(t)) return;
                }
              } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                    _iterator3["return"]();
                  }
                } finally {
                  if (_didIteratorError3) {
                    throw _iteratorError3;
                  }
                }
              }

              e ? e.undefinedPrivateNames.set(t, r) : this.parser.raise(f.InvalidPrivateFieldResolution, {
                at: r,
                identifierName: t
              });
            }
          }]);

          return _l;
        }(),
            Rl = 0,
            Or = 1,
            ls = 2,
            Br = 3,
            Pt =
        /*#__PURE__*/
        function () {
          function Pt() {
            _classCallCheck(this, Pt);

            var t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : Rl;
            this.type = void 0, this.type = t;
          }

          _createClass(Pt, [{
            key: "canBeArrowParameterDeclaration",
            value: function canBeArrowParameterDeclaration() {
              return this.type === ls || this.type === Or;
            }
          }, {
            key: "isCertainlyParameterDeclaration",
            value: function isCertainlyParameterDeclaration() {
              return this.type === Br;
            }
          }]);

          return Pt;
        }(),
            Mr =
        /*#__PURE__*/
        function (_Pt) {
          _inherits(Mr, _Pt);

          function Mr(t) {
            var _this7;

            _classCallCheck(this, Mr);

            _this7 = _possibleConstructorReturn(this, _getPrototypeOf(Mr).call(this, t)), _this7.declarationErrors = new Map();
            return _this7;
          }

          _createClass(Mr, [{
            key: "recordDeclarationError",
            value: function recordDeclarationError(t, r) {
              var e = r.at,
                  s = e.index;
              this.declarationErrors.set(s, [t, e]);
            }
          }, {
            key: "clearDeclarationError",
            value: function clearDeclarationError(t) {
              this.declarationErrors["delete"](t);
            }
          }, {
            key: "iterateErrors",
            value: function iterateErrors(t) {
              this.declarationErrors.forEach(t);
            }
          }]);

          return Mr;
        }(Pt),
            jl =
        /*#__PURE__*/
        function () {
          function jl(t) {
            _classCallCheck(this, jl);

            this.parser = void 0, this.stack = [new Pt()], this.parser = t;
          }

          _createClass(jl, [{
            key: "enter",
            value: function enter(t) {
              this.stack.push(t);
            }
          }, {
            key: "exit",
            value: function exit() {
              this.stack.pop();
            }
          }, {
            key: "recordParameterInitializerError",
            value: function recordParameterInitializerError(t, r) {
              var e = r.at,
                  s = {
                at: e.loc.start
              },
                  i = this.stack,
                  a = i.length - 1,
                  n = i[a];

              for (; !n.isCertainlyParameterDeclaration();) {
                if (n.canBeArrowParameterDeclaration()) n.recordDeclarationError(t, s);else return;
                n = i[--a];
              }

              this.parser.raise(t, s);
            }
          }, {
            key: "recordArrowParameterBindingError",
            value: function recordArrowParameterBindingError(t, r) {
              var e = r.at,
                  s = this.stack,
                  i = s[s.length - 1],
                  a = {
                at: e.loc.start
              };
              if (i.isCertainlyParameterDeclaration()) this.parser.raise(t, a);else if (i.canBeArrowParameterDeclaration()) i.recordDeclarationError(t, a);else return;
            }
          }, {
            key: "recordAsyncArrowParametersError",
            value: function recordAsyncArrowParametersError(t) {
              var r = t.at,
                  e = this.stack,
                  s = e.length - 1,
                  i = e[s];

              for (; i.canBeArrowParameterDeclaration();) {
                i.type === ls && i.recordDeclarationError(f.AwaitBindingIdentifier, {
                  at: r
                }), i = e[--s];
              }
            }
          }, {
            key: "validateAsPattern",
            value: function validateAsPattern() {
              var _this8 = this;

              var t = this.stack,
                  r = t[t.length - 1];
              r.canBeArrowParameterDeclaration() && r.iterateErrors(function (e) {
                var _e3 = _slicedToArray(e, 2),
                    s = _e3[0],
                    i = _e3[1];

                _this8.parser.raise(s, {
                  at: i
                });

                var a = t.length - 2,
                    n = t[a];

                for (; n.canBeArrowParameterDeclaration();) {
                  n.clearDeclarationError(i.index), n = t[--a];
                }
              });
            }
          }]);

          return jl;
        }();

        function ql() {
          return new Pt(Br);
        }

        function Ul() {
          return new Mr(Or);
        }

        function $l() {
          return new Mr(ls);
        }

        function _r() {
          return new Pt();
        }

        var Me = 0,
            Rr = 1,
            At = 2,
            jr = 4,
            _e = 8,
            Hl =
        /*#__PURE__*/
        function () {
          function Hl() {
            _classCallCheck(this, Hl);

            this.stacks = [];
          }

          _createClass(Hl, [{
            key: "enter",
            value: function enter(t) {
              this.stacks.push(t);
            }
          }, {
            key: "exit",
            value: function exit() {
              this.stacks.pop();
            }
          }, {
            key: "currentFlags",
            value: function currentFlags() {
              return this.stacks[this.stacks.length - 1];
            }
          }, {
            key: "hasAwait",
            get: function get() {
              return (this.currentFlags() & At) > 0;
            }
          }, {
            key: "hasYield",
            get: function get() {
              return (this.currentFlags() & Rr) > 0;
            }
          }, {
            key: "hasReturn",
            get: function get() {
              return (this.currentFlags() & jr) > 0;
            }
          }, {
            key: "hasIn",
            get: function get() {
              return (this.currentFlags() & _e) > 0;
            }
          }]);

          return Hl;
        }();

        function Tt(t, r) {
          return (t ? At : 0) | (r ? Rr : 0);
        }

        var zl =
        /*#__PURE__*/
        function (_Bl) {
          _inherits(zl, _Bl);

          function zl() {
            _classCallCheck(this, zl);

            return _possibleConstructorReturn(this, _getPrototypeOf(zl).apply(this, arguments));
          }

          _createClass(zl, [{
            key: "addExtra",
            value: function addExtra(t, r, e) {
              var s = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !0;
              if (!t) return;
              var i = t.extra = t.extra || {};
              s ? i[r] = e : Object.defineProperty(i, r, {
                enumerable: s,
                value: e
              });
            }
          }, {
            key: "isContextual",
            value: function isContextual(t) {
              return this.state.type === t && !this.state.containsEsc;
            }
          }, {
            key: "isUnparsedContextual",
            value: function isUnparsedContextual(t, r) {
              var e = t + r.length;

              if (this.input.slice(t, e) === r) {
                var s = this.input.charCodeAt(e);
                return !(De(s) || (s & 64512) === 55296);
              }

              return !1;
            }
          }, {
            key: "isLookaheadContextual",
            value: function isLookaheadContextual(t) {
              var r = this.nextTokenStart();
              return this.isUnparsedContextual(r, t);
            }
          }, {
            key: "eatContextual",
            value: function eatContextual(t) {
              return this.isContextual(t) ? (this.next(), !0) : !1;
            }
          }, {
            key: "expectContextual",
            value: function expectContextual(t, r) {
              if (!this.eatContextual(t)) {
                if (r != null) throw this.raise(r, {
                  at: this.state.startLoc
                });
                this.unexpected(null, t);
              }
            }
          }, {
            key: "canInsertSemicolon",
            value: function canInsertSemicolon() {
              return this.match(137) || this.match(8) || this.hasPrecedingLineBreak();
            }
          }, {
            key: "hasPrecedingLineBreak",
            value: function hasPrecedingLineBreak() {
              return as.test(this.input.slice(this.state.lastTokEndLoc.index, this.state.start));
            }
          }, {
            key: "hasFollowingLineBreak",
            value: function hasFollowingLineBreak() {
              return Ir.lastIndex = this.state.end, Ir.test(this.input);
            }
          }, {
            key: "isLineTerminator",
            value: function isLineTerminator() {
              return this.eat(13) || this.canInsertSemicolon();
            }
          }, {
            key: "semicolon",
            value: function semicolon() {
              ((arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0) ? this.isLineTerminator() : this.eat(13)) || this.raise(f.MissingSemicolon, {
                at: this.state.lastTokEndLoc
              });
            }
          }, {
            key: "expect",
            value: function expect(t, r) {
              this.eat(t) || this.unexpected(r, t);
            }
          }, {
            key: "tryParse",
            value: function tryParse(t) {
              var r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.state.clone(),
                  e = {
                node: null
              };

              try {
                var s = t(function () {
                  var i = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
                  throw e.node = i, e;
                });

                if (this.state.errors.length > r.errors.length) {
                  var i = this.state;
                  return this.state = r, this.state.tokensLength = i.tokensLength, {
                    node: s,
                    error: i.errors[r.errors.length],
                    thrown: !1,
                    aborted: !1,
                    failState: i
                  };
                }

                return {
                  node: s,
                  error: null,
                  thrown: !1,
                  aborted: !1,
                  failState: null
                };
              } catch (s) {
                var _i8 = this.state;
                if (this.state = r, s instanceof SyntaxError) return {
                  node: null,
                  error: s,
                  thrown: !0,
                  aborted: !1,
                  failState: _i8
                };
                if (s === e) return {
                  node: e.node,
                  error: null,
                  thrown: !1,
                  aborted: !0,
                  failState: _i8
                };
                throw s;
              }
            }
          }, {
            key: "checkExpressionErrors",
            value: function checkExpressionErrors(t, r) {
              if (!t) return !1;
              var e = t.shorthandAssignLoc,
                  s = t.doubleProtoLoc,
                  i = t.privateKeyLoc,
                  a = t.optionalParametersLoc,
                  n = !!e || !!s || !!a || !!i;
              if (!r) return n;
              e != null && this.raise(f.InvalidCoverInitializedName, {
                at: e
              }), s != null && this.raise(f.DuplicateProto, {
                at: s
              }), i != null && this.raise(f.UnexpectedPrivateField, {
                at: i
              }), a != null && this.unexpected(a);
            }
          }, {
            key: "isLiteralPropertyName",
            value: function isLiteralPropertyName() {
              return it(this.state.type);
            }
          }, {
            key: "isPrivateName",
            value: function isPrivateName(t) {
              return t.type === "PrivateName";
            }
          }, {
            key: "getPrivateNameSV",
            value: function getPrivateNameSV(t) {
              return t.id.name;
            }
          }, {
            key: "hasPropertyAsPrivateName",
            value: function hasPropertyAsPrivateName(t) {
              return (t.type === "MemberExpression" || t.type === "OptionalMemberExpression") && this.isPrivateName(t.property);
            }
          }, {
            key: "isObjectProperty",
            value: function isObjectProperty(t) {
              return t.type === "ObjectProperty";
            }
          }, {
            key: "isObjectMethod",
            value: function isObjectMethod(t) {
              return t.type === "ObjectMethod";
            }
          }, {
            key: "initializeScopes",
            value: function initializeScopes() {
              var _this9 = this;

              var t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.options.sourceType === "module",
                  r = this.state.labels;
              this.state.labels = [];
              var e = this.exportedIdentifiers;
              this.exportedIdentifiers = new Set();
              var s = this.inModule;
              this.inModule = t;
              var i = this.scope,
                  a = this.getScopeHandler();
              this.scope = new a(this, t);
              var n = this.prodParam;
              this.prodParam = new Hl();
              var o = this.classScope;
              this.classScope = new _l(this);
              var u = this.expressionScope;
              return this.expressionScope = new jl(this), function () {
                _this9.state.labels = r, _this9.exportedIdentifiers = e, _this9.inModule = s, _this9.scope = i, _this9.prodParam = n, _this9.classScope = o, _this9.expressionScope = u;
              };
            }
          }, {
            key: "enterInitialScopes",
            value: function enterInitialScopes() {
              var t = Me;
              this.inModule && (t |= At), this.scope.enter(Le), this.prodParam.enter(t);
            }
          }, {
            key: "checkDestructuringPrivate",
            value: function checkDestructuringPrivate(t) {
              var r = t.privateKeyLoc;
              r !== null && this.expectPlugin("destructuringPrivate", r);
            }
          }]);

          return zl;
        }(Bl),
            vt = function vt() {
          _classCallCheck(this, vt);

          this.shorthandAssignLoc = null, this.doubleProtoLoc = null, this.privateKeyLoc = null, this.optionalParametersLoc = null;
        },
            Et = function Et(t, r, e) {
          _classCallCheck(this, Et);

          this.type = "", this.start = r, this.end = 0, this.loc = new lt(e), t != null && t.options.ranges && (this.range = [r, 0]), t != null && t.filename && (this.loc.filename = t.filename);
        },
            hs = Et.prototype;

        hs.__clone = function () {
          var t = new Et(void 0, this.start, this.loc.start),
              r = Object.keys(this);

          for (var e = 0, s = r.length; e < s; e++) {
            var i = r[e];
            i !== "leadingComments" && i !== "trailingComments" && i !== "innerComments" && (t[i] = this[i]);
          }

          return t;
        };

        function Vl(t) {
          return me(t);
        }

        function me(t) {
          var r = t.type,
              e = t.start,
              s = t.end,
              i = t.loc,
              a = t.range,
              n = t.extra,
              o = t.name,
              u = Object.create(hs);
          return u.type = r, u.start = e, u.end = s, u.loc = i, u.range = a, u.extra = n, u.name = o, r === "Placeholder" && (u.expectedNode = t.expectedNode), u;
        }

        function Kl(t) {
          var r = t.type,
              e = t.start,
              s = t.end,
              i = t.loc,
              a = t.range,
              n = t.extra;
          if (r === "Placeholder") return Vl(t);
          var o = Object.create(hs);
          return o.type = r, o.start = e, o.end = s, o.loc = i, o.range = a, t.raw !== void 0 ? o.raw = t.raw : o.extra = n, o.value = t.value, o;
        }

        var Wl =
        /*#__PURE__*/
        function (_zl) {
          _inherits(Wl, _zl);

          function Wl() {
            _classCallCheck(this, Wl);

            return _possibleConstructorReturn(this, _getPrototypeOf(Wl).apply(this, arguments));
          }

          _createClass(Wl, [{
            key: "startNode",
            value: function startNode() {
              return new Et(this, this.state.start, this.state.startLoc);
            }
          }, {
            key: "startNodeAt",
            value: function startNodeAt(t) {
              return new Et(this, t.index, t);
            }
          }, {
            key: "startNodeAtNode",
            value: function startNodeAtNode(t) {
              return this.startNodeAt(t.loc.start);
            }
          }, {
            key: "finishNode",
            value: function finishNode(t, r) {
              return this.finishNodeAt(t, r, this.state.lastTokEndLoc);
            }
          }, {
            key: "finishNodeAt",
            value: function finishNodeAt(t, r, e) {
              return t.type = r, t.end = e.index, t.loc.end = e, this.options.ranges && (t.range[1] = e.index), this.options.attachComment && this.processComment(t), t;
            }
          }, {
            key: "resetStartLocation",
            value: function resetStartLocation(t, r) {
              t.start = r.index, t.loc.start = r, this.options.ranges && (t.range[0] = r.index);
            }
          }, {
            key: "resetEndLocation",
            value: function resetEndLocation(t) {
              var r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.state.lastTokEndLoc;
              t.end = r.index, t.loc.end = r, this.options.ranges && (t.range[1] = r.index);
            }
          }, {
            key: "resetStartLocationFromNode",
            value: function resetStartLocationFromNode(t, r) {
              this.resetStartLocation(t, r.loc.start);
            }
          }]);

          return Wl;
        }(zl),
            Gl = new Set(["_", "any", "bool", "boolean", "empty", "extends", "false", "interface", "mixed", "null", "number", "static", "string", "true", "typeof", "void"]),
            D = pe(_templateObject2())({
          AmbiguousConditionalArrow: "Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.",
          AmbiguousDeclareModuleKind: "Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.",
          AssignReservedType: function AssignReservedType(t) {
            var r = t.reservedType;
            return "Cannot overwrite reserved type ".concat(r, ".");
          },
          DeclareClassElement: "The `declare` modifier can only appear on class fields.",
          DeclareClassFieldInitializer: "Initializers are not allowed in fields with the `declare` modifier.",
          DuplicateDeclareModuleExports: "Duplicate `declare module.exports` statement.",
          EnumBooleanMemberNotInitialized: function EnumBooleanMemberNotInitialized(t) {
            var r = t.memberName,
                e = t.enumName;
            return "Boolean enum members need to be initialized. Use either `".concat(r, " = true,` or `").concat(r, " = false,` in enum `").concat(e, "`.");
          },
          EnumDuplicateMemberName: function EnumDuplicateMemberName(t) {
            var r = t.memberName,
                e = t.enumName;
            return "Enum member names need to be unique, but the name `".concat(r, "` has already been used before in enum `").concat(e, "`.");
          },
          EnumInconsistentMemberValues: function EnumInconsistentMemberValues(t) {
            var r = t.enumName;
            return "Enum `".concat(r, "` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.");
          },
          EnumInvalidExplicitType: function EnumInvalidExplicitType(t) {
            var r = t.invalidEnumType,
                e = t.enumName;
            return "Enum type `".concat(r, "` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `").concat(e, "`.");
          },
          EnumInvalidExplicitTypeUnknownSupplied: function EnumInvalidExplicitTypeUnknownSupplied(t) {
            var r = t.enumName;
            return "Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `".concat(r, "`.");
          },
          EnumInvalidMemberInitializerPrimaryType: function EnumInvalidMemberInitializerPrimaryType(t) {
            var r = t.enumName,
                e = t.memberName,
                s = t.explicitType;
            return "Enum `".concat(r, "` has type `").concat(s, "`, so the initializer of `").concat(e, "` needs to be a ").concat(s, " literal.");
          },
          EnumInvalidMemberInitializerSymbolType: function EnumInvalidMemberInitializerSymbolType(t) {
            var r = t.enumName,
                e = t.memberName;
            return "Symbol enum members cannot be initialized. Use `".concat(e, ",` in enum `").concat(r, "`.");
          },
          EnumInvalidMemberInitializerUnknownType: function EnumInvalidMemberInitializerUnknownType(t) {
            var r = t.enumName,
                e = t.memberName;
            return "The enum member initializer for `".concat(e, "` needs to be a literal (either a boolean, number, or string) in enum `").concat(r, "`.");
          },
          EnumInvalidMemberName: function EnumInvalidMemberName(t) {
            var r = t.enumName,
                e = t.memberName,
                s = t.suggestion;
            return "Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `".concat(e, "`, consider using `").concat(s, "`, in enum `").concat(r, "`.");
          },
          EnumNumberMemberNotInitialized: function EnumNumberMemberNotInitialized(t) {
            var r = t.enumName,
                e = t.memberName;
            return "Number enum members need to be initialized, e.g. `".concat(e, " = 1` in enum `").concat(r, "`.");
          },
          EnumStringMemberInconsistentlyInitailized: function EnumStringMemberInconsistentlyInitailized(t) {
            var r = t.enumName;
            return "String enum members need to consistently either all use initializers, or use no initializers, in enum `".concat(r, "`.");
          },
          GetterMayNotHaveThisParam: "A getter cannot have a `this` parameter.",
          ImportReflectionHasImportType: "An `import module` declaration can not use `type` or `typeof` keyword.",
          ImportTypeShorthandOnlyInPureImport: "The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.",
          InexactInsideExact: "Explicit inexact syntax cannot appear inside an explicit exact object type.",
          InexactInsideNonObject: "Explicit inexact syntax cannot appear in class or interface definitions.",
          InexactVariance: "Explicit inexact syntax cannot have variance.",
          InvalidNonTypeImportInDeclareModule: "Imports within a `declare module` body must always be `import type` or `import typeof`.",
          MissingTypeParamDefault: "Type parameter declaration needs a default, since a preceding type parameter declaration has a default.",
          NestedDeclareModule: "`declare module` cannot be used inside another `declare module`.",
          NestedFlowComment: "Cannot have a flow comment inside another flow comment.",
          PatternIsOptional: Object.assign({
            message: "A binding pattern parameter cannot be optional in an implementation signature."
          }, {
            reasonCode: "OptionalBindingPattern"
          }),
          SetterMayNotHaveThisParam: "A setter cannot have a `this` parameter.",
          SpreadVariance: "Spread properties cannot have variance.",
          ThisParamAnnotationRequired: "A type annotation is required for the `this` parameter.",
          ThisParamBannedInConstructor: "Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.",
          ThisParamMayNotBeOptional: "The `this` parameter cannot be optional.",
          ThisParamMustBeFirst: "The `this` parameter must be the first function parameter.",
          ThisParamNoDefault: "The `this` parameter may not have a default value.",
          TypeBeforeInitializer: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.",
          TypeCastInPattern: "The type cast expression is expected to be wrapped with parenthesis.",
          UnexpectedExplicitInexactInObject: "Explicit inexact syntax must appear at the end of an inexact object.",
          UnexpectedReservedType: function UnexpectedReservedType(t) {
            var r = t.reservedType;
            return "Unexpected reserved type ".concat(r, ".");
          },
          UnexpectedReservedUnderscore: "`_` is only allowed as a type argument to call or new.",
          UnexpectedSpaceBetweenModuloChecks: "Spaces between `%` and `checks` are not allowed here.",
          UnexpectedSpreadType: "Spread operator cannot appear in class or interface definitions.",
          UnexpectedSubtractionOperand: 'Unexpected token, expected "number" or "bigint".',
          UnexpectedTokenAfterTypeParameter: "Expected an arrow function after this type parameter declaration.",
          UnexpectedTypeParameterBeforeAsyncArrowFunction: "Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.",
          UnsupportedDeclareExportKind: function UnsupportedDeclareExportKind(t) {
            var r = t.unsupportedExportKind,
                e = t.suggestion;
            return "`declare export ".concat(r, "` is not supported. Use `").concat(e, "` instead.");
          },
          UnsupportedStatementInDeclareModule: "Only declares and type imports are allowed inside declare module.",
          UnterminatedFlowComment: "Unterminated flow-comment."
        });

        function Jl(t) {
          return t.type === "DeclareExportAllDeclaration" || t.type === "DeclareExportDeclaration" && (!t.declaration || t.declaration.type !== "TypeAlias" && t.declaration.type !== "InterfaceDeclaration");
        }

        function us(t) {
          return t.importKind === "type" || t.importKind === "typeof";
        }

        function qr(t) {
          return te(t) && t !== 97;
        }

        var Xl = {
          "const": "declare export var",
          "let": "declare export var",
          type: "export type",
          "interface": "export interface"
        };

        function Yl(t, r) {
          var e = [],
              s = [];

          for (var i = 0; i < t.length; i++) {
            (r(t[i], i, t) ? e : s).push(t[i]);
          }

          return [e, s];
        }

        var Ql = /\*?\s*@((?:no)?flow)\b/,
            Zl = function Zl(t) {
          return (
            /*#__PURE__*/
            function (_t4) {
              _inherits(_class2, _t4);

              function _class2() {
                var _this10;

                _classCallCheck(this, _class2);

                _this10 = _possibleConstructorReturn(this, _getPrototypeOf(_class2).apply(this, arguments)), _this10.flowPragma = void 0;
                return _this10;
              }

              _createClass(_class2, [{
                key: "getScopeHandler",
                value: function getScopeHandler() {
                  return El;
                }
              }, {
                key: "shouldParseTypes",
                value: function shouldParseTypes() {
                  return this.getPluginOption("flow", "all") || this.flowPragma === "flow";
                }
              }, {
                key: "shouldParseEnums",
                value: function shouldParseEnums() {
                  return !!this.getPluginOption("flow", "enums");
                }
              }, {
                key: "finishToken",
                value: function finishToken(e, s) {
                  e !== 131 && e !== 13 && e !== 28 && this.flowPragma === void 0 && (this.flowPragma = null), _get(_getPrototypeOf(_class2.prototype), "finishToken", this).call(this, e, s);
                }
              }, {
                key: "addComment",
                value: function addComment(e) {
                  if (this.flowPragma === void 0) {
                    var s = Ql.exec(e.value);
                    if (s) if (s[1] === "flow") this.flowPragma = "flow";else if (s[1] === "noflow") this.flowPragma = "noflow";else throw new Error("Unexpected flow pragma");
                  }

                  _get(_getPrototypeOf(_class2.prototype), "addComment", this).call(this, e);
                }
              }, {
                key: "flowParseTypeInitialiser",
                value: function flowParseTypeInitialiser(e) {
                  var s = this.state.inType;
                  this.state.inType = !0, this.expect(e || 14);
                  var i = this.flowParseType();
                  return this.state.inType = s, i;
                }
              }, {
                key: "flowParsePredicate",
                value: function flowParsePredicate() {
                  var e = this.startNode(),
                      s = this.state.startLoc;
                  return this.next(), this.expectContextual(108), this.state.lastTokStart > s.index + 1 && this.raise(D.UnexpectedSpaceBetweenModuloChecks, {
                    at: s
                  }), this.eat(10) ? (e.value = _get(_getPrototypeOf(_class2.prototype), "parseExpression", this).call(this), this.expect(11), this.finishNode(e, "DeclaredPredicate")) : this.finishNode(e, "InferredPredicate");
                }
              }, {
                key: "flowParseTypeAndPredicateInitialiser",
                value: function flowParseTypeAndPredicateInitialiser() {
                  var e = this.state.inType;
                  this.state.inType = !0, this.expect(14);
                  var s = null,
                      i = null;
                  return this.match(54) ? (this.state.inType = e, i = this.flowParsePredicate()) : (s = this.flowParseType(), this.state.inType = e, this.match(54) && (i = this.flowParsePredicate())), [s, i];
                }
              }, {
                key: "flowParseDeclareClass",
                value: function flowParseDeclareClass(e) {
                  return this.next(), this.flowParseInterfaceish(e, !0), this.finishNode(e, "DeclareClass");
                }
              }, {
                key: "flowParseDeclareFunction",
                value: function flowParseDeclareFunction(e) {
                  var _this$flowParseTypeAn, _this$flowParseTypeAn2;

                  this.next();
                  var s = e.id = this.parseIdentifier(),
                      i = this.startNode(),
                      a = this.startNode();
                  this.match(47) ? i.typeParameters = this.flowParseTypeParameterDeclaration() : i.typeParameters = null, this.expect(10);
                  var n = this.flowParseFunctionTypeParams();
                  return i.params = n.params, i.rest = n.rest, i["this"] = n._this, this.expect(11), (_this$flowParseTypeAn = this.flowParseTypeAndPredicateInitialiser(), _this$flowParseTypeAn2 = _slicedToArray(_this$flowParseTypeAn, 2), i.returnType = _this$flowParseTypeAn2[0], e.predicate = _this$flowParseTypeAn2[1], _this$flowParseTypeAn), a.typeAnnotation = this.finishNode(i, "FunctionTypeAnnotation"), s.typeAnnotation = this.finishNode(a, "TypeAnnotation"), this.resetEndLocation(s), this.semicolon(), this.scope.declareName(e.id.name, xl, e.id.loc.start), this.finishNode(e, "DeclareFunction");
                }
              }, {
                key: "flowParseDeclare",
                value: function flowParseDeclare(e, s) {
                  if (this.match(80)) return this.flowParseDeclareClass(e);
                  if (this.match(68)) return this.flowParseDeclareFunction(e);
                  if (this.match(74)) return this.flowParseDeclareVariable(e);
                  if (this.eatContextual(125)) return this.match(16) ? this.flowParseDeclareModuleExports(e) : (s && this.raise(D.NestedDeclareModule, {
                    at: this.state.lastTokStartLoc
                  }), this.flowParseDeclareModule(e));
                  if (this.isContextual(128)) return this.flowParseDeclareTypeAlias(e);
                  if (this.isContextual(129)) return this.flowParseDeclareOpaqueType(e);
                  if (this.isContextual(127)) return this.flowParseDeclareInterface(e);
                  if (this.match(82)) return this.flowParseDeclareExportDeclaration(e, s);
                  this.unexpected();
                }
              }, {
                key: "flowParseDeclareVariable",
                value: function flowParseDeclareVariable(e) {
                  return this.next(), e.id = this.flowParseTypeAnnotatableIdentifier(!0), this.scope.declareName(e.id.name, mt, e.id.loc.start), this.semicolon(), this.finishNode(e, "DeclareVariable");
                }
              }, {
                key: "flowParseDeclareModule",
                value: function flowParseDeclareModule(e) {
                  var _this11 = this;

                  this.scope.enter(Fe), this.match(131) ? e.id = _get(_getPrototypeOf(_class2.prototype), "parseExprAtom", this).call(this) : e.id = this.parseIdentifier();
                  var s = e.body = this.startNode(),
                      i = s.body = [];

                  for (this.expect(5); !this.match(8);) {
                    var o = this.startNode();
                    this.match(83) ? (this.next(), !this.isContextual(128) && !this.match(87) && this.raise(D.InvalidNonTypeImportInDeclareModule, {
                      at: this.state.lastTokStartLoc
                    }), _get(_getPrototypeOf(_class2.prototype), "parseImport", this).call(this, o)) : (this.expectContextual(123, D.UnsupportedStatementInDeclareModule), o = this.flowParseDeclare(o, !0)), i.push(o);
                  }

                  this.scope.exit(), this.expect(8), this.finishNode(s, "BlockStatement");
                  var a = null,
                      n = !1;
                  return i.forEach(function (o) {
                    Jl(o) ? (a === "CommonJS" && _this11.raise(D.AmbiguousDeclareModuleKind, {
                      at: o
                    }), a = "ES") : o.type === "DeclareModuleExports" && (n && _this11.raise(D.DuplicateDeclareModuleExports, {
                      at: o
                    }), a === "ES" && _this11.raise(D.AmbiguousDeclareModuleKind, {
                      at: o
                    }), a = "CommonJS", n = !0);
                  }), e.kind = a || "CommonJS", this.finishNode(e, "DeclareModule");
                }
              }, {
                key: "flowParseDeclareExportDeclaration",
                value: function flowParseDeclareExportDeclaration(e, s) {
                  if (this.expect(82), this.eat(65)) return this.match(68) || this.match(80) ? e.declaration = this.flowParseDeclare(this.startNode()) : (e.declaration = this.flowParseType(), this.semicolon()), e["default"] = !0, this.finishNode(e, "DeclareExportDeclaration");

                  if (this.match(75) || this.isLet() || (this.isContextual(128) || this.isContextual(127)) && !s) {
                    var i = this.state.value;
                    throw this.raise(D.UnsupportedDeclareExportKind, {
                      at: this.state.startLoc,
                      unsupportedExportKind: i,
                      suggestion: Xl[i]
                    });
                  }

                  if (this.match(74) || this.match(68) || this.match(80) || this.isContextual(129)) return e.declaration = this.flowParseDeclare(this.startNode()), e["default"] = !1, this.finishNode(e, "DeclareExportDeclaration");
                  if (this.match(55) || this.match(5) || this.isContextual(127) || this.isContextual(128) || this.isContextual(129)) return e = this.parseExport(e, null), e.type === "ExportNamedDeclaration" && (e.type = "ExportDeclaration", e["default"] = !1, delete e.exportKind), e.type = "Declare" + e.type, e;
                  this.unexpected();
                }
              }, {
                key: "flowParseDeclareModuleExports",
                value: function flowParseDeclareModuleExports(e) {
                  return this.next(), this.expectContextual(109), e.typeAnnotation = this.flowParseTypeAnnotation(), this.semicolon(), this.finishNode(e, "DeclareModuleExports");
                }
              }, {
                key: "flowParseDeclareTypeAlias",
                value: function flowParseDeclareTypeAlias(e) {
                  this.next();
                  var s = this.flowParseTypeAlias(e);
                  return s.type = "DeclareTypeAlias", s;
                }
              }, {
                key: "flowParseDeclareOpaqueType",
                value: function flowParseDeclareOpaqueType(e) {
                  this.next();
                  var s = this.flowParseOpaqueType(e, !0);
                  return s.type = "DeclareOpaqueType", s;
                }
              }, {
                key: "flowParseDeclareInterface",
                value: function flowParseDeclareInterface(e) {
                  return this.next(), this.flowParseInterfaceish(e, !1), this.finishNode(e, "DeclareInterface");
                }
              }, {
                key: "flowParseInterfaceish",
                value: function flowParseInterfaceish(e, s) {
                  if (e.id = this.flowParseRestrictedIdentifier(!s, !0), this.scope.declareName(e.id.name, s ? Er : Be, e.id.loc.start), this.match(47) ? e.typeParameters = this.flowParseTypeParameterDeclaration() : e.typeParameters = null, e["extends"] = [], e["implements"] = [], e.mixins = [], this.eat(81)) do {
                    e["extends"].push(this.flowParseInterfaceExtends());
                  } while (!s && this.eat(12));

                  if (s) {
                    if (this.eatContextual(115)) do {
                      e.mixins.push(this.flowParseInterfaceExtends());
                    } while (this.eat(12));
                    if (this.eatContextual(111)) do {
                      e["implements"].push(this.flowParseInterfaceExtends());
                    } while (this.eat(12));
                  }

                  e.body = this.flowParseObjectType({
                    allowStatic: s,
                    allowExact: !1,
                    allowSpread: !1,
                    allowProto: s,
                    allowInexact: !1
                  });
                }
              }, {
                key: "flowParseInterfaceExtends",
                value: function flowParseInterfaceExtends() {
                  var e = this.startNode();
                  return e.id = this.flowParseQualifiedTypeIdentifier(), this.match(47) ? e.typeParameters = this.flowParseTypeParameterInstantiation() : e.typeParameters = null, this.finishNode(e, "InterfaceExtends");
                }
              }, {
                key: "flowParseInterface",
                value: function flowParseInterface(e) {
                  return this.flowParseInterfaceish(e, !1), this.finishNode(e, "InterfaceDeclaration");
                }
              }, {
                key: "checkNotUnderscore",
                value: function checkNotUnderscore(e) {
                  e === "_" && this.raise(D.UnexpectedReservedUnderscore, {
                    at: this.state.startLoc
                  });
                }
              }, {
                key: "checkReservedType",
                value: function checkReservedType(e, s, i) {
                  Gl.has(e) && this.raise(i ? D.AssignReservedType : D.UnexpectedReservedType, {
                    at: s,
                    reservedType: e
                  });
                }
              }, {
                key: "flowParseRestrictedIdentifier",
                value: function flowParseRestrictedIdentifier(e, s) {
                  return this.checkReservedType(this.state.value, this.state.startLoc, s), this.parseIdentifier(e);
                }
              }, {
                key: "flowParseTypeAlias",
                value: function flowParseTypeAlias(e) {
                  return e.id = this.flowParseRestrictedIdentifier(!1, !0), this.scope.declareName(e.id.name, Be, e.id.loc.start), this.match(47) ? e.typeParameters = this.flowParseTypeParameterDeclaration() : e.typeParameters = null, e.right = this.flowParseTypeInitialiser(29), this.semicolon(), this.finishNode(e, "TypeAlias");
                }
              }, {
                key: "flowParseOpaqueType",
                value: function flowParseOpaqueType(e, s) {
                  return this.expectContextual(128), e.id = this.flowParseRestrictedIdentifier(!0, !0), this.scope.declareName(e.id.name, Be, e.id.loc.start), this.match(47) ? e.typeParameters = this.flowParseTypeParameterDeclaration() : e.typeParameters = null, e.supertype = null, this.match(14) && (e.supertype = this.flowParseTypeInitialiser(14)), e.impltype = null, s || (e.impltype = this.flowParseTypeInitialiser(29)), this.semicolon(), this.finishNode(e, "OpaqueType");
                }
              }, {
                key: "flowParseTypeParameter",
                value: function flowParseTypeParameter() {
                  var e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1,
                      s = this.state.startLoc,
                      i = this.startNode(),
                      a = this.flowParseVariance(),
                      n = this.flowParseTypeAnnotatableIdentifier();
                  return i.name = n.name, i.variance = a, i.bound = n.typeAnnotation, this.match(29) ? (this.eat(29), i["default"] = this.flowParseType()) : e && this.raise(D.MissingTypeParamDefault, {
                    at: s
                  }), this.finishNode(i, "TypeParameter");
                }
              }, {
                key: "flowParseTypeParameterDeclaration",
                value: function flowParseTypeParameterDeclaration() {
                  var e = this.state.inType,
                      s = this.startNode();
                  s.params = [], this.state.inType = !0, this.match(47) || this.match(140) ? this.next() : this.unexpected();
                  var i = !1;

                  do {
                    var a = this.flowParseTypeParameter(i);
                    s.params.push(a), a["default"] && (i = !0), this.match(48) || this.expect(12);
                  } while (!this.match(48));

                  return this.expect(48), this.state.inType = e, this.finishNode(s, "TypeParameterDeclaration");
                }
              }, {
                key: "flowParseTypeParameterInstantiation",
                value: function flowParseTypeParameterInstantiation() {
                  var e = this.startNode(),
                      s = this.state.inType;
                  e.params = [], this.state.inType = !0, this.expect(47);
                  var i = this.state.noAnonFunctionType;

                  for (this.state.noAnonFunctionType = !1; !this.match(48);) {
                    e.params.push(this.flowParseType()), this.match(48) || this.expect(12);
                  }

                  return this.state.noAnonFunctionType = i, this.expect(48), this.state.inType = s, this.finishNode(e, "TypeParameterInstantiation");
                }
              }, {
                key: "flowParseTypeParameterInstantiationCallOrNew",
                value: function flowParseTypeParameterInstantiationCallOrNew() {
                  var e = this.startNode(),
                      s = this.state.inType;

                  for (e.params = [], this.state.inType = !0, this.expect(47); !this.match(48);) {
                    e.params.push(this.flowParseTypeOrImplicitInstantiation()), this.match(48) || this.expect(12);
                  }

                  return this.expect(48), this.state.inType = s, this.finishNode(e, "TypeParameterInstantiation");
                }
              }, {
                key: "flowParseInterfaceType",
                value: function flowParseInterfaceType() {
                  var e = this.startNode();
                  if (this.expectContextual(127), e["extends"] = [], this.eat(81)) do {
                    e["extends"].push(this.flowParseInterfaceExtends());
                  } while (this.eat(12));
                  return e.body = this.flowParseObjectType({
                    allowStatic: !1,
                    allowExact: !1,
                    allowSpread: !1,
                    allowProto: !1,
                    allowInexact: !1
                  }), this.finishNode(e, "InterfaceTypeAnnotation");
                }
              }, {
                key: "flowParseObjectPropertyKey",
                value: function flowParseObjectPropertyKey() {
                  return this.match(132) || this.match(131) ? _get(_getPrototypeOf(_class2.prototype), "parseExprAtom", this).call(this) : this.parseIdentifier(!0);
                }
              }, {
                key: "flowParseObjectTypeIndexer",
                value: function flowParseObjectTypeIndexer(e, s, i) {
                  return e["static"] = s, this.lookahead().type === 14 ? (e.id = this.flowParseObjectPropertyKey(), e.key = this.flowParseTypeInitialiser()) : (e.id = null, e.key = this.flowParseType()), this.expect(3), e.value = this.flowParseTypeInitialiser(), e.variance = i, this.finishNode(e, "ObjectTypeIndexer");
                }
              }, {
                key: "flowParseObjectTypeInternalSlot",
                value: function flowParseObjectTypeInternalSlot(e, s) {
                  return e["static"] = s, e.id = this.flowParseObjectPropertyKey(), this.expect(3), this.expect(3), this.match(47) || this.match(10) ? (e.method = !0, e.optional = !1, e.value = this.flowParseObjectTypeMethodish(this.startNodeAt(e.loc.start))) : (e.method = !1, this.eat(17) && (e.optional = !0), e.value = this.flowParseTypeInitialiser()), this.finishNode(e, "ObjectTypeInternalSlot");
                }
              }, {
                key: "flowParseObjectTypeMethodish",
                value: function flowParseObjectTypeMethodish(e) {
                  for (e.params = [], e.rest = null, e.typeParameters = null, e["this"] = null, this.match(47) && (e.typeParameters = this.flowParseTypeParameterDeclaration()), this.expect(10), this.match(78) && (e["this"] = this.flowParseFunctionTypeParam(!0), e["this"].name = null, this.match(11) || this.expect(12)); !this.match(11) && !this.match(21);) {
                    e.params.push(this.flowParseFunctionTypeParam(!1)), this.match(11) || this.expect(12);
                  }

                  return this.eat(21) && (e.rest = this.flowParseFunctionTypeParam(!1)), this.expect(11), e.returnType = this.flowParseTypeInitialiser(), this.finishNode(e, "FunctionTypeAnnotation");
                }
              }, {
                key: "flowParseObjectTypeCallProperty",
                value: function flowParseObjectTypeCallProperty(e, s) {
                  var i = this.startNode();
                  return e["static"] = s, e.value = this.flowParseObjectTypeMethodish(i), this.finishNode(e, "ObjectTypeCallProperty");
                }
              }, {
                key: "flowParseObjectType",
                value: function flowParseObjectType(e) {
                  var s = e.allowStatic,
                      i = e.allowExact,
                      a = e.allowSpread,
                      n = e.allowProto,
                      o = e.allowInexact,
                      u = this.state.inType;
                  this.state.inType = !0;
                  var c = this.startNode();
                  c.callProperties = [], c.properties = [], c.indexers = [], c.internalSlots = [];
                  var y,
                      g,
                      T = !1;

                  for (i && this.match(6) ? (this.expect(6), y = 9, g = !0) : (this.expect(5), y = 8, g = !1), c.exact = g; !this.match(y);) {
                    var M = !1,
                        j = null,
                        K = null,
                        W = this.startNode();

                    if (n && this.isContextual(116)) {
                      var X = this.lookahead();
                      X.type !== 14 && X.type !== 17 && (this.next(), j = this.state.startLoc, s = !1);
                    }

                    if (s && this.isContextual(104)) {
                      var _X = this.lookahead();

                      _X.type !== 14 && _X.type !== 17 && (this.next(), M = !0);
                    }

                    var V = this.flowParseVariance();
                    if (this.eat(0)) j != null && this.unexpected(j), this.eat(0) ? (V && this.unexpected(V.loc.start), c.internalSlots.push(this.flowParseObjectTypeInternalSlot(W, M))) : c.indexers.push(this.flowParseObjectTypeIndexer(W, M, V));else if (this.match(10) || this.match(47)) j != null && this.unexpected(j), V && this.unexpected(V.loc.start), c.callProperties.push(this.flowParseObjectTypeCallProperty(W, M));else {
                      var _X2 = "init";

                      if (this.isContextual(98) || this.isContextual(103)) {
                        var Nh = this.lookahead();
                        it(Nh.type) && (_X2 = this.state.value, this.next());
                      }

                      var je = this.flowParseObjectTypeProperty(W, M, j, V, _X2, a, o != null ? o : !g);
                      je === null ? (T = !0, K = this.state.lastTokStartLoc) : c.properties.push(je);
                    }
                    this.flowObjectTypeSemicolon(), K && !this.match(8) && !this.match(9) && this.raise(D.UnexpectedExplicitInexactInObject, {
                      at: K
                    });
                  }

                  this.expect(y), a && (c.inexact = T);
                  var C = this.finishNode(c, "ObjectTypeAnnotation");
                  return this.state.inType = u, C;
                }
              }, {
                key: "flowParseObjectTypeProperty",
                value: function flowParseObjectTypeProperty(e, s, i, a, n, o, u) {
                  if (this.eat(21)) return this.match(12) || this.match(13) || this.match(8) || this.match(9) ? (o ? u || this.raise(D.InexactInsideExact, {
                    at: this.state.lastTokStartLoc
                  }) : this.raise(D.InexactInsideNonObject, {
                    at: this.state.lastTokStartLoc
                  }), a && this.raise(D.InexactVariance, {
                    at: a
                  }), null) : (o || this.raise(D.UnexpectedSpreadType, {
                    at: this.state.lastTokStartLoc
                  }), i != null && this.unexpected(i), a && this.raise(D.SpreadVariance, {
                    at: a
                  }), e.argument = this.flowParseType(), this.finishNode(e, "ObjectTypeSpreadProperty"));
                  {
                    e.key = this.flowParseObjectPropertyKey(), e["static"] = s, e.proto = i != null, e.kind = n;
                    var c = !1;
                    return this.match(47) || this.match(10) ? (e.method = !0, i != null && this.unexpected(i), a && this.unexpected(a.loc.start), e.value = this.flowParseObjectTypeMethodish(this.startNodeAt(e.loc.start)), (n === "get" || n === "set") && this.flowCheckGetterSetterParams(e), !o && e.key.name === "constructor" && e.value["this"] && this.raise(D.ThisParamBannedInConstructor, {
                      at: e.value["this"]
                    })) : (n !== "init" && this.unexpected(), e.method = !1, this.eat(17) && (c = !0), e.value = this.flowParseTypeInitialiser(), e.variance = a), e.optional = c, this.finishNode(e, "ObjectTypeProperty");
                  }
                }
              }, {
                key: "flowCheckGetterSetterParams",
                value: function flowCheckGetterSetterParams(e) {
                  var s = e.kind === "get" ? 0 : 1,
                      i = e.value.params.length + (e.value.rest ? 1 : 0);
                  e.value["this"] && this.raise(e.kind === "get" ? D.GetterMayNotHaveThisParam : D.SetterMayNotHaveThisParam, {
                    at: e.value["this"]
                  }), i !== s && this.raise(e.kind === "get" ? f.BadGetterArity : f.BadSetterArity, {
                    at: e
                  }), e.kind === "set" && e.value.rest && this.raise(f.BadSetterRestParameter, {
                    at: e
                  });
                }
              }, {
                key: "flowObjectTypeSemicolon",
                value: function flowObjectTypeSemicolon() {
                  !this.eat(13) && !this.eat(12) && !this.match(8) && !this.match(9) && this.unexpected();
                }
              }, {
                key: "flowParseQualifiedTypeIdentifier",
                value: function flowParseQualifiedTypeIdentifier(e, s) {
                  var i;
                  (i = e) != null || (e = this.state.startLoc);
                  var a = s || this.flowParseRestrictedIdentifier(!0);

                  for (; this.eat(16);) {
                    var n = this.startNodeAt(e);
                    n.qualification = a, n.id = this.flowParseRestrictedIdentifier(!0), a = this.finishNode(n, "QualifiedTypeIdentifier");
                  }

                  return a;
                }
              }, {
                key: "flowParseGenericType",
                value: function flowParseGenericType(e, s) {
                  var i = this.startNodeAt(e);
                  return i.typeParameters = null, i.id = this.flowParseQualifiedTypeIdentifier(e, s), this.match(47) && (i.typeParameters = this.flowParseTypeParameterInstantiation()), this.finishNode(i, "GenericTypeAnnotation");
                }
              }, {
                key: "flowParseTypeofType",
                value: function flowParseTypeofType() {
                  var e = this.startNode();
                  return this.expect(87), e.argument = this.flowParsePrimaryType(), this.finishNode(e, "TypeofTypeAnnotation");
                }
              }, {
                key: "flowParseTupleType",
                value: function flowParseTupleType() {
                  var e = this.startNode();

                  for (e.types = [], this.expect(0); this.state.pos < this.length && !this.match(3) && (e.types.push(this.flowParseType()), !this.match(3));) {
                    this.expect(12);
                  }

                  return this.expect(3), this.finishNode(e, "TupleTypeAnnotation");
                }
              }, {
                key: "flowParseFunctionTypeParam",
                value: function flowParseFunctionTypeParam(e) {
                  var s = null,
                      i = !1,
                      a = null,
                      n = this.startNode(),
                      o = this.lookahead(),
                      u = this.state.type === 78;
                  return o.type === 14 || o.type === 17 ? (u && !e && this.raise(D.ThisParamMustBeFirst, {
                    at: n
                  }), s = this.parseIdentifier(u), this.eat(17) && (i = !0, u && this.raise(D.ThisParamMayNotBeOptional, {
                    at: n
                  })), a = this.flowParseTypeInitialiser()) : a = this.flowParseType(), n.name = s, n.optional = i, n.typeAnnotation = a, this.finishNode(n, "FunctionTypeParam");
                }
              }, {
                key: "reinterpretTypeAsFunctionTypeParam",
                value: function reinterpretTypeAsFunctionTypeParam(e) {
                  var s = this.startNodeAt(e.loc.start);
                  return s.name = null, s.optional = !1, s.typeAnnotation = e, this.finishNode(s, "FunctionTypeParam");
                }
              }, {
                key: "flowParseFunctionTypeParams",
                value: function flowParseFunctionTypeParams() {
                  var e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [],
                      s = null,
                      i = null;

                  for (this.match(78) && (i = this.flowParseFunctionTypeParam(!0), i.name = null, this.match(11) || this.expect(12)); !this.match(11) && !this.match(21);) {
                    e.push(this.flowParseFunctionTypeParam(!1)), this.match(11) || this.expect(12);
                  }

                  return this.eat(21) && (s = this.flowParseFunctionTypeParam(!1)), {
                    params: e,
                    rest: s,
                    _this: i
                  };
                }
              }, {
                key: "flowIdentToTypeAnnotation",
                value: function flowIdentToTypeAnnotation(e, s, i) {
                  switch (i.name) {
                    case "any":
                      return this.finishNode(s, "AnyTypeAnnotation");

                    case "bool":
                    case "boolean":
                      return this.finishNode(s, "BooleanTypeAnnotation");

                    case "mixed":
                      return this.finishNode(s, "MixedTypeAnnotation");

                    case "empty":
                      return this.finishNode(s, "EmptyTypeAnnotation");

                    case "number":
                      return this.finishNode(s, "NumberTypeAnnotation");

                    case "string":
                      return this.finishNode(s, "StringTypeAnnotation");

                    case "symbol":
                      return this.finishNode(s, "SymbolTypeAnnotation");

                    default:
                      return this.checkNotUnderscore(i.name), this.flowParseGenericType(e, i);
                  }
                }
              }, {
                key: "flowParsePrimaryType",
                value: function flowParsePrimaryType() {
                  var e = this.state.startLoc,
                      s = this.startNode(),
                      i,
                      a,
                      n = !1,
                      o = this.state.noAnonFunctionType;

                  switch (this.state.type) {
                    case 5:
                      return this.flowParseObjectType({
                        allowStatic: !1,
                        allowExact: !1,
                        allowSpread: !0,
                        allowProto: !1,
                        allowInexact: !0
                      });

                    case 6:
                      return this.flowParseObjectType({
                        allowStatic: !1,
                        allowExact: !0,
                        allowSpread: !0,
                        allowProto: !1,
                        allowInexact: !1
                      });

                    case 0:
                      return this.state.noAnonFunctionType = !1, a = this.flowParseTupleType(), this.state.noAnonFunctionType = o, a;

                    case 47:
                      return s.typeParameters = this.flowParseTypeParameterDeclaration(), this.expect(10), i = this.flowParseFunctionTypeParams(), s.params = i.params, s.rest = i.rest, s["this"] = i._this, this.expect(11), this.expect(19), s.returnType = this.flowParseType(), this.finishNode(s, "FunctionTypeAnnotation");

                    case 10:
                      if (this.next(), !this.match(11) && !this.match(21)) if (q(this.state.type) || this.match(78)) {
                        var u = this.lookahead().type;
                        n = u !== 17 && u !== 14;
                      } else n = !0;

                      if (n) {
                        if (this.state.noAnonFunctionType = !1, a = this.flowParseType(), this.state.noAnonFunctionType = o, this.state.noAnonFunctionType || !(this.match(12) || this.match(11) && this.lookahead().type === 19)) return this.expect(11), a;
                        this.eat(12);
                      }

                      return a ? i = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(a)]) : i = this.flowParseFunctionTypeParams(), s.params = i.params, s.rest = i.rest, s["this"] = i._this, this.expect(11), this.expect(19), s.returnType = this.flowParseType(), s.typeParameters = null, this.finishNode(s, "FunctionTypeAnnotation");

                    case 131:
                      return this.parseLiteral(this.state.value, "StringLiteralTypeAnnotation");

                    case 85:
                    case 86:
                      return s.value = this.match(85), this.next(), this.finishNode(s, "BooleanLiteralTypeAnnotation");

                    case 53:
                      if (this.state.value === "-") {
                        if (this.next(), this.match(132)) return this.parseLiteralAtNode(-this.state.value, "NumberLiteralTypeAnnotation", s);
                        if (this.match(133)) return this.parseLiteralAtNode(-this.state.value, "BigIntLiteralTypeAnnotation", s);
                        throw this.raise(D.UnexpectedSubtractionOperand, {
                          at: this.state.startLoc
                        });
                      }

                      this.unexpected();
                      return;

                    case 132:
                      return this.parseLiteral(this.state.value, "NumberLiteralTypeAnnotation");

                    case 133:
                      return this.parseLiteral(this.state.value, "BigIntLiteralTypeAnnotation");

                    case 88:
                      return this.next(), this.finishNode(s, "VoidTypeAnnotation");

                    case 84:
                      return this.next(), this.finishNode(s, "NullLiteralTypeAnnotation");

                    case 78:
                      return this.next(), this.finishNode(s, "ThisTypeAnnotation");

                    case 55:
                      return this.next(), this.finishNode(s, "ExistsTypeAnnotation");

                    case 87:
                      return this.flowParseTypeofType();

                    default:
                      if ($t(this.state.type)) {
                        var _u3 = xe(this.state.type);

                        return this.next(), _get(_getPrototypeOf(_class2.prototype), "createIdentifier", this).call(this, s, _u3);
                      } else if (q(this.state.type)) return this.isContextual(127) ? this.flowParseInterfaceType() : this.flowIdentToTypeAnnotation(e, s, this.parseIdentifier());

                  }

                  this.unexpected();
                }
              }, {
                key: "flowParsePostfixType",
                value: function flowParsePostfixType() {
                  var e = this.state.startLoc,
                      s = this.flowParsePrimaryType(),
                      i = !1;

                  for (; (this.match(0) || this.match(18)) && !this.canInsertSemicolon();) {
                    var a = this.startNodeAt(e),
                        n = this.eat(18);
                    i = i || n, this.expect(0), !n && this.match(3) ? (a.elementType = s, this.next(), s = this.finishNode(a, "ArrayTypeAnnotation")) : (a.objectType = s, a.indexType = this.flowParseType(), this.expect(3), i ? (a.optional = n, s = this.finishNode(a, "OptionalIndexedAccessType")) : s = this.finishNode(a, "IndexedAccessType"));
                  }

                  return s;
                }
              }, {
                key: "flowParsePrefixType",
                value: function flowParsePrefixType() {
                  var e = this.startNode();
                  return this.eat(17) ? (e.typeAnnotation = this.flowParsePrefixType(), this.finishNode(e, "NullableTypeAnnotation")) : this.flowParsePostfixType();
                }
              }, {
                key: "flowParseAnonFunctionWithoutParens",
                value: function flowParseAnonFunctionWithoutParens() {
                  var e = this.flowParsePrefixType();

                  if (!this.state.noAnonFunctionType && this.eat(19)) {
                    var s = this.startNodeAt(e.loc.start);
                    return s.params = [this.reinterpretTypeAsFunctionTypeParam(e)], s.rest = null, s["this"] = null, s.returnType = this.flowParseType(), s.typeParameters = null, this.finishNode(s, "FunctionTypeAnnotation");
                  }

                  return e;
                }
              }, {
                key: "flowParseIntersectionType",
                value: function flowParseIntersectionType() {
                  var e = this.startNode();
                  this.eat(45);
                  var s = this.flowParseAnonFunctionWithoutParens();

                  for (e.types = [s]; this.eat(45);) {
                    e.types.push(this.flowParseAnonFunctionWithoutParens());
                  }

                  return e.types.length === 1 ? s : this.finishNode(e, "IntersectionTypeAnnotation");
                }
              }, {
                key: "flowParseUnionType",
                value: function flowParseUnionType() {
                  var e = this.startNode();
                  this.eat(43);
                  var s = this.flowParseIntersectionType();

                  for (e.types = [s]; this.eat(43);) {
                    e.types.push(this.flowParseIntersectionType());
                  }

                  return e.types.length === 1 ? s : this.finishNode(e, "UnionTypeAnnotation");
                }
              }, {
                key: "flowParseType",
                value: function flowParseType() {
                  var e = this.state.inType;
                  this.state.inType = !0;
                  var s = this.flowParseUnionType();
                  return this.state.inType = e, s;
                }
              }, {
                key: "flowParseTypeOrImplicitInstantiation",
                value: function flowParseTypeOrImplicitInstantiation() {
                  if (this.state.type === 130 && this.state.value === "_") {
                    var e = this.state.startLoc,
                        s = this.parseIdentifier();
                    return this.flowParseGenericType(e, s);
                  } else return this.flowParseType();
                }
              }, {
                key: "flowParseTypeAnnotation",
                value: function flowParseTypeAnnotation() {
                  var e = this.startNode();
                  return e.typeAnnotation = this.flowParseTypeInitialiser(), this.finishNode(e, "TypeAnnotation");
                }
              }, {
                key: "flowParseTypeAnnotatableIdentifier",
                value: function flowParseTypeAnnotatableIdentifier(e) {
                  var s = e ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();
                  return this.match(14) && (s.typeAnnotation = this.flowParseTypeAnnotation(), this.resetEndLocation(s)), s;
                }
              }, {
                key: "typeCastToParameter",
                value: function typeCastToParameter(e) {
                  return e.expression.typeAnnotation = e.typeAnnotation, this.resetEndLocation(e.expression, e.typeAnnotation.loc.end), e.expression;
                }
              }, {
                key: "flowParseVariance",
                value: function flowParseVariance() {
                  var e = null;
                  return this.match(53) ? (e = this.startNode(), this.state.value === "+" ? e.kind = "plus" : e.kind = "minus", this.next(), this.finishNode(e, "Variance")) : e;
                }
              }, {
                key: "parseFunctionBody",
                value: function parseFunctionBody(e, s) {
                  var _this12 = this;

                  var i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;

                  if (s) {
                    this.forwardNoArrowParamsConversionAt(e, function () {
                      return _get(_getPrototypeOf(_class2.prototype), "parseFunctionBody", _this12).call(_this12, e, !0, i);
                    });
                    return;
                  }

                  _get(_getPrototypeOf(_class2.prototype), "parseFunctionBody", this).call(this, e, !1, i);
                }
              }, {
                key: "parseFunctionBodyAndFinish",
                value: function parseFunctionBodyAndFinish(e, s) {
                  var i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;

                  if (this.match(14)) {
                    var _this$flowParseTypeAn3, _this$flowParseTypeAn4;

                    var a = this.startNode();
                    (_this$flowParseTypeAn3 = this.flowParseTypeAndPredicateInitialiser(), _this$flowParseTypeAn4 = _slicedToArray(_this$flowParseTypeAn3, 2), a.typeAnnotation = _this$flowParseTypeAn4[0], e.predicate = _this$flowParseTypeAn4[1], _this$flowParseTypeAn3), e.returnType = a.typeAnnotation ? this.finishNode(a, "TypeAnnotation") : null;
                  }

                  return _get(_getPrototypeOf(_class2.prototype), "parseFunctionBodyAndFinish", this).call(this, e, s, i);
                }
              }, {
                key: "parseStatementLike",
                value: function parseStatementLike(e) {
                  if (this.state.strict && this.isContextual(127)) {
                    var i = this.lookahead();

                    if (te(i.type)) {
                      var a = this.startNode();
                      return this.next(), this.flowParseInterface(a);
                    }
                  } else if (this.shouldParseEnums() && this.isContextual(124)) {
                    var _i9 = this.startNode();

                    return this.next(), this.flowParseEnumDeclaration(_i9);
                  }

                  var s = _get(_getPrototypeOf(_class2.prototype), "parseStatementLike", this).call(this, e);

                  return this.flowPragma === void 0 && !this.isValidDirective(s) && (this.flowPragma = null), s;
                }
              }, {
                key: "parseExpressionStatement",
                value: function parseExpressionStatement(e, s, i) {
                  if (s.type === "Identifier") {
                    if (s.name === "declare") {
                      if (this.match(80) || q(this.state.type) || this.match(68) || this.match(74) || this.match(82)) return this.flowParseDeclare(e);
                    } else if (q(this.state.type)) {
                      if (s.name === "interface") return this.flowParseInterface(e);
                      if (s.name === "type") return this.flowParseTypeAlias(e);
                      if (s.name === "opaque") return this.flowParseOpaqueType(e, !1);
                    }
                  }

                  return _get(_getPrototypeOf(_class2.prototype), "parseExpressionStatement", this).call(this, e, s, i);
                }
              }, {
                key: "shouldParseExportDeclaration",
                value: function shouldParseExportDeclaration() {
                  var e = this.state.type;
                  return hr(e) || this.shouldParseEnums() && e === 124 ? !this.state.containsEsc : _get(_getPrototypeOf(_class2.prototype), "shouldParseExportDeclaration", this).call(this);
                }
              }, {
                key: "isExportDefaultSpecifier",
                value: function isExportDefaultSpecifier() {
                  var e = this.state.type;
                  return hr(e) || this.shouldParseEnums() && e === 124 ? this.state.containsEsc : _get(_getPrototypeOf(_class2.prototype), "isExportDefaultSpecifier", this).call(this);
                }
              }, {
                key: "parseExportDefaultExpression",
                value: function parseExportDefaultExpression() {
                  if (this.shouldParseEnums() && this.isContextual(124)) {
                    var e = this.startNode();
                    return this.next(), this.flowParseEnumDeclaration(e);
                  }

                  return _get(_getPrototypeOf(_class2.prototype), "parseExportDefaultExpression", this).call(this);
                }
              }, {
                key: "parseConditional",
                value: function parseConditional(e, s, i) {
                  var _this13 = this;

                  if (!this.match(17)) return e;

                  if (this.state.maybeInArrowParameters) {
                    var T = this.lookaheadCharCode();
                    if (T === 44 || T === 61 || T === 58 || T === 41) return this.setOptionalParametersError(i), e;
                  }

                  this.expect(17);

                  var a = this.state.clone(),
                      n = this.state.noArrowAt,
                      o = this.startNodeAt(s),
                      _this$tryParseConditi = this.tryParseConditionalConsequent(),
                      u = _this$tryParseConditi.consequent,
                      c = _this$tryParseConditi.failed,
                      _this$getArrowLikeExp = this.getArrowLikeExpressions(u),
                      _this$getArrowLikeExp2 = _slicedToArray(_this$getArrowLikeExp, 2),
                      y = _this$getArrowLikeExp2[0],
                      g = _this$getArrowLikeExp2[1];

                  if (c || g.length > 0) {
                    var _this$tryParseConditi3;

                    var _T = _toConsumableArray(n);

                    if (g.length > 0) {
                      var _this$tryParseConditi2, _this$getArrowLikeExp3, _this$getArrowLikeExp4;

                      this.state = a, this.state.noArrowAt = _T;

                      for (var C = 0; C < g.length; C++) {
                        _T.push(g[C].start);
                      }

                      (_this$tryParseConditi2 = this.tryParseConditionalConsequent(), u = _this$tryParseConditi2.consequent, c = _this$tryParseConditi2.failed, _this$tryParseConditi2), (_this$getArrowLikeExp3 = this.getArrowLikeExpressions(u), _this$getArrowLikeExp4 = _slicedToArray(_this$getArrowLikeExp3, 2), y = _this$getArrowLikeExp4[0], g = _this$getArrowLikeExp4[1], _this$getArrowLikeExp3);
                    }

                    c && y.length > 1 && this.raise(D.AmbiguousConditionalArrow, {
                      at: a.startLoc
                    }), c && y.length === 1 && (this.state = a, _T.push(y[0].start), this.state.noArrowAt = _T, (_this$tryParseConditi3 = this.tryParseConditionalConsequent(), u = _this$tryParseConditi3.consequent, c = _this$tryParseConditi3.failed, _this$tryParseConditi3));
                  }

                  return this.getArrowLikeExpressions(u, !0), this.state.noArrowAt = n, this.expect(14), o.test = e, o.consequent = u, o.alternate = this.forwardNoArrowParamsConversionAt(o, function () {
                    return _this13.parseMaybeAssign(void 0, void 0);
                  }), this.finishNode(o, "ConditionalExpression");
                }
              }, {
                key: "tryParseConditionalConsequent",
                value: function tryParseConditionalConsequent() {
                  this.state.noArrowParamsConversionAt.push(this.state.start);
                  var e = this.parseMaybeAssignAllowIn(),
                      s = !this.match(14);
                  return this.state.noArrowParamsConversionAt.pop(), {
                    consequent: e,
                    failed: s
                  };
                }
              }, {
                key: "getArrowLikeExpressions",
                value: function getArrowLikeExpressions(e, s) {
                  var _this14 = this;

                  var i = [e],
                      a = [];

                  for (; i.length !== 0;) {
                    var n = i.pop();
                    n.type === "ArrowFunctionExpression" ? (n.typeParameters || !n.returnType ? this.finishArrowValidation(n) : a.push(n), i.push(n.body)) : n.type === "ConditionalExpression" && (i.push(n.consequent), i.push(n.alternate));
                  }

                  return s ? (a.forEach(function (n) {
                    return _this14.finishArrowValidation(n);
                  }), [a, []]) : Yl(a, function (n) {
                    return n.params.every(function (o) {
                      return _this14.isAssignable(o, !0);
                    });
                  });
                }
              }, {
                key: "finishArrowValidation",
                value: function finishArrowValidation(e) {
                  var s;
                  this.toAssignableList(e.params, (s = e.extra) == null ? void 0 : s.trailingCommaLoc, !1), this.scope.enter(de | Gt), _get(_getPrototypeOf(_class2.prototype), "checkParams", this).call(this, e, !1, !0), this.scope.exit();
                }
              }, {
                key: "forwardNoArrowParamsConversionAt",
                value: function forwardNoArrowParamsConversionAt(e, s) {
                  var i;
                  return this.state.noArrowParamsConversionAt.indexOf(e.start) !== -1 ? (this.state.noArrowParamsConversionAt.push(this.state.start), i = s(), this.state.noArrowParamsConversionAt.pop()) : i = s(), i;
                }
              }, {
                key: "parseParenItem",
                value: function parseParenItem(e, s) {
                  if (e = _get(_getPrototypeOf(_class2.prototype), "parseParenItem", this).call(this, e, s), this.eat(17) && (e.optional = !0, this.resetEndLocation(e)), this.match(14)) {
                    var i = this.startNodeAt(s);
                    return i.expression = e, i.typeAnnotation = this.flowParseTypeAnnotation(), this.finishNode(i, "TypeCastExpression");
                  }

                  return e;
                }
              }, {
                key: "assertModuleNodeAllowed",
                value: function assertModuleNodeAllowed(e) {
                  e.type === "ImportDeclaration" && (e.importKind === "type" || e.importKind === "typeof") || e.type === "ExportNamedDeclaration" && e.exportKind === "type" || e.type === "ExportAllDeclaration" && e.exportKind === "type" || _get(_getPrototypeOf(_class2.prototype), "assertModuleNodeAllowed", this).call(this, e);
                }
              }, {
                key: "parseExport",
                value: function parseExport(e, s) {
                  var i = _get(_getPrototypeOf(_class2.prototype), "parseExport", this).call(this, e, s);

                  return (i.type === "ExportNamedDeclaration" || i.type === "ExportAllDeclaration") && (i.exportKind = i.exportKind || "value"), i;
                }
              }, {
                key: "parseExportDeclaration",
                value: function parseExportDeclaration(e) {
                  if (this.isContextual(128)) {
                    e.exportKind = "type";
                    var s = this.startNode();
                    return this.next(), this.match(5) ? (e.specifiers = this.parseExportSpecifiers(!0), _get(_getPrototypeOf(_class2.prototype), "parseExportFrom", this).call(this, e), null) : this.flowParseTypeAlias(s);
                  } else if (this.isContextual(129)) {
                    e.exportKind = "type";

                    var _s8 = this.startNode();

                    return this.next(), this.flowParseOpaqueType(_s8, !1);
                  } else if (this.isContextual(127)) {
                    e.exportKind = "type";

                    var _s9 = this.startNode();

                    return this.next(), this.flowParseInterface(_s9);
                  } else if (this.shouldParseEnums() && this.isContextual(124)) {
                    e.exportKind = "value";

                    var _s10 = this.startNode();

                    return this.next(), this.flowParseEnumDeclaration(_s10);
                  } else return _get(_getPrototypeOf(_class2.prototype), "parseExportDeclaration", this).call(this, e);
                }
              }, {
                key: "eatExportStar",
                value: function eatExportStar(e) {
                  return _get(_getPrototypeOf(_class2.prototype), "eatExportStar", this).call(this, e) ? !0 : this.isContextual(128) && this.lookahead().type === 55 ? (e.exportKind = "type", this.next(), this.next(), !0) : !1;
                }
              }, {
                key: "maybeParseExportNamespaceSpecifier",
                value: function maybeParseExportNamespaceSpecifier(e) {
                  var s = this.state.startLoc,
                      i = _get(_getPrototypeOf(_class2.prototype), "maybeParseExportNamespaceSpecifier", this).call(this, e);

                  return i && e.exportKind === "type" && this.unexpected(s), i;
                }
              }, {
                key: "parseClassId",
                value: function parseClassId(e, s, i) {
                  _get(_getPrototypeOf(_class2.prototype), "parseClassId", this).call(this, e, s, i), this.match(47) && (e.typeParameters = this.flowParseTypeParameterDeclaration());
                }
              }, {
                key: "parseClassMember",
                value: function parseClassMember(e, s, i) {
                  var a = this.state.startLoc;

                  if (this.isContextual(123)) {
                    if (_get(_getPrototypeOf(_class2.prototype), "parseClassMemberFromModifier", this).call(this, e, s)) return;
                    s.declare = !0;
                  }

                  _get(_getPrototypeOf(_class2.prototype), "parseClassMember", this).call(this, e, s, i), s.declare && (s.type !== "ClassProperty" && s.type !== "ClassPrivateProperty" && s.type !== "PropertyDefinition" ? this.raise(D.DeclareClassElement, {
                    at: a
                  }) : s.value && this.raise(D.DeclareClassFieldInitializer, {
                    at: s.value
                  }));
                }
              }, {
                key: "isIterator",
                value: function isIterator(e) {
                  return e === "iterator" || e === "asyncIterator";
                }
              }, {
                key: "readIterator",
                value: function readIterator() {
                  var e = _get(_getPrototypeOf(_class2.prototype), "readWord1", this).call(this),
                      s = "@@" + e;

                  (!this.isIterator(e) || !this.state.inType) && this.raise(f.InvalidIdentifier, {
                    at: this.state.curPosition(),
                    identifierName: s
                  }), this.finishToken(130, s);
                }
              }, {
                key: "getTokenFromCode",
                value: function getTokenFromCode(e) {
                  var s = this.input.charCodeAt(this.state.pos + 1);
                  e === 123 && s === 124 ? this.finishOp(6, 2) : this.state.inType && (e === 62 || e === 60) ? this.finishOp(e === 62 ? 48 : 47, 1) : this.state.inType && e === 63 ? s === 46 ? this.finishOp(18, 2) : this.finishOp(17, 1) : ll(e, s, this.input.charCodeAt(this.state.pos + 2)) ? (this.state.pos += 2, this.readIterator()) : _get(_getPrototypeOf(_class2.prototype), "getTokenFromCode", this).call(this, e);
                }
              }, {
                key: "isAssignable",
                value: function isAssignable(e, s) {
                  return e.type === "TypeCastExpression" ? this.isAssignable(e.expression, s) : _get(_getPrototypeOf(_class2.prototype), "isAssignable", this).call(this, e, s);
                }
              }, {
                key: "toAssignable",
                value: function toAssignable(e) {
                  var s = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
                  !s && e.type === "AssignmentExpression" && e.left.type === "TypeCastExpression" && (e.left = this.typeCastToParameter(e.left)), _get(_getPrototypeOf(_class2.prototype), "toAssignable", this).call(this, e, s);
                }
              }, {
                key: "toAssignableList",
                value: function toAssignableList(e, s, i) {
                  for (var a = 0; a < e.length; a++) {
                    var n = e[a];
                    (n == null ? void 0 : n.type) === "TypeCastExpression" && (e[a] = this.typeCastToParameter(n));
                  }

                  _get(_getPrototypeOf(_class2.prototype), "toAssignableList", this).call(this, e, s, i);
                }
              }, {
                key: "toReferencedList",
                value: function toReferencedList(e, s) {
                  for (var a = 0; a < e.length; a++) {
                    var i;
                    var n = e[a];
                    n && n.type === "TypeCastExpression" && !((i = n.extra) != null && i.parenthesized) && (e.length > 1 || !s) && this.raise(D.TypeCastInPattern, {
                      at: n.typeAnnotation
                    });
                  }

                  return e;
                }
              }, {
                key: "parseArrayLike",
                value: function parseArrayLike(e, s, i, a) {
                  var n = _get(_getPrototypeOf(_class2.prototype), "parseArrayLike", this).call(this, e, s, i, a);

                  return s && !this.state.maybeInArrowParameters && this.toReferencedList(n.elements), n;
                }
              }, {
                key: "isValidLVal",
                value: function isValidLVal(e, s, i) {
                  return e === "TypeCastExpression" || _get(_getPrototypeOf(_class2.prototype), "isValidLVal", this).call(this, e, s, i);
                }
              }, {
                key: "parseClassProperty",
                value: function parseClassProperty(e) {
                  return this.match(14) && (e.typeAnnotation = this.flowParseTypeAnnotation()), _get(_getPrototypeOf(_class2.prototype), "parseClassProperty", this).call(this, e);
                }
              }, {
                key: "parseClassPrivateProperty",
                value: function parseClassPrivateProperty(e) {
                  return this.match(14) && (e.typeAnnotation = this.flowParseTypeAnnotation()), _get(_getPrototypeOf(_class2.prototype), "parseClassPrivateProperty", this).call(this, e);
                }
              }, {
                key: "isClassMethod",
                value: function isClassMethod() {
                  return this.match(47) || _get(_getPrototypeOf(_class2.prototype), "isClassMethod", this).call(this);
                }
              }, {
                key: "isClassProperty",
                value: function isClassProperty() {
                  return this.match(14) || _get(_getPrototypeOf(_class2.prototype), "isClassProperty", this).call(this);
                }
              }, {
                key: "isNonstaticConstructor",
                value: function isNonstaticConstructor(e) {
                  return !this.match(14) && _get(_getPrototypeOf(_class2.prototype), "isNonstaticConstructor", this).call(this, e);
                }
              }, {
                key: "pushClassMethod",
                value: function pushClassMethod(e, s, i, a, n, o) {
                  if (s.variance && this.unexpected(s.variance.loc.start), delete s.variance, this.match(47) && (s.typeParameters = this.flowParseTypeParameterDeclaration()), _get(_getPrototypeOf(_class2.prototype), "pushClassMethod", this).call(this, e, s, i, a, n, o), s.params && n) {
                    var u = s.params;
                    u.length > 0 && this.isThisParam(u[0]) && this.raise(D.ThisParamBannedInConstructor, {
                      at: s
                    });
                  } else if (s.type === "MethodDefinition" && n && s.value.params) {
                    var _u4 = s.value.params;
                    _u4.length > 0 && this.isThisParam(_u4[0]) && this.raise(D.ThisParamBannedInConstructor, {
                      at: s
                    });
                  }
                }
              }, {
                key: "pushClassPrivateMethod",
                value: function pushClassPrivateMethod(e, s, i, a) {
                  s.variance && this.unexpected(s.variance.loc.start), delete s.variance, this.match(47) && (s.typeParameters = this.flowParseTypeParameterDeclaration()), _get(_getPrototypeOf(_class2.prototype), "pushClassPrivateMethod", this).call(this, e, s, i, a);
                }
              }, {
                key: "parseClassSuper",
                value: function parseClassSuper(e) {
                  if (_get(_getPrototypeOf(_class2.prototype), "parseClassSuper", this).call(this, e), e.superClass && this.match(47) && (e.superTypeParameters = this.flowParseTypeParameterInstantiation()), this.isContextual(111)) {
                    this.next();
                    var s = e["implements"] = [];

                    do {
                      var i = this.startNode();
                      i.id = this.flowParseRestrictedIdentifier(!0), this.match(47) ? i.typeParameters = this.flowParseTypeParameterInstantiation() : i.typeParameters = null, s.push(this.finishNode(i, "ClassImplements"));
                    } while (this.eat(12));
                  }
                }
              }, {
                key: "checkGetterSetterParams",
                value: function checkGetterSetterParams(e) {
                  _get(_getPrototypeOf(_class2.prototype), "checkGetterSetterParams", this).call(this, e);

                  var s = this.getObjectOrClassMethodParams(e);

                  if (s.length > 0) {
                    var i = s[0];
                    this.isThisParam(i) && e.kind === "get" ? this.raise(D.GetterMayNotHaveThisParam, {
                      at: i
                    }) : this.isThisParam(i) && this.raise(D.SetterMayNotHaveThisParam, {
                      at: i
                    });
                  }
                }
              }, {
                key: "parsePropertyNamePrefixOperator",
                value: function parsePropertyNamePrefixOperator(e) {
                  e.variance = this.flowParseVariance();
                }
              }, {
                key: "parseObjPropValue",
                value: function parseObjPropValue(e, s, i, a, n, o, u) {
                  e.variance && this.unexpected(e.variance.loc.start), delete e.variance;
                  var c;
                  this.match(47) && !o && (c = this.flowParseTypeParameterDeclaration(), this.match(10) || this.unexpected());

                  var y = _get(_getPrototypeOf(_class2.prototype), "parseObjPropValue", this).call(this, e, s, i, a, n, o, u);

                  return c && ((y.value || y).typeParameters = c), y;
                }
              }, {
                key: "parseAssignableListItemTypes",
                value: function parseAssignableListItemTypes(e) {
                  return this.eat(17) && (e.type !== "Identifier" && this.raise(D.PatternIsOptional, {
                    at: e
                  }), this.isThisParam(e) && this.raise(D.ThisParamMayNotBeOptional, {
                    at: e
                  }), e.optional = !0), this.match(14) ? e.typeAnnotation = this.flowParseTypeAnnotation() : this.isThisParam(e) && this.raise(D.ThisParamAnnotationRequired, {
                    at: e
                  }), this.match(29) && this.isThisParam(e) && this.raise(D.ThisParamNoDefault, {
                    at: e
                  }), this.resetEndLocation(e), e;
                }
              }, {
                key: "parseMaybeDefault",
                value: function parseMaybeDefault(e, s) {
                  var i = _get(_getPrototypeOf(_class2.prototype), "parseMaybeDefault", this).call(this, e, s);

                  return i.type === "AssignmentPattern" && i.typeAnnotation && i.right.start < i.typeAnnotation.start && this.raise(D.TypeBeforeInitializer, {
                    at: i.typeAnnotation
                  }), i;
                }
              }, {
                key: "shouldParseDefaultImport",
                value: function shouldParseDefaultImport(e) {
                  return us(e) ? qr(this.state.type) : _get(_getPrototypeOf(_class2.prototype), "shouldParseDefaultImport", this).call(this, e);
                }
              }, {
                key: "checkImportReflection",
                value: function checkImportReflection(e) {
                  _get(_getPrototypeOf(_class2.prototype), "checkImportReflection", this).call(this, e), e.module && e.importKind !== "value" && this.raise(D.ImportReflectionHasImportType, {
                    at: e.specifiers[0].loc.start
                  });
                }
              }, {
                key: "parseImportSpecifierLocal",
                value: function parseImportSpecifierLocal(e, s, i) {
                  s.local = us(e) ? this.flowParseRestrictedIdentifier(!0, !0) : this.parseIdentifier(), e.specifiers.push(this.finishImportSpecifier(s, i));
                }
              }, {
                key: "maybeParseDefaultImportSpecifier",
                value: function maybeParseDefaultImportSpecifier(e) {
                  e.importKind = "value";
                  var s = null;

                  if (this.match(87) ? s = "typeof" : this.isContextual(128) && (s = "type"), s) {
                    var i = this.lookahead(),
                        a = i.type;
                    s === "type" && a === 55 && this.unexpected(null, i.type), (qr(a) || a === 5 || a === 55) && (this.next(), e.importKind = s);
                  }

                  return _get(_getPrototypeOf(_class2.prototype), "maybeParseDefaultImportSpecifier", this).call(this, e);
                }
              }, {
                key: "parseImportSpecifier",
                value: function parseImportSpecifier(e, s, i, a, n) {
                  var o = e.imported,
                      u = null;
                  o.type === "Identifier" && (o.name === "type" ? u = "type" : o.name === "typeof" && (u = "typeof"));
                  var c = !1;

                  if (this.isContextual(93) && !this.isLookaheadContextual("as")) {
                    var g = this.parseIdentifier(!0);
                    u !== null && !te(this.state.type) ? (e.imported = g, e.importKind = u, e.local = me(g)) : (e.imported = o, e.importKind = null, e.local = this.parseIdentifier());
                  } else {
                    if (u !== null && te(this.state.type)) e.imported = this.parseIdentifier(!0), e.importKind = u;else {
                      if (s) throw this.raise(f.ImportBindingIsString, {
                        at: e,
                        importName: o.value
                      });
                      e.imported = o, e.importKind = null;
                    }
                    this.eatContextual(93) ? e.local = this.parseIdentifier() : (c = !0, e.local = me(e.imported));
                  }

                  var y = us(e);
                  return i && y && this.raise(D.ImportTypeShorthandOnlyInPureImport, {
                    at: e
                  }), (i || y) && this.checkReservedType(e.local.name, e.local.loc.start, !0), c && !i && !y && this.checkReservedWord(e.local.name, e.loc.start, !0, !0), this.finishImportSpecifier(e, "ImportSpecifier");
                }
              }, {
                key: "parseBindingAtom",
                value: function parseBindingAtom() {
                  switch (this.state.type) {
                    case 78:
                      return this.parseIdentifier(!0);

                    default:
                      return _get(_getPrototypeOf(_class2.prototype), "parseBindingAtom", this).call(this);
                  }
                }
              }, {
                key: "parseFunctionParams",
                value: function parseFunctionParams(e, s) {
                  var i = e.kind;
                  i !== "get" && i !== "set" && this.match(47) && (e.typeParameters = this.flowParseTypeParameterDeclaration()), _get(_getPrototypeOf(_class2.prototype), "parseFunctionParams", this).call(this, e, s);
                }
              }, {
                key: "parseVarId",
                value: function parseVarId(e, s) {
                  _get(_getPrototypeOf(_class2.prototype), "parseVarId", this).call(this, e, s), this.match(14) && (e.id.typeAnnotation = this.flowParseTypeAnnotation(), this.resetEndLocation(e.id));
                }
              }, {
                key: "parseAsyncArrowFromCallExpression",
                value: function parseAsyncArrowFromCallExpression(e, s) {
                  if (this.match(14)) {
                    var i = this.state.noAnonFunctionType;
                    this.state.noAnonFunctionType = !0, e.returnType = this.flowParseTypeAnnotation(), this.state.noAnonFunctionType = i;
                  }

                  return _get(_getPrototypeOf(_class2.prototype), "parseAsyncArrowFromCallExpression", this).call(this, e, s);
                }
              }, {
                key: "shouldParseAsyncArrow",
                value: function shouldParseAsyncArrow() {
                  return this.match(14) || _get(_getPrototypeOf(_class2.prototype), "shouldParseAsyncArrow", this).call(this);
                }
              }, {
                key: "parseMaybeAssign",
                value: function parseMaybeAssign(e, s) {
                  var _this15 = this;

                  var i;
                  var a = null,
                      n;

                  if (this.hasPlugin("jsx") && (this.match(140) || this.match(47))) {
                    if (a = this.state.clone(), n = this.tryParse(function () {
                      return _get(_getPrototypeOf(_class2.prototype), "parseMaybeAssign", _this15).call(_this15, e, s);
                    }, a), !n.error) return n.node;
                    var c = this.state.context,
                        y = c[c.length - 1];
                    (y === x.j_oTag || y === x.j_expr) && c.pop();
                  }

                  if ((i = n) != null && i.error || this.match(47)) {
                    var o, u;
                    a = a || this.state.clone();

                    var _c4,
                        _y = this.tryParse(function (T) {
                      var C;
                      _c4 = _this15.flowParseTypeParameterDeclaration();

                      var M = _this15.forwardNoArrowParamsConversionAt(_c4, function () {
                        var K = _get(_getPrototypeOf(_class2.prototype), "parseMaybeAssign", _this15).call(_this15, e, s);

                        return _this15.resetStartLocationFromNode(K, _c4), K;
                      });

                      (C = M.extra) != null && C.parenthesized && T();

                      var j = _this15.maybeUnwrapTypeCastExpression(M);

                      return j.type !== "ArrowFunctionExpression" && T(), j.typeParameters = _c4, _this15.resetStartLocationFromNode(j, _c4), M;
                    }, a),
                        g = null;

                    if (_y.node && this.maybeUnwrapTypeCastExpression(_y.node).type === "ArrowFunctionExpression") {
                      if (!_y.error && !_y.aborted) return _y.node.async && this.raise(D.UnexpectedTypeParameterBeforeAsyncArrowFunction, {
                        at: _c4
                      }), _y.node;
                      g = _y.node;
                    }

                    if ((o = n) != null && o.node) return this.state = n.failState, n.node;
                    if (g) return this.state = _y.failState, g;
                    throw (u = n) != null && u.thrown ? n.error : _y.thrown ? _y.error : this.raise(D.UnexpectedTokenAfterTypeParameter, {
                      at: _c4
                    });
                  }

                  return _get(_getPrototypeOf(_class2.prototype), "parseMaybeAssign", this).call(this, e, s);
                }
              }, {
                key: "parseArrow",
                value: function parseArrow(e) {
                  var _this16 = this;

                  if (this.match(14)) {
                    var s = this.tryParse(function () {
                      var _this16$flowParseType, _this16$flowParseType2;

                      var i = _this16.state.noAnonFunctionType;
                      _this16.state.noAnonFunctionType = !0;

                      var a = _this16.startNode();

                      return (_this16$flowParseType = _this16.flowParseTypeAndPredicateInitialiser(), _this16$flowParseType2 = _slicedToArray(_this16$flowParseType, 2), a.typeAnnotation = _this16$flowParseType2[0], e.predicate = _this16$flowParseType2[1], _this16$flowParseType), _this16.state.noAnonFunctionType = i, _this16.canInsertSemicolon() && _this16.unexpected(), _this16.match(19) || _this16.unexpected(), a;
                    });
                    if (s.thrown) return null;
                    s.error && (this.state = s.failState), e.returnType = s.node.typeAnnotation ? this.finishNode(s.node, "TypeAnnotation") : null;
                  }

                  return _get(_getPrototypeOf(_class2.prototype), "parseArrow", this).call(this, e);
                }
              }, {
                key: "shouldParseArrow",
                value: function shouldParseArrow(e) {
                  return this.match(14) || _get(_getPrototypeOf(_class2.prototype), "shouldParseArrow", this).call(this, e);
                }
              }, {
                key: "setArrowFunctionParameters",
                value: function setArrowFunctionParameters(e, s) {
                  this.state.noArrowParamsConversionAt.indexOf(e.start) !== -1 ? e.params = s : _get(_getPrototypeOf(_class2.prototype), "setArrowFunctionParameters", this).call(this, e, s);
                }
              }, {
                key: "checkParams",
                value: function checkParams(e, s, i) {
                  var a = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !0;

                  if (!(i && this.state.noArrowParamsConversionAt.indexOf(e.start) !== -1)) {
                    for (var n = 0; n < e.params.length; n++) {
                      this.isThisParam(e.params[n]) && n > 0 && this.raise(D.ThisParamMustBeFirst, {
                        at: e.params[n]
                      });
                    }

                    _get(_getPrototypeOf(_class2.prototype), "checkParams", this).call(this, e, s, i, a);
                  }
                }
              }, {
                key: "parseParenAndDistinguishExpression",
                value: function parseParenAndDistinguishExpression(e) {
                  return _get(_getPrototypeOf(_class2.prototype), "parseParenAndDistinguishExpression", this).call(this, e && this.state.noArrowAt.indexOf(this.state.start) === -1);
                }
              }, {
                key: "parseSubscripts",
                value: function parseSubscripts(e, s, i) {
                  var _this17 = this;

                  if (e.type === "Identifier" && e.name === "async" && this.state.noArrowAt.indexOf(s.index) !== -1) {
                    this.next();
                    var a = this.startNodeAt(s);
                    a.callee = e, a.arguments = _get(_getPrototypeOf(_class2.prototype), "parseCallExpressionArguments", this).call(this, 11, !1), e = this.finishNode(a, "CallExpression");
                  } else if (e.type === "Identifier" && e.name === "async" && this.match(47)) {
                    var _a2 = this.state.clone(),
                        n = this.tryParse(function (u) {
                      return _this17.parseAsyncArrowWithTypeParameters(s) || u();
                    }, _a2);

                    if (!n.error && !n.aborted) return n.node;
                    var o = this.tryParse(function () {
                      return _get(_getPrototypeOf(_class2.prototype), "parseSubscripts", _this17).call(_this17, e, s, i);
                    }, _a2);
                    if (o.node && !o.error) return o.node;
                    if (n.node) return this.state = n.failState, n.node;
                    if (o.node) return this.state = o.failState, o.node;
                    throw n.error || o.error;
                  }

                  return _get(_getPrototypeOf(_class2.prototype), "parseSubscripts", this).call(this, e, s, i);
                }
              }, {
                key: "parseSubscript",
                value: function parseSubscript(e, s, i, a) {
                  var _this18 = this;

                  if (this.match(18) && this.isLookaheadToken_lt()) {
                    if (a.optionalChainMember = !0, i) return a.stop = !0, e;
                    this.next();
                    var n = this.startNodeAt(s);
                    return n.callee = e, n.typeArguments = this.flowParseTypeParameterInstantiation(), this.expect(10), n.arguments = this.parseCallExpressionArguments(11, !1), n.optional = !0, this.finishCallExpression(n, !0);
                  } else if (!i && this.shouldParseTypes() && this.match(47)) {
                    var _n2 = this.startNodeAt(s);

                    _n2.callee = e;
                    var o = this.tryParse(function () {
                      return _n2.typeArguments = _this18.flowParseTypeParameterInstantiationCallOrNew(), _this18.expect(10), _n2.arguments = _get(_getPrototypeOf(_class2.prototype), "parseCallExpressionArguments", _this18).call(_this18, 11, !1), a.optionalChainMember && (_n2.optional = !1), _this18.finishCallExpression(_n2, a.optionalChainMember);
                    });
                    if (o.node) return o.error && (this.state = o.failState), o.node;
                  }

                  return _get(_getPrototypeOf(_class2.prototype), "parseSubscript", this).call(this, e, s, i, a);
                }
              }, {
                key: "parseNewCallee",
                value: function parseNewCallee(e) {
                  var _this19 = this;

                  _get(_getPrototypeOf(_class2.prototype), "parseNewCallee", this).call(this, e);

                  var s = null;
                  this.shouldParseTypes() && this.match(47) && (s = this.tryParse(function () {
                    return _this19.flowParseTypeParameterInstantiationCallOrNew();
                  }).node), e.typeArguments = s;
                }
              }, {
                key: "parseAsyncArrowWithTypeParameters",
                value: function parseAsyncArrowWithTypeParameters(e) {
                  var s = this.startNodeAt(e);
                  if (this.parseFunctionParams(s, !1), !!this.parseArrow(s)) return _get(_getPrototypeOf(_class2.prototype), "parseArrowExpression", this).call(this, s, void 0, !0);
                }
              }, {
                key: "readToken_mult_modulo",
                value: function readToken_mult_modulo(e) {
                  var s = this.input.charCodeAt(this.state.pos + 1);

                  if (e === 42 && s === 47 && this.state.hasFlowComment) {
                    this.state.hasFlowComment = !1, this.state.pos += 2, this.nextToken();
                    return;
                  }

                  _get(_getPrototypeOf(_class2.prototype), "readToken_mult_modulo", this).call(this, e);
                }
              }, {
                key: "readToken_pipe_amp",
                value: function readToken_pipe_amp(e) {
                  var s = this.input.charCodeAt(this.state.pos + 1);

                  if (e === 124 && s === 125) {
                    this.finishOp(9, 2);
                    return;
                  }

                  _get(_getPrototypeOf(_class2.prototype), "readToken_pipe_amp", this).call(this, e);
                }
              }, {
                key: "parseTopLevel",
                value: function parseTopLevel(e, s) {
                  var i = _get(_getPrototypeOf(_class2.prototype), "parseTopLevel", this).call(this, e, s);

                  return this.state.hasFlowComment && this.raise(D.UnterminatedFlowComment, {
                    at: this.state.curPosition()
                  }), i;
                }
              }, {
                key: "skipBlockComment",
                value: function skipBlockComment() {
                  if (this.hasPlugin("flowComments") && this.skipFlowComment()) {
                    if (this.state.hasFlowComment) throw this.raise(D.NestedFlowComment, {
                      at: this.state.startLoc
                    });
                    this.hasFlowCommentCompletion();
                    var e = this.skipFlowComment();
                    e && (this.state.pos += e, this.state.hasFlowComment = !0);
                    return;
                  }

                  return _get(_getPrototypeOf(_class2.prototype), "skipBlockComment", this).call(this, this.state.hasFlowComment ? "*-/" : "*/");
                }
              }, {
                key: "skipFlowComment",
                value: function skipFlowComment() {
                  var e = this.state.pos,
                      s = 2;

                  for (; [32, 9].includes(this.input.charCodeAt(e + s));) {
                    s++;
                  }

                  var i = this.input.charCodeAt(s + e),
                      a = this.input.charCodeAt(s + e + 1);
                  return i === 58 && a === 58 ? s + 2 : this.input.slice(s + e, s + e + 12) === "flow-include" ? s + 12 : i === 58 && a !== 58 ? s : !1;
                }
              }, {
                key: "hasFlowCommentCompletion",
                value: function hasFlowCommentCompletion() {
                  if (this.input.indexOf("*/", this.state.pos) === -1) throw this.raise(f.UnterminatedComment, {
                    at: this.state.curPosition()
                  });
                }
              }, {
                key: "flowEnumErrorBooleanMemberNotInitialized",
                value: function flowEnumErrorBooleanMemberNotInitialized(e, s) {
                  var i = s.enumName,
                      a = s.memberName;
                  this.raise(D.EnumBooleanMemberNotInitialized, {
                    at: e,
                    memberName: a,
                    enumName: i
                  });
                }
              }, {
                key: "flowEnumErrorInvalidMemberInitializer",
                value: function flowEnumErrorInvalidMemberInitializer(e, s) {
                  return this.raise(s.explicitType ? s.explicitType === "symbol" ? D.EnumInvalidMemberInitializerSymbolType : D.EnumInvalidMemberInitializerPrimaryType : D.EnumInvalidMemberInitializerUnknownType, Object.assign({
                    at: e
                  }, s));
                }
              }, {
                key: "flowEnumErrorNumberMemberNotInitialized",
                value: function flowEnumErrorNumberMemberNotInitialized(e, s) {
                  var i = s.enumName,
                      a = s.memberName;
                  this.raise(D.EnumNumberMemberNotInitialized, {
                    at: e,
                    enumName: i,
                    memberName: a
                  });
                }
              }, {
                key: "flowEnumErrorStringMemberInconsistentlyInitailized",
                value: function flowEnumErrorStringMemberInconsistentlyInitailized(e, s) {
                  var i = s.enumName;
                  this.raise(D.EnumStringMemberInconsistentlyInitailized, {
                    at: e,
                    enumName: i
                  });
                }
              }, {
                key: "flowEnumMemberInit",
                value: function flowEnumMemberInit() {
                  var _this20 = this;

                  var e = this.state.startLoc,
                      s = function s() {
                    return _this20.match(12) || _this20.match(8);
                  };

                  switch (this.state.type) {
                    case 132:
                      {
                        var i = this.parseNumericLiteral(this.state.value);
                        return s() ? {
                          type: "number",
                          loc: i.loc.start,
                          value: i
                        } : {
                          type: "invalid",
                          loc: e
                        };
                      }

                    case 131:
                      {
                        var _i10 = this.parseStringLiteral(this.state.value);

                        return s() ? {
                          type: "string",
                          loc: _i10.loc.start,
                          value: _i10
                        } : {
                          type: "invalid",
                          loc: e
                        };
                      }

                    case 85:
                    case 86:
                      {
                        var _i11 = this.parseBooleanLiteral(this.match(85));

                        return s() ? {
                          type: "boolean",
                          loc: _i11.loc.start,
                          value: _i11
                        } : {
                          type: "invalid",
                          loc: e
                        };
                      }

                    default:
                      return {
                        type: "invalid",
                        loc: e
                      };
                  }
                }
              }, {
                key: "flowEnumMemberRaw",
                value: function flowEnumMemberRaw() {
                  var e = this.state.startLoc,
                      s = this.parseIdentifier(!0),
                      i = this.eat(29) ? this.flowEnumMemberInit() : {
                    type: "none",
                    loc: e
                  };
                  return {
                    id: s,
                    init: i
                  };
                }
              }, {
                key: "flowEnumCheckExplicitTypeMismatch",
                value: function flowEnumCheckExplicitTypeMismatch(e, s, i) {
                  var a = s.explicitType;
                  a !== null && a !== i && this.flowEnumErrorInvalidMemberInitializer(e, s);
                }
              }, {
                key: "flowEnumMembers",
                value: function flowEnumMembers(e) {
                  var s = e.enumName,
                      i = e.explicitType,
                      a = new Set(),
                      n = {
                    booleanMembers: [],
                    numberMembers: [],
                    stringMembers: [],
                    defaultedMembers: []
                  },
                      o = !1;

                  for (; !this.match(8);) {
                    if (this.eat(21)) {
                      o = !0;
                      break;
                    }

                    var u = this.startNode(),
                        _this$flowEnumMemberR = this.flowEnumMemberRaw(),
                        c = _this$flowEnumMemberR.id,
                        y = _this$flowEnumMemberR.init,
                        g = c.name;

                    if (g === "") continue;
                    /^[a-z]/.test(g) && this.raise(D.EnumInvalidMemberName, {
                      at: c,
                      memberName: g,
                      suggestion: g[0].toUpperCase() + g.slice(1),
                      enumName: s
                    }), a.has(g) && this.raise(D.EnumDuplicateMemberName, {
                      at: c,
                      memberName: g,
                      enumName: s
                    }), a.add(g);
                    var T = {
                      enumName: s,
                      explicitType: i,
                      memberName: g
                    };

                    switch (u.id = c, y.type) {
                      case "boolean":
                        {
                          this.flowEnumCheckExplicitTypeMismatch(y.loc, T, "boolean"), u.init = y.value, n.booleanMembers.push(this.finishNode(u, "EnumBooleanMember"));
                          break;
                        }

                      case "number":
                        {
                          this.flowEnumCheckExplicitTypeMismatch(y.loc, T, "number"), u.init = y.value, n.numberMembers.push(this.finishNode(u, "EnumNumberMember"));
                          break;
                        }

                      case "string":
                        {
                          this.flowEnumCheckExplicitTypeMismatch(y.loc, T, "string"), u.init = y.value, n.stringMembers.push(this.finishNode(u, "EnumStringMember"));
                          break;
                        }

                      case "invalid":
                        throw this.flowEnumErrorInvalidMemberInitializer(y.loc, T);

                      case "none":
                        switch (i) {
                          case "boolean":
                            this.flowEnumErrorBooleanMemberNotInitialized(y.loc, T);
                            break;

                          case "number":
                            this.flowEnumErrorNumberMemberNotInitialized(y.loc, T);
                            break;

                          default:
                            n.defaultedMembers.push(this.finishNode(u, "EnumDefaultedMember"));
                        }

                    }

                    this.match(8) || this.expect(12);
                  }

                  return {
                    members: n,
                    hasUnknownMembers: o
                  };
                }
              }, {
                key: "flowEnumStringMembers",
                value: function flowEnumStringMembers(e, s, i) {
                  var a = i.enumName;
                  if (e.length === 0) return s;
                  if (s.length === 0) return e;

                  if (s.length > e.length) {
                    var _iteratorNormalCompletion4 = true;
                    var _didIteratorError4 = false;
                    var _iteratorError4 = undefined;

                    try {
                      for (var _iterator4 = e[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                        var n = _step4.value;
                        this.flowEnumErrorStringMemberInconsistentlyInitailized(n, {
                          enumName: a
                        });
                      }
                    } catch (err) {
                      _didIteratorError4 = true;
                      _iteratorError4 = err;
                    } finally {
                      try {
                        if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
                          _iterator4["return"]();
                        }
                      } finally {
                        if (_didIteratorError4) {
                          throw _iteratorError4;
                        }
                      }
                    }

                    return s;
                  } else {
                    var _iteratorNormalCompletion5 = true;
                    var _didIteratorError5 = false;
                    var _iteratorError5 = undefined;

                    try {
                      for (var _iterator5 = s[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                        var _n3 = _step5.value;
                        this.flowEnumErrorStringMemberInconsistentlyInitailized(_n3, {
                          enumName: a
                        });
                      }
                    } catch (err) {
                      _didIteratorError5 = true;
                      _iteratorError5 = err;
                    } finally {
                      try {
                        if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
                          _iterator5["return"]();
                        }
                      } finally {
                        if (_didIteratorError5) {
                          throw _iteratorError5;
                        }
                      }
                    }

                    return e;
                  }
                }
              }, {
                key: "flowEnumParseExplicitType",
                value: function flowEnumParseExplicitType(e) {
                  var s = e.enumName;
                  if (!this.eatContextual(101)) return null;
                  if (!q(this.state.type)) throw this.raise(D.EnumInvalidExplicitTypeUnknownSupplied, {
                    at: this.state.startLoc,
                    enumName: s
                  });
                  var i = this.state.value;
                  return this.next(), i !== "boolean" && i !== "number" && i !== "string" && i !== "symbol" && this.raise(D.EnumInvalidExplicitType, {
                    at: this.state.startLoc,
                    enumName: s,
                    invalidEnumType: i
                  }), i;
                }
              }, {
                key: "flowEnumBody",
                value: function flowEnumBody(e, s) {
                  var _this21 = this;

                  var i = s.name,
                      a = s.loc.start,
                      n = this.flowEnumParseExplicitType({
                    enumName: i
                  });
                  this.expect(5);

                  var _this$flowEnumMembers = this.flowEnumMembers({
                    enumName: i,
                    explicitType: n
                  }),
                      o = _this$flowEnumMembers.members,
                      u = _this$flowEnumMembers.hasUnknownMembers;

                  switch (e.hasUnknownMembers = u, n) {
                    case "boolean":
                      return e.explicitType = !0, e.members = o.booleanMembers, this.expect(8), this.finishNode(e, "EnumBooleanBody");

                    case "number":
                      return e.explicitType = !0, e.members = o.numberMembers, this.expect(8), this.finishNode(e, "EnumNumberBody");

                    case "string":
                      return e.explicitType = !0, e.members = this.flowEnumStringMembers(o.stringMembers, o.defaultedMembers, {
                        enumName: i
                      }), this.expect(8), this.finishNode(e, "EnumStringBody");

                    case "symbol":
                      return e.members = o.defaultedMembers, this.expect(8), this.finishNode(e, "EnumSymbolBody");

                    default:
                      {
                        var c = function c() {
                          return e.members = [], _this21.expect(8), _this21.finishNode(e, "EnumStringBody");
                        };

                        e.explicitType = !1;
                        var y = o.booleanMembers.length,
                            g = o.numberMembers.length,
                            T = o.stringMembers.length,
                            C = o.defaultedMembers.length;
                        if (!y && !g && !T && !C) return c();
                        if (!y && !g) return e.members = this.flowEnumStringMembers(o.stringMembers, o.defaultedMembers, {
                          enumName: i
                        }), this.expect(8), this.finishNode(e, "EnumStringBody");

                        if (!g && !T && y >= C) {
                          var _iteratorNormalCompletion6 = true;
                          var _didIteratorError6 = false;
                          var _iteratorError6 = undefined;

                          try {
                            for (var _iterator6 = o.defaultedMembers[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                              var M = _step6.value;
                              this.flowEnumErrorBooleanMemberNotInitialized(M.loc.start, {
                                enumName: i,
                                memberName: M.id.name
                              });
                            }
                          } catch (err) {
                            _didIteratorError6 = true;
                            _iteratorError6 = err;
                          } finally {
                            try {
                              if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
                                _iterator6["return"]();
                              }
                            } finally {
                              if (_didIteratorError6) {
                                throw _iteratorError6;
                              }
                            }
                          }

                          return e.members = o.booleanMembers, this.expect(8), this.finishNode(e, "EnumBooleanBody");
                        } else if (!y && !T && g >= C) {
                          var _iteratorNormalCompletion7 = true;
                          var _didIteratorError7 = false;
                          var _iteratorError7 = undefined;

                          try {
                            for (var _iterator7 = o.defaultedMembers[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                              var _M2 = _step7.value;
                              this.flowEnumErrorNumberMemberNotInitialized(_M2.loc.start, {
                                enumName: i,
                                memberName: _M2.id.name
                              });
                            }
                          } catch (err) {
                            _didIteratorError7 = true;
                            _iteratorError7 = err;
                          } finally {
                            try {
                              if (!_iteratorNormalCompletion7 && _iterator7["return"] != null) {
                                _iterator7["return"]();
                              }
                            } finally {
                              if (_didIteratorError7) {
                                throw _iteratorError7;
                              }
                            }
                          }

                          return e.members = o.numberMembers, this.expect(8), this.finishNode(e, "EnumNumberBody");
                        } else return this.raise(D.EnumInconsistentMemberValues, {
                          at: a,
                          enumName: i
                        }), c();
                      }
                  }
                }
              }, {
                key: "flowParseEnumDeclaration",
                value: function flowParseEnumDeclaration(e) {
                  var s = this.parseIdentifier();
                  return e.id = s, e.body = this.flowEnumBody(this.startNode(), s), this.finishNode(e, "EnumDeclaration");
                }
              }, {
                key: "isLookaheadToken_lt",
                value: function isLookaheadToken_lt() {
                  var e = this.nextTokenStart();

                  if (this.input.charCodeAt(e) === 60) {
                    var s = this.input.charCodeAt(e + 1);
                    return s !== 60 && s !== 61;
                  }

                  return !1;
                }
              }, {
                key: "maybeUnwrapTypeCastExpression",
                value: function maybeUnwrapTypeCastExpression(e) {
                  return e.type === "TypeCastExpression" ? e.expression : e;
                }
              }]);

              return _class2;
            }(t)
          );
        },
            eh = {
          __proto__: null,
          quot: '"',
          amp: "&",
          apos: "'",
          lt: "<",
          gt: ">",
          nbsp: "\xA0",
          iexcl: "\xA1",
          cent: "\xA2",
          pound: "\xA3",
          curren: "\xA4",
          yen: "\xA5",
          brvbar: "\xA6",
          sect: "\xA7",
          uml: "\xA8",
          copy: "\xA9",
          ordf: "\xAA",
          laquo: "\xAB",
          not: "\xAC",
          shy: "\xAD",
          reg: "\xAE",
          macr: "\xAF",
          deg: "\xB0",
          plusmn: "\xB1",
          sup2: "\xB2",
          sup3: "\xB3",
          acute: "\xB4",
          micro: "\xB5",
          para: "\xB6",
          middot: "\xB7",
          cedil: "\xB8",
          sup1: "\xB9",
          ordm: "\xBA",
          raquo: "\xBB",
          frac14: "\xBC",
          frac12: "\xBD",
          frac34: "\xBE",
          iquest: "\xBF",
          Agrave: "\xC0",
          Aacute: "\xC1",
          Acirc: "\xC2",
          Atilde: "\xC3",
          Auml: "\xC4",
          Aring: "\xC5",
          AElig: "\xC6",
          Ccedil: "\xC7",
          Egrave: "\xC8",
          Eacute: "\xC9",
          Ecirc: "\xCA",
          Euml: "\xCB",
          Igrave: "\xCC",
          Iacute: "\xCD",
          Icirc: "\xCE",
          Iuml: "\xCF",
          ETH: "\xD0",
          Ntilde: "\xD1",
          Ograve: "\xD2",
          Oacute: "\xD3",
          Ocirc: "\xD4",
          Otilde: "\xD5",
          Ouml: "\xD6",
          times: "\xD7",
          Oslash: "\xD8",
          Ugrave: "\xD9",
          Uacute: "\xDA",
          Ucirc: "\xDB",
          Uuml: "\xDC",
          Yacute: "\xDD",
          THORN: "\xDE",
          szlig: "\xDF",
          agrave: "\xE0",
          aacute: "\xE1",
          acirc: "\xE2",
          atilde: "\xE3",
          auml: "\xE4",
          aring: "\xE5",
          aelig: "\xE6",
          ccedil: "\xE7",
          egrave: "\xE8",
          eacute: "\xE9",
          ecirc: "\xEA",
          euml: "\xEB",
          igrave: "\xEC",
          iacute: "\xED",
          icirc: "\xEE",
          iuml: "\xEF",
          eth: "\xF0",
          ntilde: "\xF1",
          ograve: "\xF2",
          oacute: "\xF3",
          ocirc: "\xF4",
          otilde: "\xF5",
          ouml: "\xF6",
          divide: "\xF7",
          oslash: "\xF8",
          ugrave: "\xF9",
          uacute: "\xFA",
          ucirc: "\xFB",
          uuml: "\xFC",
          yacute: "\xFD",
          thorn: "\xFE",
          yuml: "\xFF",
          OElig: "\u0152",
          oelig: "\u0153",
          Scaron: "\u0160",
          scaron: "\u0161",
          Yuml: "\u0178",
          fnof: "\u0192",
          circ: "\u02C6",
          tilde: "\u02DC",
          Alpha: "\u0391",
          Beta: "\u0392",
          Gamma: "\u0393",
          Delta: "\u0394",
          Epsilon: "\u0395",
          Zeta: "\u0396",
          Eta: "\u0397",
          Theta: "\u0398",
          Iota: "\u0399",
          Kappa: "\u039A",
          Lambda: "\u039B",
          Mu: "\u039C",
          Nu: "\u039D",
          Xi: "\u039E",
          Omicron: "\u039F",
          Pi: "\u03A0",
          Rho: "\u03A1",
          Sigma: "\u03A3",
          Tau: "\u03A4",
          Upsilon: "\u03A5",
          Phi: "\u03A6",
          Chi: "\u03A7",
          Psi: "\u03A8",
          Omega: "\u03A9",
          alpha: "\u03B1",
          beta: "\u03B2",
          gamma: "\u03B3",
          delta: "\u03B4",
          epsilon: "\u03B5",
          zeta: "\u03B6",
          eta: "\u03B7",
          theta: "\u03B8",
          iota: "\u03B9",
          kappa: "\u03BA",
          lambda: "\u03BB",
          mu: "\u03BC",
          nu: "\u03BD",
          xi: "\u03BE",
          omicron: "\u03BF",
          pi: "\u03C0",
          rho: "\u03C1",
          sigmaf: "\u03C2",
          sigma: "\u03C3",
          tau: "\u03C4",
          upsilon: "\u03C5",
          phi: "\u03C6",
          chi: "\u03C7",
          psi: "\u03C8",
          omega: "\u03C9",
          thetasym: "\u03D1",
          upsih: "\u03D2",
          piv: "\u03D6",
          ensp: "\u2002",
          emsp: "\u2003",
          thinsp: "\u2009",
          zwnj: "\u200C",
          zwj: "\u200D",
          lrm: "\u200E",
          rlm: "\u200F",
          ndash: "\u2013",
          mdash: "\u2014",
          lsquo: "\u2018",
          rsquo: "\u2019",
          sbquo: "\u201A",
          ldquo: "\u201C",
          rdquo: "\u201D",
          bdquo: "\u201E",
          dagger: "\u2020",
          Dagger: "\u2021",
          bull: "\u2022",
          hellip: "\u2026",
          permil: "\u2030",
          prime: "\u2032",
          Prime: "\u2033",
          lsaquo: "\u2039",
          rsaquo: "\u203A",
          oline: "\u203E",
          frasl: "\u2044",
          euro: "\u20AC",
          image: "\u2111",
          weierp: "\u2118",
          real: "\u211C",
          trade: "\u2122",
          alefsym: "\u2135",
          larr: "\u2190",
          uarr: "\u2191",
          rarr: "\u2192",
          darr: "\u2193",
          harr: "\u2194",
          crarr: "\u21B5",
          lArr: "\u21D0",
          uArr: "\u21D1",
          rArr: "\u21D2",
          dArr: "\u21D3",
          hArr: "\u21D4",
          forall: "\u2200",
          part: "\u2202",
          exist: "\u2203",
          empty: "\u2205",
          nabla: "\u2207",
          isin: "\u2208",
          notin: "\u2209",
          ni: "\u220B",
          prod: "\u220F",
          sum: "\u2211",
          minus: "\u2212",
          lowast: "\u2217",
          radic: "\u221A",
          prop: "\u221D",
          infin: "\u221E",
          ang: "\u2220",
          and: "\u2227",
          or: "\u2228",
          cap: "\u2229",
          cup: "\u222A",
          "int": "\u222B",
          there4: "\u2234",
          sim: "\u223C",
          cong: "\u2245",
          asymp: "\u2248",
          ne: "\u2260",
          equiv: "\u2261",
          le: "\u2264",
          ge: "\u2265",
          sub: "\u2282",
          sup: "\u2283",
          nsub: "\u2284",
          sube: "\u2286",
          supe: "\u2287",
          oplus: "\u2295",
          otimes: "\u2297",
          perp: "\u22A5",
          sdot: "\u22C5",
          lceil: "\u2308",
          rceil: "\u2309",
          lfloor: "\u230A",
          rfloor: "\u230B",
          lang: "\u2329",
          rang: "\u232A",
          loz: "\u25CA",
          spades: "\u2660",
          clubs: "\u2663",
          hearts: "\u2665",
          diams: "\u2666"
        },
            Se = pe(_templateObject3())({
          AttributeIsEmpty: "JSX attributes must only be assigned a non-empty expression.",
          MissingClosingTagElement: function MissingClosingTagElement(t) {
            var r = t.openingTagName;
            return "Expected corresponding JSX closing tag for <".concat(r, ">.");
          },
          MissingClosingTagFragment: "Expected corresponding JSX closing tag for <>.",
          UnexpectedSequenceExpression: "Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?",
          UnexpectedToken: function UnexpectedToken(t) {
            var r = t.unexpected,
                e = t.HTMLEntity;
            return "Unexpected token `".concat(r, "`. Did you mean `").concat(e, "` or `{'").concat(r, "'}`?");
          },
          UnsupportedJsxValue: "JSX value should be either an expression or a quoted JSX text.",
          UnterminatedJsxContent: "Unterminated JSX contents.",
          UnwrappedAdjacentJSXElements: "Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?"
        });

        function Te(t) {
          return t ? t.type === "JSXOpeningFragment" || t.type === "JSXClosingFragment" : !1;
        }

        function Re(t) {
          if (t.type === "JSXIdentifier") return t.name;
          if (t.type === "JSXNamespacedName") return t.namespace.name + ":" + t.name.name;
          if (t.type === "JSXMemberExpression") return Re(t.object) + "." + Re(t.property);
          throw new Error("Node had unexpected type: " + t.type);
        }

        var th = function th(t) {
          return (
            /*#__PURE__*/
            function (_t5) {
              _inherits(_class3, _t5);

              function _class3() {
                _classCallCheck(this, _class3);

                return _possibleConstructorReturn(this, _getPrototypeOf(_class3).apply(this, arguments));
              }

              _createClass(_class3, [{
                key: "jsxReadToken",
                value: function jsxReadToken() {
                  var e = "",
                      s = this.state.pos;

                  for (;;) {
                    if (this.state.pos >= this.length) throw this.raise(Se.UnterminatedJsxContent, {
                      at: this.state.startLoc
                    });
                    var i = this.input.charCodeAt(this.state.pos);

                    switch (i) {
                      case 60:
                      case 123:
                        if (this.state.pos === this.state.start) {
                          i === 60 && this.state.canStartJSXElement ? (++this.state.pos, this.finishToken(140)) : _get(_getPrototypeOf(_class3.prototype), "getTokenFromCode", this).call(this, i);
                          return;
                        }

                        e += this.input.slice(s, this.state.pos), this.finishToken(139, e);
                        return;

                      case 38:
                        e += this.input.slice(s, this.state.pos), e += this.jsxReadEntity(), s = this.state.pos;
                        break;

                      case 62:
                      case 125:
                      default:
                        Ge(i) ? (e += this.input.slice(s, this.state.pos), e += this.jsxReadNewLine(!0), s = this.state.pos) : ++this.state.pos;
                    }
                  }
                }
              }, {
                key: "jsxReadNewLine",
                value: function jsxReadNewLine(e) {
                  var s = this.input.charCodeAt(this.state.pos),
                      i;
                  return ++this.state.pos, s === 13 && this.input.charCodeAt(this.state.pos) === 10 ? (++this.state.pos, i = e ? "\n" : "\r\n") : i = String.fromCharCode(s), ++this.state.curLine, this.state.lineStart = this.state.pos, i;
                }
              }, {
                key: "jsxReadString",
                value: function jsxReadString(e) {
                  var s = "",
                      i = ++this.state.pos;

                  for (;;) {
                    if (this.state.pos >= this.length) throw this.raise(f.UnterminatedString, {
                      at: this.state.startLoc
                    });
                    var a = this.input.charCodeAt(this.state.pos);
                    if (a === e) break;
                    a === 38 ? (s += this.input.slice(i, this.state.pos), s += this.jsxReadEntity(), i = this.state.pos) : Ge(a) ? (s += this.input.slice(i, this.state.pos), s += this.jsxReadNewLine(!1), i = this.state.pos) : ++this.state.pos;
                  }

                  s += this.input.slice(i, this.state.pos++), this.finishToken(131, s);
                }
              }, {
                key: "jsxReadEntity",
                value: function jsxReadEntity() {
                  var e = ++this.state.pos;

                  if (this.codePointAtPos(this.state.pos) === 35) {
                    ++this.state.pos;
                    var s = 10;
                    this.codePointAtPos(this.state.pos) === 120 && (s = 16, ++this.state.pos);
                    var i = this.readInt(s, void 0, !1, "bail");
                    if (i !== null && this.codePointAtPos(this.state.pos) === 59) return ++this.state.pos, String.fromCodePoint(i);
                  } else {
                    var _s11 = 0,
                        _i12 = !1;

                    for (; _s11++ < 10 && this.state.pos < this.length && !(_i12 = this.codePointAtPos(this.state.pos) == 59);) {
                      ++this.state.pos;
                    }

                    if (_i12) {
                      var a = this.input.slice(e, this.state.pos),
                          n = eh[a];
                      if (++this.state.pos, n) return n;
                    }
                  }

                  return this.state.pos = e, "&";
                }
              }, {
                key: "jsxReadWord",
                value: function jsxReadWord() {
                  var e,
                      s = this.state.pos;

                  do {
                    e = this.input.charCodeAt(++this.state.pos);
                  } while (De(e) || e === 45);

                  this.finishToken(138, this.input.slice(s, this.state.pos));
                }
              }, {
                key: "jsxParseIdentifier",
                value: function jsxParseIdentifier() {
                  var e = this.startNode();
                  return this.match(138) ? e.name = this.state.value : $t(this.state.type) ? e.name = xe(this.state.type) : this.unexpected(), this.next(), this.finishNode(e, "JSXIdentifier");
                }
              }, {
                key: "jsxParseNamespacedName",
                value: function jsxParseNamespacedName() {
                  var e = this.state.startLoc,
                      s = this.jsxParseIdentifier();
                  if (!this.eat(14)) return s;
                  var i = this.startNodeAt(e);
                  return i.namespace = s, i.name = this.jsxParseIdentifier(), this.finishNode(i, "JSXNamespacedName");
                }
              }, {
                key: "jsxParseElementName",
                value: function jsxParseElementName() {
                  var e = this.state.startLoc,
                      s = this.jsxParseNamespacedName();
                  if (s.type === "JSXNamespacedName") return s;

                  for (; this.eat(16);) {
                    var i = this.startNodeAt(e);
                    i.object = s, i.property = this.jsxParseIdentifier(), s = this.finishNode(i, "JSXMemberExpression");
                  }

                  return s;
                }
              }, {
                key: "jsxParseAttributeValue",
                value: function jsxParseAttributeValue() {
                  var e;

                  switch (this.state.type) {
                    case 5:
                      return e = this.startNode(), this.setContext(x.brace), this.next(), e = this.jsxParseExpressionContainer(e, x.j_oTag), e.expression.type === "JSXEmptyExpression" && this.raise(Se.AttributeIsEmpty, {
                        at: e
                      }), e;

                    case 140:
                    case 131:
                      return this.parseExprAtom();

                    default:
                      throw this.raise(Se.UnsupportedJsxValue, {
                        at: this.state.startLoc
                      });
                  }
                }
              }, {
                key: "jsxParseEmptyExpression",
                value: function jsxParseEmptyExpression() {
                  var e = this.startNodeAt(this.state.lastTokEndLoc);
                  return this.finishNodeAt(e, "JSXEmptyExpression", this.state.startLoc);
                }
              }, {
                key: "jsxParseSpreadChild",
                value: function jsxParseSpreadChild(e) {
                  return this.next(), e.expression = this.parseExpression(), this.setContext(x.j_expr), this.state.canStartJSXElement = !0, this.expect(8), this.finishNode(e, "JSXSpreadChild");
                }
              }, {
                key: "jsxParseExpressionContainer",
                value: function jsxParseExpressionContainer(e, s) {
                  if (this.match(8)) e.expression = this.jsxParseEmptyExpression();else {
                    var i = this.parseExpression();
                    e.expression = i;
                  }
                  return this.setContext(s), this.state.canStartJSXElement = !0, this.expect(8), this.finishNode(e, "JSXExpressionContainer");
                }
              }, {
                key: "jsxParseAttribute",
                value: function jsxParseAttribute() {
                  var e = this.startNode();
                  return this.match(5) ? (this.setContext(x.brace), this.next(), this.expect(21), e.argument = this.parseMaybeAssignAllowIn(), this.setContext(x.j_oTag), this.state.canStartJSXElement = !0, this.expect(8), this.finishNode(e, "JSXSpreadAttribute")) : (e.name = this.jsxParseNamespacedName(), e.value = this.eat(29) ? this.jsxParseAttributeValue() : null, this.finishNode(e, "JSXAttribute"));
                }
              }, {
                key: "jsxParseOpeningElementAt",
                value: function jsxParseOpeningElementAt(e) {
                  var s = this.startNodeAt(e);
                  return this.eat(141) ? this.finishNode(s, "JSXOpeningFragment") : (s.name = this.jsxParseElementName(), this.jsxParseOpeningElementAfterName(s));
                }
              }, {
                key: "jsxParseOpeningElementAfterName",
                value: function jsxParseOpeningElementAfterName(e) {
                  var s = [];

                  for (; !this.match(56) && !this.match(141);) {
                    s.push(this.jsxParseAttribute());
                  }

                  return e.attributes = s, e.selfClosing = this.eat(56), this.expect(141), this.finishNode(e, "JSXOpeningElement");
                }
              }, {
                key: "jsxParseClosingElementAt",
                value: function jsxParseClosingElementAt(e) {
                  var s = this.startNodeAt(e);
                  return this.eat(141) ? this.finishNode(s, "JSXClosingFragment") : (s.name = this.jsxParseElementName(), this.expect(141), this.finishNode(s, "JSXClosingElement"));
                }
              }, {
                key: "jsxParseElementAt",
                value: function jsxParseElementAt(e) {
                  var s = this.startNodeAt(e),
                      i = [],
                      a = this.jsxParseOpeningElementAt(e),
                      n = null;

                  if (!a.selfClosing) {
                    e: for (;;) {
                      switch (this.state.type) {
                        case 140:
                          if (e = this.state.startLoc, this.next(), this.eat(56)) {
                            n = this.jsxParseClosingElementAt(e);
                            break e;
                          }

                          i.push(this.jsxParseElementAt(e));
                          break;

                        case 139:
                          i.push(this.parseExprAtom());
                          break;

                        case 5:
                          {
                            var o = this.startNode();
                            this.setContext(x.brace), this.next(), this.match(21) ? i.push(this.jsxParseSpreadChild(o)) : i.push(this.jsxParseExpressionContainer(o, x.j_expr));
                            break;
                          }

                        default:
                          this.unexpected();
                      }
                    }

                    Te(a) && !Te(n) && n !== null ? this.raise(Se.MissingClosingTagFragment, {
                      at: n
                    }) : !Te(a) && Te(n) ? this.raise(Se.MissingClosingTagElement, {
                      at: n,
                      openingTagName: Re(a.name)
                    }) : !Te(a) && !Te(n) && Re(n.name) !== Re(a.name) && this.raise(Se.MissingClosingTagElement, {
                      at: n,
                      openingTagName: Re(a.name)
                    });
                  }

                  if (Te(a) ? (s.openingFragment = a, s.closingFragment = n) : (s.openingElement = a, s.closingElement = n), s.children = i, this.match(47)) throw this.raise(Se.UnwrappedAdjacentJSXElements, {
                    at: this.state.startLoc
                  });
                  return Te(a) ? this.finishNode(s, "JSXFragment") : this.finishNode(s, "JSXElement");
                }
              }, {
                key: "jsxParseElement",
                value: function jsxParseElement() {
                  var e = this.state.startLoc;
                  return this.next(), this.jsxParseElementAt(e);
                }
              }, {
                key: "setContext",
                value: function setContext(e) {
                  var s = this.state.context;
                  s[s.length - 1] = e;
                }
              }, {
                key: "parseExprAtom",
                value: function parseExprAtom(e) {
                  return this.match(139) ? this.parseLiteral(this.state.value, "JSXText") : this.match(140) ? this.jsxParseElement() : this.match(47) && this.input.charCodeAt(this.state.pos) !== 33 ? (this.replaceToken(140), this.jsxParseElement()) : _get(_getPrototypeOf(_class3.prototype), "parseExprAtom", this).call(this, e);
                }
              }, {
                key: "skipSpace",
                value: function skipSpace() {
                  this.curContext().preserveSpace || _get(_getPrototypeOf(_class3.prototype), "skipSpace", this).call(this);
                }
              }, {
                key: "getTokenFromCode",
                value: function getTokenFromCode(e) {
                  var s = this.curContext();

                  if (s === x.j_expr) {
                    this.jsxReadToken();
                    return;
                  }

                  if (s === x.j_oTag || s === x.j_cTag) {
                    if (fe(e)) {
                      this.jsxReadWord();
                      return;
                    }

                    if (e === 62) {
                      ++this.state.pos, this.finishToken(141);
                      return;
                    }

                    if ((e === 34 || e === 39) && s === x.j_oTag) {
                      this.jsxReadString(e);
                      return;
                    }
                  }

                  if (e === 60 && this.state.canStartJSXElement && this.input.charCodeAt(this.state.pos + 1) !== 33) {
                    ++this.state.pos, this.finishToken(140);
                    return;
                  }

                  _get(_getPrototypeOf(_class3.prototype), "getTokenFromCode", this).call(this, e);
                }
              }, {
                key: "updateContext",
                value: function updateContext(e) {
                  var _this$state = this.state,
                      s = _this$state.context,
                      i = _this$state.type;
                  if (i === 56 && e === 140) s.splice(-2, 2, x.j_cTag), this.state.canStartJSXElement = !1;else if (i === 140) s.push(x.j_oTag);else if (i === 141) {
                    var a = s[s.length - 1];
                    a === x.j_oTag && e === 56 || a === x.j_cTag ? (s.pop(), this.state.canStartJSXElement = s[s.length - 1] === x.j_expr) : (this.setContext(x.j_expr), this.state.canStartJSXElement = !0);
                  } else this.state.canStartJSXElement = se(i);
                }
              }]);

              return _class3;
            }(t)
          );
        },
            sh =
        /*#__PURE__*/
        function (_rs2) {
          _inherits(sh, _rs2);

          function sh() {
            var _this22;

            _classCallCheck(this, sh);

            _this22 = _possibleConstructorReturn(this, _getPrototypeOf(sh).apply(this, arguments)), _this22.types = new Set(), _this22.enums = new Set(), _this22.constEnums = new Set(), _this22.classes = new Set(), _this22.exportOnlyBindings = new Set();
            return _this22;
          }

          return sh;
        }(rs),
            rh =
        /*#__PURE__*/
        function (_is2) {
          _inherits(rh, _is2);

          function rh() {
            var _this23;

            _classCallCheck(this, rh);

            _this23 = _possibleConstructorReturn(this, _getPrototypeOf(rh).apply(this, arguments)), _this23.importsStack = [];
            return _this23;
          }

          _createClass(rh, [{
            key: "createScope",
            value: function createScope(t) {
              return this.importsStack.push(new Set()), new sh(t);
            }
          }, {
            key: "enter",
            value: function enter(t) {
              t == Oe && this.importsStack.push(new Set()), _get(_getPrototypeOf(rh.prototype), "enter", this).call(this, t);
            }
          }, {
            key: "exit",
            value: function exit() {
              var t = _get(_getPrototypeOf(rh.prototype), "exit", this).call(this);

              return t == Oe && this.importsStack.pop(), t;
            }
          }, {
            key: "hasImport",
            value: function hasImport(t, r) {
              var e = this.importsStack.length;
              if (this.importsStack[e - 1].has(t)) return !0;

              if (!r && e > 1) {
                for (var s = 0; s < e - 1; s++) {
                  if (this.importsStack[s].has(t)) return !0;
                }
              }

              return !1;
            }
          }, {
            key: "declareName",
            value: function declareName(t, r, e) {
              if (r & Ve) {
                this.hasImport(t, !0) && this.parser.raise(f.VarRedeclaration, {
                  at: e,
                  identifierName: t
                }), this.importsStack[this.importsStack.length - 1].add(t);
                return;
              }

              var s = this.currentScope();

              if (r & Yt) {
                this.maybeExportDefined(s, t), s.exportOnlyBindings.add(t);
                return;
              }

              _get(_getPrototypeOf(rh.prototype), "declareName", this).call(this, t, r, e), r & Ce && (r & le || (this.checkRedeclarationInScope(s, t, r, e), this.maybeExportDefined(s, t)), s.types.add(t)), r & Jt && s.enums.add(t), r & Xt && s.constEnums.add(t), r & ft && s.classes.add(t);
            }
          }, {
            key: "isRedeclaredInScope",
            value: function isRedeclaredInScope(t, r, e) {
              if (t.enums.has(r)) {
                if (e & Jt) {
                  var s = !!(e & Xt),
                      i = t.constEnums.has(r);
                  return s !== i;
                }

                return !0;
              }

              return e & ft && t.classes.has(r) ? t.lexical.has(r) ? !!(e & le) : !1 : e & Ce && t.types.has(r) ? !0 : _get(_getPrototypeOf(rh.prototype), "isRedeclaredInScope", this).call(this, t, r, e);
            }
          }, {
            key: "checkLocalExport",
            value: function checkLocalExport(t) {
              var r = t.name;
              if (this.hasImport(r)) return;
              var e = this.scopeStack.length;

              for (var s = e - 1; s >= 0; s--) {
                var i = this.scopeStack[s];
                if (i.types.has(r) || i.exportOnlyBindings.has(r)) return;
              }

              _get(_getPrototypeOf(rh.prototype), "checkLocalExport", this).call(this, t);
            }
          }]);

          return rh;
        }(is),
            ih = function ih(t, r) {
          return Object.hasOwnProperty.call(t, r) && t[r];
        },
            Ur = function Ur(t) {
          return t.type === "ParenthesizedExpression" ? Ur(t.expression) : t;
        },
            ah =
        /*#__PURE__*/
        function (_Wl) {
          _inherits(ah, _Wl);

          function ah() {
            _classCallCheck(this, ah);

            return _possibleConstructorReturn(this, _getPrototypeOf(ah).apply(this, arguments));
          }

          _createClass(ah, [{
            key: "toAssignable",
            value: function toAssignable(t) {
              var r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
              var e, s;
              var i;

              switch ((t.type === "ParenthesizedExpression" || (e = t.extra) != null && e.parenthesized) && (i = Ur(t), r ? i.type === "Identifier" ? this.expressionScope.recordArrowParameterBindingError(f.InvalidParenthesizedAssignment, {
                at: t
              }) : i.type !== "MemberExpression" && this.raise(f.InvalidParenthesizedAssignment, {
                at: t
              }) : this.raise(f.InvalidParenthesizedAssignment, {
                at: t
              })), t.type) {
                case "Identifier":
                case "ObjectPattern":
                case "ArrayPattern":
                case "AssignmentPattern":
                case "RestElement":
                  break;

                case "ObjectExpression":
                  t.type = "ObjectPattern";

                  for (var n = 0, o = t.properties.length, u = o - 1; n < o; n++) {
                    var a;
                    var c = t.properties[n],
                        y = n === u;
                    this.toAssignableObjectExpressionProp(c, y, r), y && c.type === "RestElement" && (a = t.extra) != null && a.trailingCommaLoc && this.raise(f.RestTrailingComma, {
                      at: t.extra.trailingCommaLoc
                    });
                  }

                  break;

                case "ObjectProperty":
                  {
                    var _n4 = t.key,
                        _o2 = t.value;
                    this.isPrivateName(_n4) && this.classScope.usePrivateName(this.getPrivateNameSV(_n4), _n4.loc.start), this.toAssignable(_o2, r);
                    break;
                  }

                case "SpreadElement":
                  throw new Error("Internal @babel/parser error (this is a bug, please report it). SpreadElement should be converted by .toAssignable's caller.");

                case "ArrayExpression":
                  t.type = "ArrayPattern", this.toAssignableList(t.elements, (s = t.extra) == null ? void 0 : s.trailingCommaLoc, r);
                  break;

                case "AssignmentExpression":
                  t.operator !== "=" && this.raise(f.MissingEqInAssignment, {
                    at: t.left.loc.end
                  }), t.type = "AssignmentPattern", delete t.operator, this.toAssignable(t.left, r);
                  break;

                case "ParenthesizedExpression":
                  this.toAssignable(i, r);
                  break;
              }
            }
          }, {
            key: "toAssignableObjectExpressionProp",
            value: function toAssignableObjectExpressionProp(t, r, e) {
              if (t.type === "ObjectMethod") this.raise(t.kind === "get" || t.kind === "set" ? f.PatternHasAccessor : f.PatternHasMethod, {
                at: t.key
              });else if (t.type === "SpreadElement") {
                t.type = "RestElement";
                var s = t.argument;
                this.checkToRestConversion(s, !1), this.toAssignable(s, e), r || this.raise(f.RestTrailingComma, {
                  at: t
                });
              } else this.toAssignable(t, e);
            }
          }, {
            key: "toAssignableList",
            value: function toAssignableList(t, r, e) {
              var s = t.length - 1;

              for (var i = 0; i <= s; i++) {
                var a = t[i];

                if (a) {
                  if (a.type === "SpreadElement") {
                    a.type = "RestElement";
                    var n = a.argument;
                    this.checkToRestConversion(n, !0), this.toAssignable(n, e);
                  } else this.toAssignable(a, e);

                  a.type === "RestElement" && (i < s ? this.raise(f.RestTrailingComma, {
                    at: a
                  }) : r && this.raise(f.RestTrailingComma, {
                    at: r
                  }));
                }
              }
            }
          }, {
            key: "isAssignable",
            value: function isAssignable(t, r) {
              var _this24 = this;

              switch (t.type) {
                case "Identifier":
                case "ObjectPattern":
                case "ArrayPattern":
                case "AssignmentPattern":
                case "RestElement":
                  return !0;

                case "ObjectExpression":
                  {
                    var e = t.properties.length - 1;
                    return t.properties.every(function (s, i) {
                      return s.type !== "ObjectMethod" && (i === e || s.type !== "SpreadElement") && _this24.isAssignable(s);
                    });
                  }

                case "ObjectProperty":
                  return this.isAssignable(t.value);

                case "SpreadElement":
                  return this.isAssignable(t.argument);

                case "ArrayExpression":
                  return t.elements.every(function (e) {
                    return e === null || _this24.isAssignable(e);
                  });

                case "AssignmentExpression":
                  return t.operator === "=";

                case "ParenthesizedExpression":
                  return this.isAssignable(t.expression);

                case "MemberExpression":
                case "OptionalMemberExpression":
                  return !r;

                default:
                  return !1;
              }
            }
          }, {
            key: "toReferencedList",
            value: function toReferencedList(t, r) {
              return t;
            }
          }, {
            key: "toReferencedListDeep",
            value: function toReferencedListDeep(t, r) {
              this.toReferencedList(t, r);
              var _iteratorNormalCompletion8 = true;
              var _didIteratorError8 = false;
              var _iteratorError8 = undefined;

              try {
                for (var _iterator8 = t[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
                  var e = _step8.value;
                  (e == null ? void 0 : e.type) === "ArrayExpression" && this.toReferencedListDeep(e.elements);
                }
              } catch (err) {
                _didIteratorError8 = true;
                _iteratorError8 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion8 && _iterator8["return"] != null) {
                    _iterator8["return"]();
                  }
                } finally {
                  if (_didIteratorError8) {
                    throw _iteratorError8;
                  }
                }
              }
            }
          }, {
            key: "parseSpread",
            value: function parseSpread(t) {
              var r = this.startNode();
              return this.next(), r.argument = this.parseMaybeAssignAllowIn(t, void 0), this.finishNode(r, "SpreadElement");
            }
          }, {
            key: "parseRestBinding",
            value: function parseRestBinding() {
              var t = this.startNode();
              return this.next(), t.argument = this.parseBindingAtom(), this.finishNode(t, "RestElement");
            }
          }, {
            key: "parseBindingAtom",
            value: function parseBindingAtom() {
              switch (this.state.type) {
                case 0:
                  {
                    var t = this.startNode();
                    return this.next(), t.elements = this.parseBindingList(3, 93, 1), this.finishNode(t, "ArrayPattern");
                  }

                case 5:
                  return this.parseObjectLike(8, !0);
              }

              return this.parseIdentifier();
            }
          }, {
            key: "parseBindingList",
            value: function parseBindingList(t, r, e) {
              var s = e & 1,
                  i = [],
                  a = !0;

              for (; !this.eat(t);) {
                if (a ? a = !1 : this.expect(12), s && this.match(12)) i.push(null);else {
                  if (this.eat(t)) break;

                  if (this.match(21)) {
                    if (i.push(this.parseAssignableListItemTypes(this.parseRestBinding(), e)), !this.checkCommaAfterRest(r)) {
                      this.expect(t);
                      break;
                    }
                  } else {
                    var n = [];

                    for (this.match(26) && this.hasPlugin("decorators") && this.raise(f.UnsupportedParameterDecorator, {
                      at: this.state.startLoc
                    }); this.match(26);) {
                      n.push(this.parseDecorator());
                    }

                    i.push(this.parseAssignableListItem(e, n));
                  }
                }
              }

              return i;
            }
          }, {
            key: "parseBindingRestProperty",
            value: function parseBindingRestProperty(t) {
              return this.next(), t.argument = this.parseIdentifier(), this.checkCommaAfterRest(125), this.finishNode(t, "RestElement");
            }
          }, {
            key: "parseBindingProperty",
            value: function parseBindingProperty() {
              var t = this.startNode(),
                  _this$state2 = this.state,
                  r = _this$state2.type,
                  e = _this$state2.startLoc;
              return r === 21 ? this.parseBindingRestProperty(t) : (r === 136 ? (this.expectPlugin("destructuringPrivate", e), this.classScope.usePrivateName(this.state.value, e), t.key = this.parsePrivateName()) : this.parsePropertyName(t), t.method = !1, this.parseObjPropValue(t, e, !1, !1, !0, !1));
            }
          }, {
            key: "parseAssignableListItem",
            value: function parseAssignableListItem(t, r) {
              var e = this.parseMaybeDefault();
              this.parseAssignableListItemTypes(e, t);
              var s = this.parseMaybeDefault(e.loc.start, e);
              return r.length && (e.decorators = r), s;
            }
          }, {
            key: "parseAssignableListItemTypes",
            value: function parseAssignableListItemTypes(t, r) {
              return t;
            }
          }, {
            key: "parseMaybeDefault",
            value: function parseMaybeDefault(t, r) {
              var e, s;
              if ((e = t) != null || (t = this.state.startLoc), r = (s = r) != null ? s : this.parseBindingAtom(), !this.eat(29)) return r;
              var i = this.startNodeAt(t);
              return i.left = r, i.right = this.parseMaybeAssignAllowIn(), this.finishNode(i, "AssignmentPattern");
            }
          }, {
            key: "isValidLVal",
            value: function isValidLVal(t, r, e) {
              return ih({
                AssignmentPattern: "left",
                RestElement: "argument",
                ObjectProperty: "value",
                ParenthesizedExpression: "expression",
                ArrayPattern: "elements",
                ObjectPattern: "properties"
              }, t);
            }
          }, {
            key: "checkLVal",
            value: function checkLVal(t, r) {
              var e = r["in"],
                  _r$binding = r.binding,
                  s = _r$binding === void 0 ? Pe : _r$binding,
                  _r$checkClashes = r.checkClashes,
                  i = _r$checkClashes === void 0 ? !1 : _r$checkClashes,
                  _r$strictModeChanged = r.strictModeChanged,
                  a = _r$strictModeChanged === void 0 ? !1 : _r$strictModeChanged,
                  _r$hasParenthesizedAn = r.hasParenthesizedAncestor,
                  n = _r$hasParenthesizedAn === void 0 ? !1 : _r$hasParenthesizedAn;
              var o;
              var u = t.type;
              if (this.isObjectMethod(t)) return;

              if (u === "MemberExpression") {
                s !== Pe && this.raise(f.InvalidPropertyBindingPattern, {
                  at: t
                });
                return;
              }

              if (u === "Identifier") {
                this.checkIdentifier(t, s, a);
                var C = t.name;
                i && (i.has(C) ? this.raise(f.ParamDupe, {
                  at: t
                }) : i.add(C));
                return;
              }

              var c = this.isValidLVal(u, !(n || (o = t.extra) != null && o.parenthesized) && e.type === "AssignmentExpression", s);
              if (c === !0) return;

              if (c === !1) {
                var _C = s === Pe ? f.InvalidLhs : f.InvalidLhsBinding;

                this.raise(_C, {
                  at: t,
                  ancestor: e
                });
                return;
              }

              var _ref = Array.isArray(c) ? c : [c, u === "ParenthesizedExpression"],
                  _ref2 = _slicedToArray(_ref, 2),
                  y = _ref2[0],
                  g = _ref2[1],
                  T = u === "ArrayPattern" || u === "ObjectPattern" || u === "ParenthesizedExpression" ? {
                type: u
              } : e;

              var _iteratorNormalCompletion9 = true;
              var _didIteratorError9 = false;
              var _iteratorError9 = undefined;

              try {
                for (var _iterator9 = [].concat(t[y])[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
                  var _C2 = _step9.value;
                  _C2 && this.checkLVal(_C2, {
                    "in": T,
                    binding: s,
                    checkClashes: i,
                    strictModeChanged: a,
                    hasParenthesizedAncestor: g
                  });
                }
              } catch (err) {
                _didIteratorError9 = true;
                _iteratorError9 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion9 && _iterator9["return"] != null) {
                    _iterator9["return"]();
                  }
                } finally {
                  if (_didIteratorError9) {
                    throw _iteratorError9;
                  }
                }
              }
            }
          }, {
            key: "checkIdentifier",
            value: function checkIdentifier(t, r) {
              var e = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;
              this.state.strict && (e ? xr(t.name, this.inModule) : yr(t.name)) && (r === Pe ? this.raise(f.StrictEvalArguments, {
                at: t,
                referenceName: t.name
              }) : this.raise(f.StrictEvalArgumentsBinding, {
                at: t,
                bindingName: t.name
              })), r & dt && t.name === "let" && this.raise(f.LetInLexicalBinding, {
                at: t
              }), r & Pe || this.declareNameFromIdentifier(t, r);
            }
          }, {
            key: "declareNameFromIdentifier",
            value: function declareNameFromIdentifier(t, r) {
              this.scope.declareName(t.name, r, t.loc.start);
            }
          }, {
            key: "checkToRestConversion",
            value: function checkToRestConversion(t, r) {
              switch (t.type) {
                case "ParenthesizedExpression":
                  this.checkToRestConversion(t.expression, r);
                  break;

                case "Identifier":
                case "MemberExpression":
                  break;

                case "ArrayExpression":
                case "ObjectExpression":
                  if (r) break;

                default:
                  this.raise(f.InvalidRestAssignmentPattern, {
                    at: t
                  });
              }
            }
          }, {
            key: "checkCommaAfterRest",
            value: function checkCommaAfterRest(t) {
              return this.match(12) ? (this.raise(this.lookaheadCharCode() === t ? f.RestTrailingComma : f.ElementAfterRest, {
                at: this.state.startLoc
              }), !0) : !1;
            }
          }]);

          return ah;
        }(Wl),
            nh = function nh(t, r) {
          return Object.hasOwnProperty.call(t, r) && t[r];
        };

        function oh(t) {
          if (t == null) throw new Error("Unexpected ".concat(t, " value."));
          return t;
        }

        function $r(t) {
          if (!t) throw new Error("Assert fail");
        }

        var I = pe(_templateObject4())({
          AbstractMethodHasImplementation: function AbstractMethodHasImplementation(t) {
            var r = t.methodName;
            return "Method '".concat(r, "' cannot have an implementation because it is marked abstract.");
          },
          AbstractPropertyHasInitializer: function AbstractPropertyHasInitializer(t) {
            var r = t.propertyName;
            return "Property '".concat(r, "' cannot have an initializer because it is marked abstract.");
          },
          AccesorCannotDeclareThisParameter: "'get' and 'set' accessors cannot declare 'this' parameters.",
          AccesorCannotHaveTypeParameters: "An accessor cannot have type parameters.",
          AccessorCannotBeOptional: "An 'accessor' property cannot be declared optional.",
          ClassMethodHasDeclare: "Class methods cannot have the 'declare' modifier.",
          ClassMethodHasReadonly: "Class methods cannot have the 'readonly' modifier.",
          ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference: "A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.",
          ConstructorHasTypeParameters: "Type parameters cannot appear on a constructor declaration.",
          DeclareAccessor: function DeclareAccessor(t) {
            var r = t.kind;
            return "'declare' is not allowed in ".concat(r, "ters.");
          },
          DeclareClassFieldHasInitializer: "Initializers are not allowed in ambient contexts.",
          DeclareFunctionHasImplementation: "An implementation cannot be declared in ambient contexts.",
          DuplicateAccessibilityModifier: function DuplicateAccessibilityModifier(t) {
            var r = t.modifier;
            return "Accessibility modifier already seen.";
          },
          DuplicateModifier: function DuplicateModifier(t) {
            var r = t.modifier;
            return "Duplicate modifier: '".concat(r, "'.");
          },
          EmptyHeritageClauseType: function EmptyHeritageClauseType(t) {
            var r = t.token;
            return "'".concat(r, "' list cannot be empty.");
          },
          EmptyTypeArguments: "Type argument list cannot be empty.",
          EmptyTypeParameters: "Type parameter list cannot be empty.",
          ExpectedAmbientAfterExportDeclare: "'export declare' must be followed by an ambient declaration.",
          ImportAliasHasImportType: "An import alias can not use 'import type'.",
          ImportReflectionHasImportType: "An `import module` declaration can not use `type` modifier",
          IncompatibleModifiers: function IncompatibleModifiers(t) {
            var r = t.modifiers;
            return "'".concat(r[0], "' modifier cannot be used with '").concat(r[1], "' modifier.");
          },
          IndexSignatureHasAbstract: "Index signatures cannot have the 'abstract' modifier.",
          IndexSignatureHasAccessibility: function IndexSignatureHasAccessibility(t) {
            var r = t.modifier;
            return "Index signatures cannot have an accessibility modifier ('".concat(r, "').");
          },
          IndexSignatureHasDeclare: "Index signatures cannot have the 'declare' modifier.",
          IndexSignatureHasOverride: "'override' modifier cannot appear on an index signature.",
          IndexSignatureHasStatic: "Index signatures cannot have the 'static' modifier.",
          InitializerNotAllowedInAmbientContext: "Initializers are not allowed in ambient contexts.",
          InvalidModifierOnTypeMember: function InvalidModifierOnTypeMember(t) {
            var r = t.modifier;
            return "'".concat(r, "' modifier cannot appear on a type member.");
          },
          InvalidModifierOnTypeParameter: function InvalidModifierOnTypeParameter(t) {
            var r = t.modifier;
            return "'".concat(r, "' modifier cannot appear on a type parameter.");
          },
          InvalidModifierOnTypeParameterPositions: function InvalidModifierOnTypeParameterPositions(t) {
            var r = t.modifier;
            return "'".concat(r, "' modifier can only appear on a type parameter of a class, interface or type alias.");
          },
          InvalidModifiersOrder: function InvalidModifiersOrder(t) {
            var r = t.orderedModifiers;
            return "'".concat(r[0], "' modifier must precede '").concat(r[1], "' modifier.");
          },
          InvalidPropertyAccessAfterInstantiationExpression: "Invalid property access after an instantiation expression. You can either wrap the instantiation expression in parentheses, or delete the type arguments.",
          InvalidTupleMemberLabel: "Tuple members must be labeled with a simple identifier.",
          MissingInterfaceName: "'interface' declarations must be followed by an identifier.",
          MixedLabeledAndUnlabeledElements: "Tuple members must all have names or all not have names.",
          NonAbstractClassHasAbstractMethod: "Abstract methods can only appear within an abstract class.",
          NonClassMethodPropertyHasAbstractModifer: "'abstract' modifier can only appear on a class, method, or property declaration.",
          OptionalTypeBeforeRequired: "A required element cannot follow an optional element.",
          OverrideNotInSubClass: "This member cannot have an 'override' modifier because its containing class does not extend another class.",
          PatternIsOptional: "A binding pattern parameter cannot be optional in an implementation signature.",
          PrivateElementHasAbstract: "Private elements cannot have the 'abstract' modifier.",
          PrivateElementHasAccessibility: function PrivateElementHasAccessibility(t) {
            var r = t.modifier;
            return "Private elements cannot have an accessibility modifier ('".concat(r, "').");
          },
          ReadonlyForMethodSignature: "'readonly' modifier can only appear on a property declaration or index signature.",
          ReservedArrowTypeParam: "This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.",
          ReservedTypeAssertion: "This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.",
          SetAccesorCannotHaveOptionalParameter: "A 'set' accessor cannot have an optional parameter.",
          SetAccesorCannotHaveRestParameter: "A 'set' accessor cannot have rest parameter.",
          SetAccesorCannotHaveReturnType: "A 'set' accessor cannot have a return type annotation.",
          SingleTypeParameterWithoutTrailingComma: function SingleTypeParameterWithoutTrailingComma(t) {
            var r = t.typeParameterName;
            return "Single type parameter ".concat(r, " should have a trailing comma. Example usage: <").concat(r, ",>.");
          },
          StaticBlockCannotHaveModifier: "Static class blocks cannot have any modifier.",
          TupleOptionalAfterType: "A labeled tuple optional element must be declared using a question mark after the name and before the colon (`name?: type`), rather than after the type (`name: type?`).",
          TypeAnnotationAfterAssign: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.",
          TypeImportCannotSpecifyDefaultAndNamed: "A type-only import can specify a default import or named bindings, but not both.",
          TypeModifierIsUsedInTypeExports: "The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.",
          TypeModifierIsUsedInTypeImports: "The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.",
          UnexpectedParameterModifier: "A parameter property is only allowed in a constructor implementation.",
          UnexpectedReadonly: "'readonly' type modifier is only permitted on array and tuple literal types.",
          UnexpectedTypeAnnotation: "Did not expect a type annotation here.",
          UnexpectedTypeCastInParameter: "Unexpected type cast in parameter position.",
          UnsupportedImportTypeArgument: "Argument in a type import must be a string literal.",
          UnsupportedParameterPropertyKind: "A parameter property may not be declared using a binding pattern.",
          UnsupportedSignatureParameterKind: function UnsupportedSignatureParameterKind(t) {
            var r = t.type;
            return "Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ".concat(r, ".");
          }
        });

        function lh(t) {
          switch (t) {
            case "any":
              return "TSAnyKeyword";

            case "boolean":
              return "TSBooleanKeyword";

            case "bigint":
              return "TSBigIntKeyword";

            case "never":
              return "TSNeverKeyword";

            case "number":
              return "TSNumberKeyword";

            case "object":
              return "TSObjectKeyword";

            case "string":
              return "TSStringKeyword";

            case "symbol":
              return "TSSymbolKeyword";

            case "undefined":
              return "TSUndefinedKeyword";

            case "unknown":
              return "TSUnknownKeyword";

            default:
              return;
          }
        }

        function Hr(t) {
          return t === "private" || t === "public" || t === "protected";
        }

        function hh(t) {
          return t === "in" || t === "out";
        }

        var uh = function uh(t) {
          return (
            /*#__PURE__*/
            function (_t6) {
              _inherits(_class4, _t6);

              function _class4() {
                var _this25;

                _classCallCheck(this, _class4);

                _this25 = _possibleConstructorReturn(this, _getPrototypeOf(_class4).apply(this, arguments)), _this25.tsParseInOutModifiers = _this25.tsParseModifiers.bind(_assertThisInitialized(_this25), {
                  allowedModifiers: ["in", "out"],
                  disallowedModifiers: ["const", "public", "private", "protected", "readonly", "declare", "abstract", "override"],
                  errorTemplate: I.InvalidModifierOnTypeParameter
                }), _this25.tsParseConstModifier = _this25.tsParseModifiers.bind(_assertThisInitialized(_this25), {
                  allowedModifiers: ["const"],
                  disallowedModifiers: ["in", "out"],
                  errorTemplate: I.InvalidModifierOnTypeParameterPositions
                }), _this25.tsParseInOutConstModifiers = _this25.tsParseModifiers.bind(_assertThisInitialized(_this25), {
                  allowedModifiers: ["in", "out", "const"],
                  disallowedModifiers: ["public", "private", "protected", "readonly", "declare", "abstract", "override"],
                  errorTemplate: I.InvalidModifierOnTypeParameter
                });
                return _this25;
              }

              _createClass(_class4, [{
                key: "getScopeHandler",
                value: function getScopeHandler() {
                  return rh;
                }
              }, {
                key: "tsIsIdentifier",
                value: function tsIsIdentifier() {
                  return q(this.state.type);
                }
              }, {
                key: "tsTokenCanFollowModifier",
                value: function tsTokenCanFollowModifier() {
                  return (this.match(0) || this.match(5) || this.match(55) || this.match(21) || this.match(136) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();
                }
              }, {
                key: "tsNextTokenCanFollowModifier",
                value: function tsNextTokenCanFollowModifier() {
                  return this.next(), this.tsTokenCanFollowModifier();
                }
              }, {
                key: "tsParseModifier",
                value: function tsParseModifier(e, s) {
                  if (!q(this.state.type) && this.state.type !== 58 && this.state.type !== 75) return;
                  var i = this.state.value;

                  if (e.indexOf(i) !== -1) {
                    if (s && this.tsIsStartOfStaticBlocks()) return;
                    if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) return i;
                  }
                }
              }, {
                key: "tsParseModifiers",
                value: function tsParseModifiers(e, s) {
                  var _this26 = this;

                  var i = e.allowedModifiers,
                      a = e.disallowedModifiers,
                      n = e.stopOnStartOfClassStaticBlock,
                      _e$errorTemplate = e.errorTemplate,
                      o = _e$errorTemplate === void 0 ? I.InvalidModifierOnTypeMember : _e$errorTemplate,
                      u = function u(y, g, T, C) {
                    g === T && s[C] && _this26.raise(I.InvalidModifiersOrder, {
                      at: y,
                      orderedModifiers: [T, C]
                    });
                  },
                      c = function c(y, g, T, C) {
                    (s[T] && g === C || s[C] && g === T) && _this26.raise(I.IncompatibleModifiers, {
                      at: y,
                      modifiers: [T, C]
                    });
                  };

                  for (;;) {
                    var y = this.state.startLoc,
                        g = this.tsParseModifier(i.concat(a != null ? a : []), n);
                    if (!g) break;
                    Hr(g) ? s.accessibility ? this.raise(I.DuplicateAccessibilityModifier, {
                      at: y,
                      modifier: g
                    }) : (u(y, g, g, "override"), u(y, g, g, "static"), u(y, g, g, "readonly"), s.accessibility = g) : hh(g) ? (s[g] && this.raise(I.DuplicateModifier, {
                      at: y,
                      modifier: g
                    }), s[g] = !0, u(y, g, "in", "out")) : (Object.hasOwnProperty.call(s, g) ? this.raise(I.DuplicateModifier, {
                      at: y,
                      modifier: g
                    }) : (u(y, g, "static", "readonly"), u(y, g, "static", "override"), u(y, g, "override", "readonly"), u(y, g, "abstract", "override"), c(y, g, "declare", "override"), c(y, g, "static", "abstract")), s[g] = !0), a != null && a.includes(g) && this.raise(o, {
                      at: y,
                      modifier: g
                    });
                  }
                }
              }, {
                key: "tsIsListTerminator",
                value: function tsIsListTerminator(e) {
                  switch (e) {
                    case "EnumMembers":
                    case "TypeMembers":
                      return this.match(8);

                    case "HeritageClauseElement":
                      return this.match(5);

                    case "TupleElementTypes":
                      return this.match(3);

                    case "TypeParametersOrArguments":
                      return this.match(48);
                  }
                }
              }, {
                key: "tsParseList",
                value: function tsParseList(e, s) {
                  var i = [];

                  for (; !this.tsIsListTerminator(e);) {
                    i.push(s());
                  }

                  return i;
                }
              }, {
                key: "tsParseDelimitedList",
                value: function tsParseDelimitedList(e, s, i) {
                  return oh(this.tsParseDelimitedListWorker(e, s, !0, i));
                }
              }, {
                key: "tsParseDelimitedListWorker",
                value: function tsParseDelimitedListWorker(e, s, i, a) {
                  var n = [],
                      o = -1;

                  for (; !this.tsIsListTerminator(e);) {
                    o = -1;
                    var u = s();
                    if (u == null) return;

                    if (n.push(u), this.eat(12)) {
                      o = this.state.lastTokStart;
                      continue;
                    }

                    if (this.tsIsListTerminator(e)) break;
                    i && this.expect(12);
                    return;
                  }

                  return a && (a.value = o), n;
                }
              }, {
                key: "tsParseBracketedList",
                value: function tsParseBracketedList(e, s, i, a, n) {
                  a || (i ? this.expect(0) : this.expect(47));
                  var o = this.tsParseDelimitedList(e, s, n);
                  return i ? this.expect(3) : this.expect(48), o;
                }
              }, {
                key: "tsParseImportType",
                value: function tsParseImportType() {
                  var e = this.startNode();
                  return this.expect(83), this.expect(10), this.match(131) || this.raise(I.UnsupportedImportTypeArgument, {
                    at: this.state.startLoc
                  }), e.argument = _get(_getPrototypeOf(_class4.prototype), "parseExprAtom", this).call(this), this.expect(11), this.eat(16) && (e.qualifier = this.tsParseEntityName()), this.match(47) && (e.typeParameters = this.tsParseTypeArguments()), this.finishNode(e, "TSImportType");
                }
              }, {
                key: "tsParseEntityName",
                value: function tsParseEntityName() {
                  var e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0,
                      s = this.parseIdentifier(e);

                  for (; this.eat(16);) {
                    var i = this.startNodeAtNode(s);
                    i.left = s, i.right = this.parseIdentifier(e), s = this.finishNode(i, "TSQualifiedName");
                  }

                  return s;
                }
              }, {
                key: "tsParseTypeReference",
                value: function tsParseTypeReference() {
                  var e = this.startNode();
                  return e.typeName = this.tsParseEntityName(), !this.hasPrecedingLineBreak() && this.match(47) && (e.typeParameters = this.tsParseTypeArguments()), this.finishNode(e, "TSTypeReference");
                }
              }, {
                key: "tsParseThisTypePredicate",
                value: function tsParseThisTypePredicate(e) {
                  this.next();
                  var s = this.startNodeAtNode(e);
                  return s.parameterName = e, s.typeAnnotation = this.tsParseTypeAnnotation(!1), s.asserts = !1, this.finishNode(s, "TSTypePredicate");
                }
              }, {
                key: "tsParseThisTypeNode",
                value: function tsParseThisTypeNode() {
                  var e = this.startNode();
                  return this.next(), this.finishNode(e, "TSThisType");
                }
              }, {
                key: "tsParseTypeQuery",
                value: function tsParseTypeQuery() {
                  var e = this.startNode();
                  return this.expect(87), this.match(83) ? e.exprName = this.tsParseImportType() : e.exprName = this.tsParseEntityName(), !this.hasPrecedingLineBreak() && this.match(47) && (e.typeParameters = this.tsParseTypeArguments()), this.finishNode(e, "TSTypeQuery");
                }
              }, {
                key: "tsParseTypeParameter",
                value: function tsParseTypeParameter(e) {
                  var s = this.startNode();
                  return e(s), s.name = this.tsParseTypeParameterName(), s.constraint = this.tsEatThenParseType(81), s["default"] = this.tsEatThenParseType(29), this.finishNode(s, "TSTypeParameter");
                }
              }, {
                key: "tsTryParseTypeParameters",
                value: function tsTryParseTypeParameters(e) {
                  if (this.match(47)) return this.tsParseTypeParameters(e);
                }
              }, {
                key: "tsParseTypeParameters",
                value: function tsParseTypeParameters(e) {
                  var s = this.startNode();
                  this.match(47) || this.match(140) ? this.next() : this.unexpected();
                  var i = {
                    value: -1
                  };
                  return s.params = this.tsParseBracketedList("TypeParametersOrArguments", this.tsParseTypeParameter.bind(this, e), !1, !0, i), s.params.length === 0 && this.raise(I.EmptyTypeParameters, {
                    at: s
                  }), i.value !== -1 && this.addExtra(s, "trailingComma", i.value), this.finishNode(s, "TSTypeParameterDeclaration");
                }
              }, {
                key: "tsFillSignature",
                value: function tsFillSignature(e, s) {
                  var i = e === 19,
                      a = "parameters",
                      n = "typeAnnotation";
                  s.typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier), this.expect(10), s[a] = this.tsParseBindingListForSignature(), i ? s[n] = this.tsParseTypeOrTypePredicateAnnotation(e) : this.match(e) && (s[n] = this.tsParseTypeOrTypePredicateAnnotation(e));
                }
              }, {
                key: "tsParseBindingListForSignature",
                value: function tsParseBindingListForSignature() {
                  var _this27 = this;

                  return _get(_getPrototypeOf(_class4.prototype), "parseBindingList", this).call(this, 11, 41, 2).map(function (e) {
                    return e.type !== "Identifier" && e.type !== "RestElement" && e.type !== "ObjectPattern" && e.type !== "ArrayPattern" && _this27.raise(I.UnsupportedSignatureParameterKind, {
                      at: e,
                      type: e.type
                    }), e;
                  });
                }
              }, {
                key: "tsParseTypeMemberSemicolon",
                value: function tsParseTypeMemberSemicolon() {
                  !this.eat(12) && !this.isLineTerminator() && this.expect(13);
                }
              }, {
                key: "tsParseSignatureMember",
                value: function tsParseSignatureMember(e, s) {
                  return this.tsFillSignature(14, s), this.tsParseTypeMemberSemicolon(), this.finishNode(s, e);
                }
              }, {
                key: "tsIsUnambiguouslyIndexSignature",
                value: function tsIsUnambiguouslyIndexSignature() {
                  return this.next(), q(this.state.type) ? (this.next(), this.match(14)) : !1;
                }
              }, {
                key: "tsTryParseIndexSignature",
                value: function tsTryParseIndexSignature(e) {
                  if (!(this.match(0) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) return;
                  this.expect(0);
                  var s = this.parseIdentifier();
                  s.typeAnnotation = this.tsParseTypeAnnotation(), this.resetEndLocation(s), this.expect(3), e.parameters = [s];
                  var i = this.tsTryParseTypeAnnotation();
                  return i && (e.typeAnnotation = i), this.tsParseTypeMemberSemicolon(), this.finishNode(e, "TSIndexSignature");
                }
              }, {
                key: "tsParsePropertyOrMethodSignature",
                value: function tsParsePropertyOrMethodSignature(e, s) {
                  this.eat(17) && (e.optional = !0);
                  var i = e;

                  if (this.match(10) || this.match(47)) {
                    s && this.raise(I.ReadonlyForMethodSignature, {
                      at: e
                    });
                    var a = i;
                    a.kind && this.match(47) && this.raise(I.AccesorCannotHaveTypeParameters, {
                      at: this.state.curPosition()
                    }), this.tsFillSignature(14, a), this.tsParseTypeMemberSemicolon();
                    var n = "parameters",
                        o = "typeAnnotation";
                    if (a.kind === "get") a[n].length > 0 && (this.raise(f.BadGetterArity, {
                      at: this.state.curPosition()
                    }), this.isThisParam(a[n][0]) && this.raise(I.AccesorCannotDeclareThisParameter, {
                      at: this.state.curPosition()
                    }));else if (a.kind === "set") {
                      if (a[n].length !== 1) this.raise(f.BadSetterArity, {
                        at: this.state.curPosition()
                      });else {
                        var u = a[n][0];
                        this.isThisParam(u) && this.raise(I.AccesorCannotDeclareThisParameter, {
                          at: this.state.curPosition()
                        }), u.type === "Identifier" && u.optional && this.raise(I.SetAccesorCannotHaveOptionalParameter, {
                          at: this.state.curPosition()
                        }), u.type === "RestElement" && this.raise(I.SetAccesorCannotHaveRestParameter, {
                          at: this.state.curPosition()
                        });
                      }
                      a[o] && this.raise(I.SetAccesorCannotHaveReturnType, {
                        at: a[o]
                      });
                    } else a.kind = "method";
                    return this.finishNode(a, "TSMethodSignature");
                  } else {
                    var _a3 = i;
                    s && (_a3.readonly = !0);

                    var _n5 = this.tsTryParseTypeAnnotation();

                    return _n5 && (_a3.typeAnnotation = _n5), this.tsParseTypeMemberSemicolon(), this.finishNode(_a3, "TSPropertySignature");
                  }
                }
              }, {
                key: "tsParseTypeMember",
                value: function tsParseTypeMember() {
                  var e = this.startNode();
                  if (this.match(10) || this.match(47)) return this.tsParseSignatureMember("TSCallSignatureDeclaration", e);

                  if (this.match(77)) {
                    var i = this.startNode();
                    return this.next(), this.match(10) || this.match(47) ? this.tsParseSignatureMember("TSConstructSignatureDeclaration", e) : (e.key = this.createIdentifier(i, "new"), this.tsParsePropertyOrMethodSignature(e, !1));
                  }

                  this.tsParseModifiers({
                    allowedModifiers: ["readonly"],
                    disallowedModifiers: ["declare", "abstract", "private", "protected", "public", "static", "override"]
                  }, e);
                  var s = this.tsTryParseIndexSignature(e);
                  return s || (_get(_getPrototypeOf(_class4.prototype), "parsePropertyName", this).call(this, e), !e.computed && e.key.type === "Identifier" && (e.key.name === "get" || e.key.name === "set") && this.tsTokenCanFollowModifier() && (e.kind = e.key.name, _get(_getPrototypeOf(_class4.prototype), "parsePropertyName", this).call(this, e)), this.tsParsePropertyOrMethodSignature(e, !!e.readonly));
                }
              }, {
                key: "tsParseTypeLiteral",
                value: function tsParseTypeLiteral() {
                  var e = this.startNode();
                  return e.members = this.tsParseObjectTypeMembers(), this.finishNode(e, "TSTypeLiteral");
                }
              }, {
                key: "tsParseObjectTypeMembers",
                value: function tsParseObjectTypeMembers() {
                  this.expect(5);
                  var e = this.tsParseList("TypeMembers", this.tsParseTypeMember.bind(this));
                  return this.expect(8), e;
                }
              }, {
                key: "tsIsStartOfMappedType",
                value: function tsIsStartOfMappedType() {
                  return this.next(), this.eat(53) ? this.isContextual(120) : (this.isContextual(120) && this.next(), !this.match(0) || (this.next(), !this.tsIsIdentifier()) ? !1 : (this.next(), this.match(58)));
                }
              }, {
                key: "tsParseMappedTypeParameter",
                value: function tsParseMappedTypeParameter() {
                  var e = this.startNode();
                  return e.name = this.tsParseTypeParameterName(), e.constraint = this.tsExpectThenParseType(58), this.finishNode(e, "TSTypeParameter");
                }
              }, {
                key: "tsParseMappedType",
                value: function tsParseMappedType() {
                  var e = this.startNode();
                  return this.expect(5), this.match(53) ? (e.readonly = this.state.value, this.next(), this.expectContextual(120)) : this.eatContextual(120) && (e.readonly = !0), this.expect(0), e.typeParameter = this.tsParseMappedTypeParameter(), e.nameType = this.eatContextual(93) ? this.tsParseType() : null, this.expect(3), this.match(53) ? (e.optional = this.state.value, this.next(), this.expect(17)) : this.eat(17) && (e.optional = !0), e.typeAnnotation = this.tsTryParseType(), this.semicolon(), this.expect(8), this.finishNode(e, "TSMappedType");
                }
              }, {
                key: "tsParseTupleType",
                value: function tsParseTupleType() {
                  var _this28 = this;

                  var e = this.startNode();
                  e.elementTypes = this.tsParseBracketedList("TupleElementTypes", this.tsParseTupleElementType.bind(this), !0, !1);
                  var s = !1,
                      i = null;
                  return e.elementTypes.forEach(function (a) {
                    var n;
                    var _a4 = a,
                        o = _a4.type;
                    s && o !== "TSRestType" && o !== "TSOptionalType" && !(o === "TSNamedTupleMember" && a.optional) && _this28.raise(I.OptionalTypeBeforeRequired, {
                      at: a
                    }), s || (s = o === "TSNamedTupleMember" && a.optional || o === "TSOptionalType");
                    var u = o;
                    o === "TSRestType" && (a = a.typeAnnotation, u = a.type);
                    var c = u === "TSNamedTupleMember";
                    (n = i) != null || (i = c), i !== c && _this28.raise(I.MixedLabeledAndUnlabeledElements, {
                      at: a
                    });
                  }), this.finishNode(e, "TSTupleType");
                }
              }, {
                key: "tsParseTupleElementType",
                value: function tsParseTupleElementType() {
                  var e = this.state.startLoc,
                      s = this.eat(21),
                      i,
                      a,
                      n,
                      o,
                      c = te(this.state.type) ? this.lookaheadCharCode() : null;
                  if (c === 58) i = !0, n = !1, a = this.parseIdentifier(!0), this.expect(14), o = this.tsParseType();else if (c === 63) {
                    n = !0;
                    var y = this.state.startLoc,
                        g = this.state.value,
                        T = this.tsParseNonArrayType();
                    this.lookaheadCharCode() === 58 ? (i = !0, a = this.createIdentifier(this.startNodeAt(y), g), this.expect(17), this.expect(14), o = this.tsParseType()) : (i = !1, o = T, this.expect(17));
                  } else o = this.tsParseType(), n = this.eat(17), i = this.eat(14);

                  if (i) {
                    var _y2;

                    a ? (_y2 = this.startNodeAtNode(a), _y2.optional = n, _y2.label = a, _y2.elementType = o, this.eat(17) && (_y2.optional = !0, this.raise(I.TupleOptionalAfterType, {
                      at: this.state.lastTokStartLoc
                    }))) : (_y2 = this.startNodeAtNode(o), _y2.optional = n, this.raise(I.InvalidTupleMemberLabel, {
                      at: o
                    }), _y2.label = o, _y2.elementType = this.tsParseType()), o = this.finishNode(_y2, "TSNamedTupleMember");
                  } else if (n) {
                    var _y3 = this.startNodeAtNode(o);

                    _y3.typeAnnotation = o, o = this.finishNode(_y3, "TSOptionalType");
                  }

                  if (s) {
                    var _y4 = this.startNodeAt(e);

                    _y4.typeAnnotation = o, o = this.finishNode(_y4, "TSRestType");
                  }

                  return o;
                }
              }, {
                key: "tsParseParenthesizedType",
                value: function tsParseParenthesizedType() {
                  var e = this.startNode();
                  return this.expect(10), e.typeAnnotation = this.tsParseType(), this.expect(11), this.finishNode(e, "TSParenthesizedType");
                }
              }, {
                key: "tsParseFunctionOrConstructorType",
                value: function tsParseFunctionOrConstructorType(e, s) {
                  var _this29 = this;

                  var i = this.startNode();
                  return e === "TSConstructorType" && (i["abstract"] = !!s, s && this.next(), this.next()), this.tsInAllowConditionalTypesContext(function () {
                    return _this29.tsFillSignature(19, i);
                  }), this.finishNode(i, e);
                }
              }, {
                key: "tsParseLiteralTypeNode",
                value: function tsParseLiteralTypeNode() {
                  var _this30 = this;

                  var e = this.startNode();
                  return e.literal = function () {
                    switch (_this30.state.type) {
                      case 132:
                      case 133:
                      case 131:
                      case 85:
                      case 86:
                        return _get(_getPrototypeOf(_class4.prototype), "parseExprAtom", _this30).call(_this30);

                      default:
                        _this30.unexpected();

                    }
                  }(), this.finishNode(e, "TSLiteralType");
                }
              }, {
                key: "tsParseTemplateLiteralType",
                value: function tsParseTemplateLiteralType() {
                  var e = this.startNode();
                  return e.literal = _get(_getPrototypeOf(_class4.prototype), "parseTemplate", this).call(this, !1), this.finishNode(e, "TSLiteralType");
                }
              }, {
                key: "parseTemplateSubstitution",
                value: function parseTemplateSubstitution() {
                  return this.state.inType ? this.tsParseType() : _get(_getPrototypeOf(_class4.prototype), "parseTemplateSubstitution", this).call(this);
                }
              }, {
                key: "tsParseThisTypeOrThisTypePredicate",
                value: function tsParseThisTypeOrThisTypePredicate() {
                  var e = this.tsParseThisTypeNode();
                  return this.isContextual(114) && !this.hasPrecedingLineBreak() ? this.tsParseThisTypePredicate(e) : e;
                }
              }, {
                key: "tsParseNonArrayType",
                value: function tsParseNonArrayType() {
                  switch (this.state.type) {
                    case 131:
                    case 132:
                    case 133:
                    case 85:
                    case 86:
                      return this.tsParseLiteralTypeNode();

                    case 53:
                      if (this.state.value === "-") {
                        var e = this.startNode(),
                            s = this.lookahead();
                        return s.type !== 132 && s.type !== 133 && this.unexpected(), e.literal = this.parseMaybeUnary(), this.finishNode(e, "TSLiteralType");
                      }

                      break;

                    case 78:
                      return this.tsParseThisTypeOrThisTypePredicate();

                    case 87:
                      return this.tsParseTypeQuery();

                    case 83:
                      return this.tsParseImportType();

                    case 5:
                      return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();

                    case 0:
                      return this.tsParseTupleType();

                    case 10:
                      return this.tsParseParenthesizedType();

                    case 25:
                    case 24:
                      return this.tsParseTemplateLiteralType();

                    default:
                      {
                        var _e4 = this.state.type;

                        if (q(_e4) || _e4 === 88 || _e4 === 84) {
                          var _s12 = _e4 === 88 ? "TSVoidKeyword" : _e4 === 84 ? "TSNullKeyword" : lh(this.state.value);

                          if (_s12 !== void 0 && this.lookaheadCharCode() !== 46) {
                            var i = this.startNode();
                            return this.next(), this.finishNode(i, _s12);
                          }

                          return this.tsParseTypeReference();
                        }
                      }
                  }

                  this.unexpected();
                }
              }, {
                key: "tsParseArrayTypeOrHigher",
                value: function tsParseArrayTypeOrHigher() {
                  var e = this.tsParseNonArrayType();

                  for (; !this.hasPrecedingLineBreak() && this.eat(0);) {
                    if (this.match(3)) {
                      var s = this.startNodeAtNode(e);
                      s.elementType = e, this.expect(3), e = this.finishNode(s, "TSArrayType");
                    } else {
                      var _s13 = this.startNodeAtNode(e);

                      _s13.objectType = e, _s13.indexType = this.tsParseType(), this.expect(3), e = this.finishNode(_s13, "TSIndexedAccessType");
                    }
                  }

                  return e;
                }
              }, {
                key: "tsParseTypeOperator",
                value: function tsParseTypeOperator() {
                  var e = this.startNode(),
                      s = this.state.value;
                  return this.next(), e.operator = s, e.typeAnnotation = this.tsParseTypeOperatorOrHigher(), s === "readonly" && this.tsCheckTypeAnnotationForReadOnly(e), this.finishNode(e, "TSTypeOperator");
                }
              }, {
                key: "tsCheckTypeAnnotationForReadOnly",
                value: function tsCheckTypeAnnotationForReadOnly(e) {
                  switch (e.typeAnnotation.type) {
                    case "TSTupleType":
                    case "TSArrayType":
                      return;

                    default:
                      this.raise(I.UnexpectedReadonly, {
                        at: e
                      });
                  }
                }
              }, {
                key: "tsParseInferType",
                value: function tsParseInferType() {
                  var _this31 = this;

                  var e = this.startNode();
                  this.expectContextual(113);
                  var s = this.startNode();
                  return s.name = this.tsParseTypeParameterName(), s.constraint = this.tsTryParse(function () {
                    return _this31.tsParseConstraintForInferType();
                  }), e.typeParameter = this.finishNode(s, "TSTypeParameter"), this.finishNode(e, "TSInferType");
                }
              }, {
                key: "tsParseConstraintForInferType",
                value: function tsParseConstraintForInferType() {
                  var _this32 = this;

                  if (this.eat(81)) {
                    var e = this.tsInDisallowConditionalTypesContext(function () {
                      return _this32.tsParseType();
                    });
                    if (this.state.inDisallowConditionalTypesContext || !this.match(17)) return e;
                  }
                }
              }, {
                key: "tsParseTypeOperatorOrHigher",
                value: function tsParseTypeOperatorOrHigher() {
                  var _this33 = this;

                  return qo(this.state.type) && !this.state.containsEsc ? this.tsParseTypeOperator() : this.isContextual(113) ? this.tsParseInferType() : this.tsInAllowConditionalTypesContext(function () {
                    return _this33.tsParseArrayTypeOrHigher();
                  });
                }
              }, {
                key: "tsParseUnionOrIntersectionType",
                value: function tsParseUnionOrIntersectionType(e, s, i) {
                  var a = this.startNode(),
                      n = this.eat(i),
                      o = [];

                  do {
                    o.push(s());
                  } while (this.eat(i));

                  return o.length === 1 && !n ? o[0] : (a.types = o, this.finishNode(a, e));
                }
              }, {
                key: "tsParseIntersectionTypeOrHigher",
                value: function tsParseIntersectionTypeOrHigher() {
                  return this.tsParseUnionOrIntersectionType("TSIntersectionType", this.tsParseTypeOperatorOrHigher.bind(this), 45);
                }
              }, {
                key: "tsParseUnionTypeOrHigher",
                value: function tsParseUnionTypeOrHigher() {
                  return this.tsParseUnionOrIntersectionType("TSUnionType", this.tsParseIntersectionTypeOrHigher.bind(this), 43);
                }
              }, {
                key: "tsIsStartOfFunctionType",
                value: function tsIsStartOfFunctionType() {
                  return this.match(47) ? !0 : this.match(10) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));
                }
              }, {
                key: "tsSkipParameterStart",
                value: function tsSkipParameterStart() {
                  if (q(this.state.type) || this.match(78)) return this.next(), !0;

                  if (this.match(5)) {
                    var e = this.state.errors,
                        s = e.length;

                    try {
                      return this.parseObjectLike(8, !0), e.length === s;
                    } catch (_unused14) {
                      return !1;
                    }
                  }

                  if (this.match(0)) {
                    this.next();
                    var _e5 = this.state.errors,
                        _s14 = _e5.length;

                    try {
                      return _get(_getPrototypeOf(_class4.prototype), "parseBindingList", this).call(this, 3, 93, 1), _e5.length === _s14;
                    } catch (_unused15) {
                      return !1;
                    }
                  }

                  return !1;
                }
              }, {
                key: "tsIsUnambiguouslyStartOfFunctionType",
                value: function tsIsUnambiguouslyStartOfFunctionType() {
                  return this.next(), !!(this.match(11) || this.match(21) || this.tsSkipParameterStart() && (this.match(14) || this.match(12) || this.match(17) || this.match(29) || this.match(11) && (this.next(), this.match(19))));
                }
              }, {
                key: "tsParseTypeOrTypePredicateAnnotation",
                value: function tsParseTypeOrTypePredicateAnnotation(e) {
                  var _this34 = this;

                  return this.tsInType(function () {
                    var s = _this34.startNode();

                    _this34.expect(e);

                    var i = _this34.startNode(),
                        a = !!_this34.tsTryParse(_this34.tsParseTypePredicateAsserts.bind(_this34));

                    if (a && _this34.match(78)) {
                      var u = _this34.tsParseThisTypeOrThisTypePredicate();

                      return u.type === "TSThisType" ? (i.parameterName = u, i.asserts = !0, i.typeAnnotation = null, u = _this34.finishNode(i, "TSTypePredicate")) : (_this34.resetStartLocationFromNode(u, i), u.asserts = !0), s.typeAnnotation = u, _this34.finishNode(s, "TSTypeAnnotation");
                    }

                    var n = _this34.tsIsIdentifier() && _this34.tsTryParse(_this34.tsParseTypePredicatePrefix.bind(_this34));

                    if (!n) return a ? (i.parameterName = _this34.parseIdentifier(), i.asserts = a, i.typeAnnotation = null, s.typeAnnotation = _this34.finishNode(i, "TSTypePredicate"), _this34.finishNode(s, "TSTypeAnnotation")) : _this34.tsParseTypeAnnotation(!1, s);

                    var o = _this34.tsParseTypeAnnotation(!1);

                    return i.parameterName = n, i.typeAnnotation = o, i.asserts = a, s.typeAnnotation = _this34.finishNode(i, "TSTypePredicate"), _this34.finishNode(s, "TSTypeAnnotation");
                  });
                }
              }, {
                key: "tsTryParseTypeOrTypePredicateAnnotation",
                value: function tsTryParseTypeOrTypePredicateAnnotation() {
                  return this.match(14) ? this.tsParseTypeOrTypePredicateAnnotation(14) : void 0;
                }
              }, {
                key: "tsTryParseTypeAnnotation",
                value: function tsTryParseTypeAnnotation() {
                  return this.match(14) ? this.tsParseTypeAnnotation() : void 0;
                }
              }, {
                key: "tsTryParseType",
                value: function tsTryParseType() {
                  return this.tsEatThenParseType(14);
                }
              }, {
                key: "tsParseTypePredicatePrefix",
                value: function tsParseTypePredicatePrefix() {
                  var e = this.parseIdentifier();
                  if (this.isContextual(114) && !this.hasPrecedingLineBreak()) return this.next(), e;
                }
              }, {
                key: "tsParseTypePredicateAsserts",
                value: function tsParseTypePredicateAsserts() {
                  if (this.state.type !== 107) return !1;
                  var e = this.state.containsEsc;
                  return this.next(), !q(this.state.type) && !this.match(78) ? !1 : (e && this.raise(f.InvalidEscapedReservedWord, {
                    at: this.state.lastTokStartLoc,
                    reservedWord: "asserts"
                  }), !0);
                }
              }, {
                key: "tsParseTypeAnnotation",
                value: function tsParseTypeAnnotation() {
                  var _this35 = this;

                  var e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0,
                      s = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.startNode();
                  return this.tsInType(function () {
                    e && _this35.expect(14), s.typeAnnotation = _this35.tsParseType();
                  }), this.finishNode(s, "TSTypeAnnotation");
                }
              }, {
                key: "tsParseType",
                value: function tsParseType() {
                  var _this36 = this;

                  $r(this.state.inType);
                  var e = this.tsParseNonConditionalType();
                  if (this.state.inDisallowConditionalTypesContext || this.hasPrecedingLineBreak() || !this.eat(81)) return e;
                  var s = this.startNodeAtNode(e);
                  return s.checkType = e, s.extendsType = this.tsInDisallowConditionalTypesContext(function () {
                    return _this36.tsParseNonConditionalType();
                  }), this.expect(17), s.trueType = this.tsInAllowConditionalTypesContext(function () {
                    return _this36.tsParseType();
                  }), this.expect(14), s.falseType = this.tsInAllowConditionalTypesContext(function () {
                    return _this36.tsParseType();
                  }), this.finishNode(s, "TSConditionalType");
                }
              }, {
                key: "isAbstractConstructorSignature",
                value: function isAbstractConstructorSignature() {
                  return this.isContextual(122) && this.lookahead().type === 77;
                }
              }, {
                key: "tsParseNonConditionalType",
                value: function tsParseNonConditionalType() {
                  return this.tsIsStartOfFunctionType() ? this.tsParseFunctionOrConstructorType("TSFunctionType") : this.match(77) ? this.tsParseFunctionOrConstructorType("TSConstructorType") : this.isAbstractConstructorSignature() ? this.tsParseFunctionOrConstructorType("TSConstructorType", !0) : this.tsParseUnionTypeOrHigher();
                }
              }, {
                key: "tsParseTypeAssertion",
                value: function tsParseTypeAssertion() {
                  var _this37 = this;

                  this.getPluginOption("typescript", "disallowAmbiguousJSXLike") && this.raise(I.ReservedTypeAssertion, {
                    at: this.state.startLoc
                  });
                  var e = this.startNode();
                  return e.typeAnnotation = this.tsInType(function () {
                    return _this37.next(), _this37.match(75) ? _this37.tsParseTypeReference() : _this37.tsParseType();
                  }), this.expect(48), e.expression = this.parseMaybeUnary(), this.finishNode(e, "TSTypeAssertion");
                }
              }, {
                key: "tsParseHeritageClause",
                value: function tsParseHeritageClause(e) {
                  var _this38 = this;

                  var s = this.state.startLoc,
                      i = this.tsParseDelimitedList("HeritageClauseElement", function () {
                    var a = _this38.startNode();

                    return a.expression = _this38.tsParseEntityName(), _this38.match(47) && (a.typeParameters = _this38.tsParseTypeArguments()), _this38.finishNode(a, "TSExpressionWithTypeArguments");
                  });
                  return i.length || this.raise(I.EmptyHeritageClauseType, {
                    at: s,
                    token: e
                  }), i;
                }
              }, {
                key: "tsParseInterfaceDeclaration",
                value: function tsParseInterfaceDeclaration(e) {
                  var s = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
                  if (this.hasFollowingLineBreak()) return null;
                  this.expectContextual(127), s.declare && (e.declare = !0), q(this.state.type) ? (e.id = this.parseIdentifier(), this.checkIdentifier(e.id, pl)) : (e.id = null, this.raise(I.MissingInterfaceName, {
                    at: this.state.startLoc
                  })), e.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutConstModifiers), this.eat(81) && (e["extends"] = this.tsParseHeritageClause("extends"));
                  var i = this.startNode();
                  return i.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this)), e.body = this.finishNode(i, "TSInterfaceBody"), this.finishNode(e, "TSInterfaceDeclaration");
                }
              }, {
                key: "tsParseTypeAliasDeclaration",
                value: function tsParseTypeAliasDeclaration(e) {
                  var _this39 = this;

                  return e.id = this.parseIdentifier(), this.checkIdentifier(e.id, fl), e.typeAnnotation = this.tsInType(function () {
                    if (e.typeParameters = _this39.tsTryParseTypeParameters(_this39.tsParseInOutModifiers), _this39.expect(29), _this39.isContextual(112) && _this39.lookahead().type !== 16) {
                      var s = _this39.startNode();

                      return _this39.next(), _this39.finishNode(s, "TSIntrinsicKeyword");
                    }

                    return _this39.tsParseType();
                  }), this.semicolon(), this.finishNode(e, "TSTypeAliasDeclaration");
                }
              }, {
                key: "tsInNoContext",
                value: function tsInNoContext(e) {
                  var s = this.state.context;
                  this.state.context = [s[0]];

                  try {
                    return e();
                  } finally {
                    this.state.context = s;
                  }
                }
              }, {
                key: "tsInType",
                value: function tsInType(e) {
                  var s = this.state.inType;
                  this.state.inType = !0;

                  try {
                    return e();
                  } finally {
                    this.state.inType = s;
                  }
                }
              }, {
                key: "tsInDisallowConditionalTypesContext",
                value: function tsInDisallowConditionalTypesContext(e) {
                  var s = this.state.inDisallowConditionalTypesContext;
                  this.state.inDisallowConditionalTypesContext = !0;

                  try {
                    return e();
                  } finally {
                    this.state.inDisallowConditionalTypesContext = s;
                  }
                }
              }, {
                key: "tsInAllowConditionalTypesContext",
                value: function tsInAllowConditionalTypesContext(e) {
                  var s = this.state.inDisallowConditionalTypesContext;
                  this.state.inDisallowConditionalTypesContext = !1;

                  try {
                    return e();
                  } finally {
                    this.state.inDisallowConditionalTypesContext = s;
                  }
                }
              }, {
                key: "tsEatThenParseType",
                value: function tsEatThenParseType(e) {
                  return this.match(e) ? this.tsNextThenParseType() : void 0;
                }
              }, {
                key: "tsExpectThenParseType",
                value: function tsExpectThenParseType(e) {
                  var _this40 = this;

                  return this.tsDoThenParseType(function () {
                    return _this40.expect(e);
                  });
                }
              }, {
                key: "tsNextThenParseType",
                value: function tsNextThenParseType() {
                  var _this41 = this;

                  return this.tsDoThenParseType(function () {
                    return _this41.next();
                  });
                }
              }, {
                key: "tsDoThenParseType",
                value: function tsDoThenParseType(e) {
                  var _this42 = this;

                  return this.tsInType(function () {
                    return e(), _this42.tsParseType();
                  });
                }
              }, {
                key: "tsParseEnumMember",
                value: function tsParseEnumMember() {
                  var e = this.startNode();
                  return e.id = this.match(131) ? _get(_getPrototypeOf(_class4.prototype), "parseStringLiteral", this).call(this, this.state.value) : this.parseIdentifier(!0), this.eat(29) && (e.initializer = _get(_getPrototypeOf(_class4.prototype), "parseMaybeAssignAllowIn", this).call(this)), this.finishNode(e, "TSEnumMember");
                }
              }, {
                key: "tsParseEnumDeclaration",
                value: function tsParseEnumDeclaration(e) {
                  var s = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
                  return s["const"] && (e["const"] = !0), s.declare && (e.declare = !0), this.expectContextual(124), e.id = this.parseIdentifier(), this.checkIdentifier(e.id, e["const"] ? ml : Cr), this.expect(5), e.members = this.tsParseDelimitedList("EnumMembers", this.tsParseEnumMember.bind(this)), this.expect(8), this.finishNode(e, "TSEnumDeclaration");
                }
              }, {
                key: "tsParseModuleBlock",
                value: function tsParseModuleBlock() {
                  var e = this.startNode();
                  return this.scope.enter(Fe), this.expect(5), _get(_getPrototypeOf(_class4.prototype), "parseBlockOrModuleBlockBody", this).call(this, e.body = [], void 0, !0, 8), this.scope.exit(), this.finishNode(e, "TSModuleBlock");
                }
              }, {
                key: "tsParseModuleOrNamespaceDeclaration",
                value: function tsParseModuleOrNamespaceDeclaration(e) {
                  var s = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;

                  if (e.id = this.parseIdentifier(), s || this.checkIdentifier(e.id, yl), this.eat(16)) {
                    var i = this.startNode();
                    this.tsParseModuleOrNamespaceDeclaration(i, !0), e.body = i;
                  } else this.scope.enter(Oe), this.prodParam.enter(Me), e.body = this.tsParseModuleBlock(), this.prodParam.exit(), this.scope.exit();

                  return this.finishNode(e, "TSModuleDeclaration");
                }
              }, {
                key: "tsParseAmbientExternalModuleDeclaration",
                value: function tsParseAmbientExternalModuleDeclaration(e) {
                  return this.isContextual(110) ? (e.global = !0, e.id = this.parseIdentifier()) : this.match(131) ? e.id = _get(_getPrototypeOf(_class4.prototype), "parseStringLiteral", this).call(this, this.state.value) : this.unexpected(), this.match(5) ? (this.scope.enter(Oe), this.prodParam.enter(Me), e.body = this.tsParseModuleBlock(), this.prodParam.exit(), this.scope.exit()) : this.semicolon(), this.finishNode(e, "TSModuleDeclaration");
                }
              }, {
                key: "tsParseImportEqualsDeclaration",
                value: function tsParseImportEqualsDeclaration(e, s) {
                  e.isExport = s || !1, e.id = this.parseIdentifier(), this.checkIdentifier(e.id, Ve), this.expect(29);
                  var i = this.tsParseModuleReference();
                  return e.importKind === "type" && i.type !== "TSExternalModuleReference" && this.raise(I.ImportAliasHasImportType, {
                    at: i
                  }), e.moduleReference = i, this.semicolon(), this.finishNode(e, "TSImportEqualsDeclaration");
                }
              }, {
                key: "tsIsExternalModuleReference",
                value: function tsIsExternalModuleReference() {
                  return this.isContextual(117) && this.lookaheadCharCode() === 40;
                }
              }, {
                key: "tsParseModuleReference",
                value: function tsParseModuleReference() {
                  return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(!1);
                }
              }, {
                key: "tsParseExternalModuleReference",
                value: function tsParseExternalModuleReference() {
                  var e = this.startNode();
                  return this.expectContextual(117), this.expect(10), this.match(131) || this.unexpected(), e.expression = _get(_getPrototypeOf(_class4.prototype), "parseExprAtom", this).call(this), this.expect(11), this.finishNode(e, "TSExternalModuleReference");
                }
              }, {
                key: "tsLookAhead",
                value: function tsLookAhead(e) {
                  var s = this.state.clone(),
                      i = e();
                  return this.state = s, i;
                }
              }, {
                key: "tsTryParseAndCatch",
                value: function tsTryParseAndCatch(e) {
                  var s = this.tryParse(function (i) {
                    return e() || i();
                  });
                  if (!(s.aborted || !s.node)) return s.error && (this.state = s.failState), s.node;
                }
              }, {
                key: "tsTryParse",
                value: function tsTryParse(e) {
                  var s = this.state.clone(),
                      i = e();
                  if (i !== void 0 && i !== !1) return i;
                  this.state = s;
                }
              }, {
                key: "tsTryParseDeclare",
                value: function tsTryParseDeclare(e) {
                  var _this43 = this;

                  if (this.isLineTerminator()) return;
                  var s = this.state.type,
                      i;
                  return this.isContextual(99) && (s = 74, i = "let"), this.tsInAmbientContext(function () {
                    if (s === 68) return e.declare = !0, _get(_getPrototypeOf(_class4.prototype), "parseFunctionStatement", _this43).call(_this43, e, !1, !1);
                    if (s === 80) return e.declare = !0, _this43.parseClass(e, !0, !1);
                    if (s === 124) return _this43.tsParseEnumDeclaration(e, {
                      declare: !0
                    });
                    if (s === 110) return _this43.tsParseAmbientExternalModuleDeclaration(e);
                    if (s === 75 || s === 74) return !_this43.match(75) || !_this43.isLookaheadContextual("enum") ? (e.declare = !0, _this43.parseVarStatement(e, i || _this43.state.value, !0)) : (_this43.expect(75), _this43.tsParseEnumDeclaration(e, {
                      "const": !0,
                      declare: !0
                    }));

                    if (s === 127) {
                      var a = _this43.tsParseInterfaceDeclaration(e, {
                        declare: !0
                      });

                      if (a) return a;
                    }

                    if (q(s)) return _this43.tsParseDeclaration(e, _this43.state.value, !0, null);
                  });
                }
              }, {
                key: "tsTryParseExportDeclaration",
                value: function tsTryParseExportDeclaration() {
                  return this.tsParseDeclaration(this.startNode(), this.state.value, !0, null);
                }
              }, {
                key: "tsParseExpressionStatement",
                value: function tsParseExpressionStatement(e, s, i) {
                  switch (s.name) {
                    case "declare":
                      {
                        var a = this.tsTryParseDeclare(e);
                        if (a) return a.declare = !0, a;
                        break;
                      }

                    case "global":
                      if (this.match(5)) {
                        this.scope.enter(Oe), this.prodParam.enter(Me);
                        var _a5 = e;
                        return _a5.global = !0, _a5.id = s, _a5.body = this.tsParseModuleBlock(), this.scope.exit(), this.prodParam.exit(), this.finishNode(_a5, "TSModuleDeclaration");
                      }

                      break;

                    default:
                      return this.tsParseDeclaration(e, s.name, !1, i);
                  }
                }
              }, {
                key: "tsParseDeclaration",
                value: function tsParseDeclaration(e, s, i, a) {
                  switch (s) {
                    case "abstract":
                      if (this.tsCheckLineTerminator(i) && (this.match(80) || q(this.state.type))) return this.tsParseAbstractDeclaration(e, a);
                      break;

                    case "module":
                      if (this.tsCheckLineTerminator(i)) {
                        if (this.match(131)) return this.tsParseAmbientExternalModuleDeclaration(e);
                        if (q(this.state.type)) return this.tsParseModuleOrNamespaceDeclaration(e);
                      }

                      break;

                    case "namespace":
                      if (this.tsCheckLineTerminator(i) && q(this.state.type)) return this.tsParseModuleOrNamespaceDeclaration(e);
                      break;

                    case "type":
                      if (this.tsCheckLineTerminator(i) && q(this.state.type)) return this.tsParseTypeAliasDeclaration(e);
                      break;
                  }
                }
              }, {
                key: "tsCheckLineTerminator",
                value: function tsCheckLineTerminator(e) {
                  return e ? this.hasFollowingLineBreak() ? !1 : (this.next(), !0) : !this.isLineTerminator();
                }
              }, {
                key: "tsTryParseGenericAsyncArrowFunction",
                value: function tsTryParseGenericAsyncArrowFunction(e) {
                  var _this44 = this;

                  if (!this.match(47)) return;
                  var s = this.state.maybeInArrowParameters;
                  this.state.maybeInArrowParameters = !0;
                  var i = this.tsTryParseAndCatch(function () {
                    var a = _this44.startNodeAt(e);

                    return a.typeParameters = _this44.tsParseTypeParameters(_this44.tsParseConstModifier), _get(_getPrototypeOf(_class4.prototype), "parseFunctionParams", _this44).call(_this44, a), a.returnType = _this44.tsTryParseTypeOrTypePredicateAnnotation(), _this44.expect(19), a;
                  });
                  if (this.state.maybeInArrowParameters = s, !!i) return _get(_getPrototypeOf(_class4.prototype), "parseArrowExpression", this).call(this, i, null, !0);
                }
              }, {
                key: "tsParseTypeArgumentsInExpression",
                value: function tsParseTypeArgumentsInExpression() {
                  if (this.reScan_lt() === 47) return this.tsParseTypeArguments();
                }
              }, {
                key: "tsParseTypeArguments",
                value: function tsParseTypeArguments() {
                  var _this45 = this;

                  var e = this.startNode();
                  return e.params = this.tsInType(function () {
                    return _this45.tsInNoContext(function () {
                      return _this45.expect(47), _this45.tsParseDelimitedList("TypeParametersOrArguments", _this45.tsParseType.bind(_this45));
                    });
                  }), e.params.length === 0 && this.raise(I.EmptyTypeArguments, {
                    at: e
                  }), this.expect(48), this.finishNode(e, "TSTypeParameterInstantiation");
                }
              }, {
                key: "tsIsDeclarationStart",
                value: function tsIsDeclarationStart() {
                  return Uo(this.state.type);
                }
              }, {
                key: "isExportDefaultSpecifier",
                value: function isExportDefaultSpecifier() {
                  return this.tsIsDeclarationStart() ? !1 : _get(_getPrototypeOf(_class4.prototype), "isExportDefaultSpecifier", this).call(this);
                }
              }, {
                key: "parseAssignableListItem",
                value: function parseAssignableListItem(e, s) {
                  var i = this.state.startLoc,
                      a = {};
                  this.tsParseModifiers({
                    allowedModifiers: ["public", "private", "protected", "override", "readonly"]
                  }, a);
                  var n = a.accessibility,
                      o = a.override,
                      u = a.readonly;
                  !(e & 4) && (n || u || o) && this.raise(I.UnexpectedParameterModifier, {
                    at: i
                  });
                  var c = this.parseMaybeDefault();
                  this.parseAssignableListItemTypes(c, e);
                  var y = this.parseMaybeDefault(c.loc.start, c);

                  if (n || u || o) {
                    var g = this.startNodeAt(i);
                    return s.length && (g.decorators = s), n && (g.accessibility = n), u && (g.readonly = u), o && (g.override = o), y.type !== "Identifier" && y.type !== "AssignmentPattern" && this.raise(I.UnsupportedParameterPropertyKind, {
                      at: g
                    }), g.parameter = y, this.finishNode(g, "TSParameterProperty");
                  }

                  return s.length && (c.decorators = s), y;
                }
              }, {
                key: "isSimpleParameter",
                value: function isSimpleParameter(e) {
                  return e.type === "TSParameterProperty" && _get(_getPrototypeOf(_class4.prototype), "isSimpleParameter", this).call(this, e.parameter) || _get(_getPrototypeOf(_class4.prototype), "isSimpleParameter", this).call(this, e);
                }
              }, {
                key: "tsDisallowOptionalPattern",
                value: function tsDisallowOptionalPattern(e) {
                  var _iteratorNormalCompletion10 = true;
                  var _didIteratorError10 = false;
                  var _iteratorError10 = undefined;

                  try {
                    for (var _iterator10 = e.params[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
                      var s = _step10.value;
                      s.type !== "Identifier" && s.optional && !this.state.isAmbientContext && this.raise(I.PatternIsOptional, {
                        at: s
                      });
                    }
                  } catch (err) {
                    _didIteratorError10 = true;
                    _iteratorError10 = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion10 && _iterator10["return"] != null) {
                        _iterator10["return"]();
                      }
                    } finally {
                      if (_didIteratorError10) {
                        throw _iteratorError10;
                      }
                    }
                  }
                }
              }, {
                key: "setArrowFunctionParameters",
                value: function setArrowFunctionParameters(e, s, i) {
                  _get(_getPrototypeOf(_class4.prototype), "setArrowFunctionParameters", this).call(this, e, s, i), this.tsDisallowOptionalPattern(e);
                }
              }, {
                key: "parseFunctionBodyAndFinish",
                value: function parseFunctionBodyAndFinish(e, s) {
                  var i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;
                  this.match(14) && (e.returnType = this.tsParseTypeOrTypePredicateAnnotation(14));
                  var a = s === "FunctionDeclaration" ? "TSDeclareFunction" : s === "ClassMethod" || s === "ClassPrivateMethod" ? "TSDeclareMethod" : void 0;
                  return a && !this.match(5) && this.isLineTerminator() ? this.finishNode(e, a) : a === "TSDeclareFunction" && this.state.isAmbientContext && (this.raise(I.DeclareFunctionHasImplementation, {
                    at: e
                  }), e.declare) ? _get(_getPrototypeOf(_class4.prototype), "parseFunctionBodyAndFinish", this).call(this, e, a, i) : (this.tsDisallowOptionalPattern(e), _get(_getPrototypeOf(_class4.prototype), "parseFunctionBodyAndFinish", this).call(this, e, s, i));
                }
              }, {
                key: "registerFunctionStatementId",
                value: function registerFunctionStatementId(e) {
                  !e.body && e.id ? this.checkIdentifier(e.id, br) : _get(_getPrototypeOf(_class4.prototype), "registerFunctionStatementId", this).call(this, e);
                }
              }, {
                key: "tsCheckForInvalidTypeCasts",
                value: function tsCheckForInvalidTypeCasts(e) {
                  var _this46 = this;

                  e.forEach(function (s) {
                    (s == null ? void 0 : s.type) === "TSTypeCastExpression" && _this46.raise(I.UnexpectedTypeAnnotation, {
                      at: s.typeAnnotation
                    });
                  });
                }
              }, {
                key: "toReferencedList",
                value: function toReferencedList(e, s) {
                  return this.tsCheckForInvalidTypeCasts(e), e;
                }
              }, {
                key: "parseArrayLike",
                value: function parseArrayLike(e, s, i, a) {
                  var n = _get(_getPrototypeOf(_class4.prototype), "parseArrayLike", this).call(this, e, s, i, a);

                  return n.type === "ArrayExpression" && this.tsCheckForInvalidTypeCasts(n.elements), n;
                }
              }, {
                key: "parseSubscript",
                value: function parseSubscript(e, s, i, a) {
                  var _this47 = this;

                  if (!this.hasPrecedingLineBreak() && this.match(35)) {
                    this.state.canStartJSXElement = !1, this.next();
                    var o = this.startNodeAt(s);
                    return o.expression = e, this.finishNode(o, "TSNonNullExpression");
                  }

                  var n = !1;

                  if (this.match(18) && this.lookaheadCharCode() === 60) {
                    if (i) return a.stop = !0, e;
                    a.optionalChainMember = n = !0, this.next();
                  }

                  if (this.match(47) || this.match(51)) {
                    var _o3,
                        u = this.tsTryParseAndCatch(function () {
                      if (!i && _this47.atPossibleAsyncArrow(e)) {
                        var T = _this47.tsTryParseGenericAsyncArrowFunction(s);

                        if (T) return T;
                      }

                      var c = _this47.tsParseTypeArgumentsInExpression();

                      if (!c) return;

                      if (n && !_this47.match(10)) {
                        _o3 = _this47.state.curPosition();
                        return;
                      }

                      if (nt(_this47.state.type)) {
                        var _T2 = _get(_getPrototypeOf(_class4.prototype), "parseTaggedTemplateExpression", _this47).call(_this47, e, s, a);

                        return _T2.typeParameters = c, _T2;
                      }

                      if (!i && _this47.eat(10)) {
                        var _T3 = _this47.startNodeAt(s);

                        return _T3.callee = e, _T3.arguments = _this47.parseCallExpressionArguments(11, !1), _this47.tsCheckForInvalidTypeCasts(_T3.arguments), _T3.typeParameters = c, a.optionalChainMember && (_T3.optional = n), _this47.finishCallExpression(_T3, a.optionalChainMember);
                      }

                      var y = _this47.state.type;
                      if (y === 48 || y === 52 || y !== 10 && He(y) && !_this47.hasPrecedingLineBreak()) return;

                      var g = _this47.startNodeAt(s);

                      return g.expression = e, g.typeParameters = c, _this47.finishNode(g, "TSInstantiationExpression");
                    });

                    if (_o3 && this.unexpected(_o3, 10), u) return u.type === "TSInstantiationExpression" && (this.match(16) || this.match(18) && this.lookaheadCharCode() !== 40) && this.raise(I.InvalidPropertyAccessAfterInstantiationExpression, {
                      at: this.state.startLoc
                    }), u;
                  }

                  return _get(_getPrototypeOf(_class4.prototype), "parseSubscript", this).call(this, e, s, i, a);
                }
              }, {
                key: "parseNewCallee",
                value: function parseNewCallee(e) {
                  var s;

                  _get(_getPrototypeOf(_class4.prototype), "parseNewCallee", this).call(this, e);

                  var i = e.callee;
                  i.type === "TSInstantiationExpression" && !((s = i.extra) != null && s.parenthesized) && (e.typeParameters = i.typeParameters, e.callee = i.expression);
                }
              }, {
                key: "parseExprOp",
                value: function parseExprOp(e, s, i) {
                  var _this48 = this;

                  var a;

                  if (at(58) > i && !this.hasPrecedingLineBreak() && (this.isContextual(93) || (a = this.isContextual(118)))) {
                    var n = this.startNodeAt(s);
                    return n.expression = e, n.typeAnnotation = this.tsInType(function () {
                      return _this48.next(), _this48.match(75) ? (a && _this48.raise(f.UnexpectedKeyword, {
                        at: _this48.state.startLoc,
                        keyword: "const"
                      }), _this48.tsParseTypeReference()) : _this48.tsParseType();
                    }), this.finishNode(n, a ? "TSSatisfiesExpression" : "TSAsExpression"), this.reScan_lt_gt(), this.parseExprOp(n, s, i);
                  }

                  return _get(_getPrototypeOf(_class4.prototype), "parseExprOp", this).call(this, e, s, i);
                }
              }, {
                key: "checkReservedWord",
                value: function checkReservedWord(e, s, i, a) {
                  this.state.isAmbientContext || _get(_getPrototypeOf(_class4.prototype), "checkReservedWord", this).call(this, e, s, i, a);
                }
              }, {
                key: "checkImportReflection",
                value: function checkImportReflection(e) {
                  _get(_getPrototypeOf(_class4.prototype), "checkImportReflection", this).call(this, e), e.module && e.importKind !== "value" && this.raise(I.ImportReflectionHasImportType, {
                    at: e.specifiers[0].loc.start
                  });
                }
              }, {
                key: "checkDuplicateExports",
                value: function checkDuplicateExports() {}
              }, {
                key: "parseImport",
                value: function parseImport(e) {
                  if (e.importKind = "value", q(this.state.type) || this.match(55) || this.match(5)) {
                    var i = this.lookahead();
                    if (this.isContextual(128) && i.type !== 12 && i.type !== 97 && i.type !== 29 && (e.importKind = "type", this.next(), i = this.lookahead()), q(this.state.type) && i.type === 29) return this.tsParseImportEqualsDeclaration(e);
                  }

                  var s = _get(_getPrototypeOf(_class4.prototype), "parseImport", this).call(this, e);

                  return s.importKind === "type" && s.specifiers.length > 1 && s.specifiers[0].type === "ImportDefaultSpecifier" && this.raise(I.TypeImportCannotSpecifyDefaultAndNamed, {
                    at: s
                  }), s;
                }
              }, {
                key: "parseExport",
                value: function parseExport(e, s) {
                  if (this.match(83)) return this.next(), this.isContextual(128) && this.lookaheadCharCode() !== 61 ? (e.importKind = "type", this.next()) : e.importKind = "value", this.tsParseImportEqualsDeclaration(e, !0);

                  if (this.eat(29)) {
                    var i = e;
                    return i.expression = _get(_getPrototypeOf(_class4.prototype), "parseExpression", this).call(this), this.semicolon(), this.finishNode(i, "TSExportAssignment");
                  } else if (this.eatContextual(93)) {
                    var _i13 = e;
                    return this.expectContextual(126), _i13.id = this.parseIdentifier(), this.semicolon(), this.finishNode(_i13, "TSNamespaceExportDeclaration");
                  } else {
                    if (e.exportKind = "value", this.isContextual(128)) {
                      var _i14 = this.lookaheadCharCode();

                      (_i14 === 123 || _i14 === 42) && (this.next(), e.exportKind = "type");
                    }

                    return _get(_getPrototypeOf(_class4.prototype), "parseExport", this).call(this, e, s);
                  }
                }
              }, {
                key: "isAbstractClass",
                value: function isAbstractClass() {
                  return this.isContextual(122) && this.lookahead().type === 80;
                }
              }, {
                key: "parseExportDefaultExpression",
                value: function parseExportDefaultExpression() {
                  if (this.isAbstractClass()) {
                    var e = this.startNode();
                    return this.next(), e["abstract"] = !0, this.parseClass(e, !0, !0);
                  }

                  if (this.match(127)) {
                    var _e6 = this.tsParseInterfaceDeclaration(this.startNode());

                    if (_e6) return _e6;
                  }

                  return _get(_getPrototypeOf(_class4.prototype), "parseExportDefaultExpression", this).call(this);
                }
              }, {
                key: "parseVarStatement",
                value: function parseVarStatement(e, s) {
                  var i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1,
                      a = this.state.isAmbientContext,
                      n = _get(_getPrototypeOf(_class4.prototype), "parseVarStatement", this).call(this, e, s, i || a);

                  if (!a) return n;
                  var _iteratorNormalCompletion11 = true;
                  var _didIteratorError11 = false;
                  var _iteratorError11 = undefined;

                  try {
                    for (var _iterator11 = n.declarations[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
                      var _step11$value = _step11.value,
                          o = _step11$value.id,
                          u = _step11$value.init;
                      u && (s !== "const" || o.typeAnnotation ? this.raise(I.InitializerNotAllowedInAmbientContext, {
                        at: u
                      }) : ph(u, this.hasPlugin("estree")) || this.raise(I.ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference, {
                        at: u
                      }));
                    }
                  } catch (err) {
                    _didIteratorError11 = true;
                    _iteratorError11 = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion11 && _iterator11["return"] != null) {
                        _iterator11["return"]();
                      }
                    } finally {
                      if (_didIteratorError11) {
                        throw _iteratorError11;
                      }
                    }
                  }

                  return n;
                }
              }, {
                key: "parseStatementContent",
                value: function parseStatementContent(e, s) {
                  if (this.match(75) && this.isLookaheadContextual("enum")) {
                    var i = this.startNode();
                    return this.expect(75), this.tsParseEnumDeclaration(i, {
                      "const": !0
                    });
                  }

                  if (this.isContextual(124)) return this.tsParseEnumDeclaration(this.startNode());

                  if (this.isContextual(127)) {
                    var _i15 = this.tsParseInterfaceDeclaration(this.startNode());

                    if (_i15) return _i15;
                  }

                  return _get(_getPrototypeOf(_class4.prototype), "parseStatementContent", this).call(this, e, s);
                }
              }, {
                key: "parseAccessModifier",
                value: function parseAccessModifier() {
                  return this.tsParseModifier(["public", "protected", "private"]);
                }
              }, {
                key: "tsHasSomeModifiers",
                value: function tsHasSomeModifiers(e, s) {
                  return s.some(function (i) {
                    return Hr(i) ? e.accessibility === i : !!e[i];
                  });
                }
              }, {
                key: "tsIsStartOfStaticBlocks",
                value: function tsIsStartOfStaticBlocks() {
                  return this.isContextual(104) && this.lookaheadCharCode() === 123;
                }
              }, {
                key: "parseClassMember",
                value: function parseClassMember(e, s, i) {
                  var _this49 = this;

                  var a = ["declare", "private", "public", "protected", "override", "abstract", "readonly", "static"];
                  this.tsParseModifiers({
                    allowedModifiers: a,
                    disallowedModifiers: ["in", "out"],
                    stopOnStartOfClassStaticBlock: !0,
                    errorTemplate: I.InvalidModifierOnTypeParameterPositions
                  }, s);

                  var n = function n() {
                    _this49.tsIsStartOfStaticBlocks() ? (_this49.next(), _this49.next(), _this49.tsHasSomeModifiers(s, a) && _this49.raise(I.StaticBlockCannotHaveModifier, {
                      at: _this49.state.curPosition()
                    }), _get(_getPrototypeOf(_class4.prototype), "parseClassStaticBlock", _this49).call(_this49, e, s)) : _this49.parseClassMemberWithIsStatic(e, s, i, !!s["static"]);
                  };

                  s.declare ? this.tsInAmbientContext(n) : n();
                }
              }, {
                key: "parseClassMemberWithIsStatic",
                value: function parseClassMemberWithIsStatic(e, s, i, a) {
                  var n = this.tsTryParseIndexSignature(s);

                  if (n) {
                    e.body.push(n), s["abstract"] && this.raise(I.IndexSignatureHasAbstract, {
                      at: s
                    }), s.accessibility && this.raise(I.IndexSignatureHasAccessibility, {
                      at: s,
                      modifier: s.accessibility
                    }), s.declare && this.raise(I.IndexSignatureHasDeclare, {
                      at: s
                    }), s.override && this.raise(I.IndexSignatureHasOverride, {
                      at: s
                    });
                    return;
                  }

                  !this.state.inAbstractClass && s["abstract"] && this.raise(I.NonAbstractClassHasAbstractMethod, {
                    at: s
                  }), s.override && (i.hadSuperClass || this.raise(I.OverrideNotInSubClass, {
                    at: s
                  })), _get(_getPrototypeOf(_class4.prototype), "parseClassMemberWithIsStatic", this).call(this, e, s, i, a);
                }
              }, {
                key: "parsePostMemberNameModifiers",
                value: function parsePostMemberNameModifiers(e) {
                  this.eat(17) && (e.optional = !0), e.readonly && this.match(10) && this.raise(I.ClassMethodHasReadonly, {
                    at: e
                  }), e.declare && this.match(10) && this.raise(I.ClassMethodHasDeclare, {
                    at: e
                  });
                }
              }, {
                key: "parseExpressionStatement",
                value: function parseExpressionStatement(e, s, i) {
                  return (s.type === "Identifier" ? this.tsParseExpressionStatement(e, s, i) : void 0) || _get(_getPrototypeOf(_class4.prototype), "parseExpressionStatement", this).call(this, e, s, i);
                }
              }, {
                key: "shouldParseExportDeclaration",
                value: function shouldParseExportDeclaration() {
                  return this.tsIsDeclarationStart() ? !0 : _get(_getPrototypeOf(_class4.prototype), "shouldParseExportDeclaration", this).call(this);
                }
              }, {
                key: "parseConditional",
                value: function parseConditional(e, s, i) {
                  var _this50 = this;

                  if (!this.state.maybeInArrowParameters || !this.match(17)) return _get(_getPrototypeOf(_class4.prototype), "parseConditional", this).call(this, e, s, i);
                  var a = this.tryParse(function () {
                    return _get(_getPrototypeOf(_class4.prototype), "parseConditional", _this50).call(_this50, e, s);
                  });
                  return a.node ? (a.error && (this.state = a.failState), a.node) : (a.error && _get(_getPrototypeOf(_class4.prototype), "setOptionalParametersError", this).call(this, i, a.error), e);
                }
              }, {
                key: "parseParenItem",
                value: function parseParenItem(e, s) {
                  if (e = _get(_getPrototypeOf(_class4.prototype), "parseParenItem", this).call(this, e, s), this.eat(17) && (e.optional = !0, this.resetEndLocation(e)), this.match(14)) {
                    var i = this.startNodeAt(s);
                    return i.expression = e, i.typeAnnotation = this.tsParseTypeAnnotation(), this.finishNode(i, "TSTypeCastExpression");
                  }

                  return e;
                }
              }, {
                key: "parseExportDeclaration",
                value: function parseExportDeclaration(e) {
                  var _this51 = this;

                  if (!this.state.isAmbientContext && this.isContextual(123)) return this.tsInAmbientContext(function () {
                    return _this51.parseExportDeclaration(e);
                  });
                  var s = this.state.startLoc,
                      i = this.eatContextual(123);
                  if (i && (this.isContextual(123) || !this.shouldParseExportDeclaration())) throw this.raise(I.ExpectedAmbientAfterExportDeclare, {
                    at: this.state.startLoc
                  });

                  var n = q(this.state.type) && this.tsTryParseExportDeclaration() || _get(_getPrototypeOf(_class4.prototype), "parseExportDeclaration", this).call(this, e);

                  return n ? ((n.type === "TSInterfaceDeclaration" || n.type === "TSTypeAliasDeclaration" || i) && (e.exportKind = "type"), i && (this.resetStartLocation(n, s), n.declare = !0), n) : null;
                }
              }, {
                key: "parseClassId",
                value: function parseClassId(e, s, i, a) {
                  if ((!s || i) && this.isContextual(111)) return;

                  _get(_getPrototypeOf(_class4.prototype), "parseClassId", this).call(this, e, s, i, e.declare ? br : vr);

                  var n = this.tsTryParseTypeParameters(this.tsParseInOutConstModifiers);
                  n && (e.typeParameters = n);
                }
              }, {
                key: "parseClassPropertyAnnotation",
                value: function parseClassPropertyAnnotation(e) {
                  e.optional || (this.eat(35) ? e.definite = !0 : this.eat(17) && (e.optional = !0));
                  var s = this.tsTryParseTypeAnnotation();
                  s && (e.typeAnnotation = s);
                }
              }, {
                key: "parseClassProperty",
                value: function parseClassProperty(e) {
                  if (this.parseClassPropertyAnnotation(e), this.state.isAmbientContext && !(e.readonly && !e.typeAnnotation) && this.match(29) && this.raise(I.DeclareClassFieldHasInitializer, {
                    at: this.state.startLoc
                  }), e["abstract"] && this.match(29)) {
                    var s = e.key;
                    this.raise(I.AbstractPropertyHasInitializer, {
                      at: this.state.startLoc,
                      propertyName: s.type === "Identifier" && !e.computed ? s.name : "[".concat(this.input.slice(s.start, s.end), "]")
                    });
                  }

                  return _get(_getPrototypeOf(_class4.prototype), "parseClassProperty", this).call(this, e);
                }
              }, {
                key: "parseClassPrivateProperty",
                value: function parseClassPrivateProperty(e) {
                  return e["abstract"] && this.raise(I.PrivateElementHasAbstract, {
                    at: e
                  }), e.accessibility && this.raise(I.PrivateElementHasAccessibility, {
                    at: e,
                    modifier: e.accessibility
                  }), this.parseClassPropertyAnnotation(e), _get(_getPrototypeOf(_class4.prototype), "parseClassPrivateProperty", this).call(this, e);
                }
              }, {
                key: "parseClassAccessorProperty",
                value: function parseClassAccessorProperty(e) {
                  return this.parseClassPropertyAnnotation(e), e.optional && this.raise(I.AccessorCannotBeOptional, {
                    at: e
                  }), _get(_getPrototypeOf(_class4.prototype), "parseClassAccessorProperty", this).call(this, e);
                }
              }, {
                key: "pushClassMethod",
                value: function pushClassMethod(e, s, i, a, n, o) {
                  var u = this.tsTryParseTypeParameters(this.tsParseConstModifier);
                  u && n && this.raise(I.ConstructorHasTypeParameters, {
                    at: u
                  });
                  var _s$declare = s.declare,
                      c = _s$declare === void 0 ? !1 : _s$declare,
                      y = s.kind;
                  c && (y === "get" || y === "set") && this.raise(I.DeclareAccessor, {
                    at: s,
                    kind: y
                  }), u && (s.typeParameters = u), _get(_getPrototypeOf(_class4.prototype), "pushClassMethod", this).call(this, e, s, i, a, n, o);
                }
              }, {
                key: "pushClassPrivateMethod",
                value: function pushClassPrivateMethod(e, s, i, a) {
                  var n = this.tsTryParseTypeParameters(this.tsParseConstModifier);
                  n && (s.typeParameters = n), _get(_getPrototypeOf(_class4.prototype), "pushClassPrivateMethod", this).call(this, e, s, i, a);
                }
              }, {
                key: "declareClassPrivateMethodInScope",
                value: function declareClassPrivateMethodInScope(e, s) {
                  e.type !== "TSDeclareMethod" && (e.type === "MethodDefinition" && !e.value.body || _get(_getPrototypeOf(_class4.prototype), "declareClassPrivateMethodInScope", this).call(this, e, s));
                }
              }, {
                key: "parseClassSuper",
                value: function parseClassSuper(e) {
                  _get(_getPrototypeOf(_class4.prototype), "parseClassSuper", this).call(this, e), e.superClass && (this.match(47) || this.match(51)) && (e.superTypeParameters = this.tsParseTypeArgumentsInExpression()), this.eatContextual(111) && (e["implements"] = this.tsParseHeritageClause("implements"));
                }
              }, {
                key: "parseObjPropValue",
                value: function parseObjPropValue(e, s, i, a, n, o, u) {
                  var c = this.tsTryParseTypeParameters(this.tsParseConstModifier);
                  return c && (e.typeParameters = c), _get(_getPrototypeOf(_class4.prototype), "parseObjPropValue", this).call(this, e, s, i, a, n, o, u);
                }
              }, {
                key: "parseFunctionParams",
                value: function parseFunctionParams(e, s) {
                  var i = this.tsTryParseTypeParameters(this.tsParseConstModifier);
                  i && (e.typeParameters = i), _get(_getPrototypeOf(_class4.prototype), "parseFunctionParams", this).call(this, e, s);
                }
              }, {
                key: "parseVarId",
                value: function parseVarId(e, s) {
                  _get(_getPrototypeOf(_class4.prototype), "parseVarId", this).call(this, e, s), e.id.type === "Identifier" && !this.hasPrecedingLineBreak() && this.eat(35) && (e.definite = !0);
                  var i = this.tsTryParseTypeAnnotation();
                  i && (e.id.typeAnnotation = i, this.resetEndLocation(e.id));
                }
              }, {
                key: "parseAsyncArrowFromCallExpression",
                value: function parseAsyncArrowFromCallExpression(e, s) {
                  return this.match(14) && (e.returnType = this.tsParseTypeAnnotation()), _get(_getPrototypeOf(_class4.prototype), "parseAsyncArrowFromCallExpression", this).call(this, e, s);
                }
              }, {
                key: "parseMaybeAssign",
                value: function parseMaybeAssign(e, s) {
                  var _this52 = this;

                  var i, a, n, o, u, c, y;
                  var g, T, C;

                  if (this.hasPlugin("jsx") && (this.match(140) || this.match(47))) {
                    if (g = this.state.clone(), T = this.tryParse(function () {
                      return _get(_getPrototypeOf(_class4.prototype), "parseMaybeAssign", _this52).call(_this52, e, s);
                    }, g), !T.error) return T.node;
                    var K = this.state.context,
                        W = K[K.length - 1];
                    (W === x.j_oTag || W === x.j_expr) && K.pop();
                  }

                  if (!((i = T) != null && i.error) && !this.match(47)) return _get(_getPrototypeOf(_class4.prototype), "parseMaybeAssign", this).call(this, e, s);
                  (!g || g === this.state) && (g = this.state.clone());
                  var M,
                      j = this.tryParse(function (K) {
                    var W, V;
                    M = _this52.tsParseTypeParameters(_this52.tsParseConstModifier);

                    var X = _get(_getPrototypeOf(_class4.prototype), "parseMaybeAssign", _this52).call(_this52, e, s);

                    return (X.type !== "ArrowFunctionExpression" || (W = X.extra) != null && W.parenthesized) && K(), ((V = M) == null ? void 0 : V.params.length) !== 0 && _this52.resetStartLocationFromNode(X, M), X.typeParameters = M, X;
                  }, g);
                  if (!j.error && !j.aborted) return M && this.reportReservedArrowTypeParam(M), j.node;
                  if (!T && ($r(!this.hasPlugin("jsx")), C = this.tryParse(function () {
                    return _get(_getPrototypeOf(_class4.prototype), "parseMaybeAssign", _this52).call(_this52, e, s);
                  }, g), !C.error)) return C.node;
                  if ((a = T) != null && a.node) return this.state = T.failState, T.node;
                  if (j.node) return this.state = j.failState, M && this.reportReservedArrowTypeParam(M), j.node;
                  if ((n = C) != null && n.node) return this.state = C.failState, C.node;
                  throw (o = T) != null && o.thrown ? T.error : j.thrown ? j.error : (u = C) != null && u.thrown ? C.error : ((c = T) == null ? void 0 : c.error) || j.error || ((y = C) == null ? void 0 : y.error);
                }
              }, {
                key: "reportReservedArrowTypeParam",
                value: function reportReservedArrowTypeParam(e) {
                  var s;
                  e.params.length === 1 && !e.params[0].constraint && !((s = e.extra) != null && s.trailingComma) && this.getPluginOption("typescript", "disallowAmbiguousJSXLike") && this.raise(I.ReservedArrowTypeParam, {
                    at: e
                  });
                }
              }, {
                key: "parseMaybeUnary",
                value: function parseMaybeUnary(e, s) {
                  return !this.hasPlugin("jsx") && this.match(47) ? this.tsParseTypeAssertion() : _get(_getPrototypeOf(_class4.prototype), "parseMaybeUnary", this).call(this, e, s);
                }
              }, {
                key: "parseArrow",
                value: function parseArrow(e) {
                  var _this53 = this;

                  if (this.match(14)) {
                    var s = this.tryParse(function (i) {
                      var a = _this53.tsParseTypeOrTypePredicateAnnotation(14);

                      return (_this53.canInsertSemicolon() || !_this53.match(19)) && i(), a;
                    });
                    if (s.aborted) return;
                    s.thrown || (s.error && (this.state = s.failState), e.returnType = s.node);
                  }

                  return _get(_getPrototypeOf(_class4.prototype), "parseArrow", this).call(this, e);
                }
              }, {
                key: "parseAssignableListItemTypes",
                value: function parseAssignableListItemTypes(e, s) {
                  if (!(s & 2)) return e;
                  this.eat(17) && (e.optional = !0);
                  var i = this.tsTryParseTypeAnnotation();
                  return i && (e.typeAnnotation = i), this.resetEndLocation(e), e;
                }
              }, {
                key: "isAssignable",
                value: function isAssignable(e, s) {
                  switch (e.type) {
                    case "TSTypeCastExpression":
                      return this.isAssignable(e.expression, s);

                    case "TSParameterProperty":
                      return !0;

                    default:
                      return _get(_getPrototypeOf(_class4.prototype), "isAssignable", this).call(this, e, s);
                  }
                }
              }, {
                key: "toAssignable",
                value: function toAssignable(e) {
                  var s = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;

                  switch (e.type) {
                    case "ParenthesizedExpression":
                      this.toAssignableParenthesizedExpression(e, s);
                      break;

                    case "TSAsExpression":
                    case "TSSatisfiesExpression":
                    case "TSNonNullExpression":
                    case "TSTypeAssertion":
                      s ? this.expressionScope.recordArrowParameterBindingError(I.UnexpectedTypeCastInParameter, {
                        at: e
                      }) : this.raise(I.UnexpectedTypeCastInParameter, {
                        at: e
                      }), this.toAssignable(e.expression, s);
                      break;

                    case "AssignmentExpression":
                      !s && e.left.type === "TSTypeCastExpression" && (e.left = this.typeCastToParameter(e.left));

                    default:
                      _get(_getPrototypeOf(_class4.prototype), "toAssignable", this).call(this, e, s);

                  }
                }
              }, {
                key: "toAssignableParenthesizedExpression",
                value: function toAssignableParenthesizedExpression(e, s) {
                  switch (e.expression.type) {
                    case "TSAsExpression":
                    case "TSSatisfiesExpression":
                    case "TSNonNullExpression":
                    case "TSTypeAssertion":
                    case "ParenthesizedExpression":
                      this.toAssignable(e.expression, s);
                      break;

                    default:
                      _get(_getPrototypeOf(_class4.prototype), "toAssignable", this).call(this, e, s);

                  }
                }
              }, {
                key: "checkToRestConversion",
                value: function checkToRestConversion(e, s) {
                  switch (e.type) {
                    case "TSAsExpression":
                    case "TSSatisfiesExpression":
                    case "TSTypeAssertion":
                    case "TSNonNullExpression":
                      this.checkToRestConversion(e.expression, !1);
                      break;

                    default:
                      _get(_getPrototypeOf(_class4.prototype), "checkToRestConversion", this).call(this, e, s);

                  }
                }
              }, {
                key: "isValidLVal",
                value: function isValidLVal(e, s, i) {
                  return nh({
                    TSTypeCastExpression: !0,
                    TSParameterProperty: "parameter",
                    TSNonNullExpression: "expression",
                    TSAsExpression: (i !== Pe || !s) && ["expression", !0],
                    TSSatisfiesExpression: (i !== Pe || !s) && ["expression", !0],
                    TSTypeAssertion: (i !== Pe || !s) && ["expression", !0]
                  }, e) || _get(_getPrototypeOf(_class4.prototype), "isValidLVal", this).call(this, e, s, i);
                }
              }, {
                key: "parseBindingAtom",
                value: function parseBindingAtom() {
                  switch (this.state.type) {
                    case 78:
                      return this.parseIdentifier(!0);

                    default:
                      return _get(_getPrototypeOf(_class4.prototype), "parseBindingAtom", this).call(this);
                  }
                }
              }, {
                key: "parseMaybeDecoratorArguments",
                value: function parseMaybeDecoratorArguments(e) {
                  if (this.match(47) || this.match(51)) {
                    var s = this.tsParseTypeArgumentsInExpression();

                    if (this.match(10)) {
                      var i = _get(_getPrototypeOf(_class4.prototype), "parseMaybeDecoratorArguments", this).call(this, e);

                      return i.typeParameters = s, i;
                    }

                    this.unexpected(null, 10);
                  }

                  return _get(_getPrototypeOf(_class4.prototype), "parseMaybeDecoratorArguments", this).call(this, e);
                }
              }, {
                key: "checkCommaAfterRest",
                value: function checkCommaAfterRest(e) {
                  return this.state.isAmbientContext && this.match(12) && this.lookaheadCharCode() === e ? (this.next(), !1) : _get(_getPrototypeOf(_class4.prototype), "checkCommaAfterRest", this).call(this, e);
                }
              }, {
                key: "isClassMethod",
                value: function isClassMethod() {
                  return this.match(47) || _get(_getPrototypeOf(_class4.prototype), "isClassMethod", this).call(this);
                }
              }, {
                key: "isClassProperty",
                value: function isClassProperty() {
                  return this.match(35) || this.match(14) || _get(_getPrototypeOf(_class4.prototype), "isClassProperty", this).call(this);
                }
              }, {
                key: "parseMaybeDefault",
                value: function parseMaybeDefault(e, s) {
                  var i = _get(_getPrototypeOf(_class4.prototype), "parseMaybeDefault", this).call(this, e, s);

                  return i.type === "AssignmentPattern" && i.typeAnnotation && i.right.start < i.typeAnnotation.start && this.raise(I.TypeAnnotationAfterAssign, {
                    at: i.typeAnnotation
                  }), i;
                }
              }, {
                key: "getTokenFromCode",
                value: function getTokenFromCode(e) {
                  if (this.state.inType) {
                    if (e === 62) {
                      this.finishOp(48, 1);
                      return;
                    }

                    if (e === 60) {
                      this.finishOp(47, 1);
                      return;
                    }
                  }

                  _get(_getPrototypeOf(_class4.prototype), "getTokenFromCode", this).call(this, e);
                }
              }, {
                key: "reScan_lt_gt",
                value: function reScan_lt_gt() {
                  var e = this.state.type;
                  e === 47 ? (this.state.pos -= 1, this.readToken_lt()) : e === 48 && (this.state.pos -= 1, this.readToken_gt());
                }
              }, {
                key: "reScan_lt",
                value: function reScan_lt() {
                  var e = this.state.type;
                  return e === 51 ? (this.state.pos -= 2, this.finishOp(47, 1), 47) : e;
                }
              }, {
                key: "toAssignableList",
                value: function toAssignableList(e, s, i) {
                  for (var a = 0; a < e.length; a++) {
                    var n = e[a];
                    (n == null ? void 0 : n.type) === "TSTypeCastExpression" && (e[a] = this.typeCastToParameter(n));
                  }

                  _get(_getPrototypeOf(_class4.prototype), "toAssignableList", this).call(this, e, s, i);
                }
              }, {
                key: "typeCastToParameter",
                value: function typeCastToParameter(e) {
                  return e.expression.typeAnnotation = e.typeAnnotation, this.resetEndLocation(e.expression, e.typeAnnotation.loc.end), e.expression;
                }
              }, {
                key: "shouldParseArrow",
                value: function shouldParseArrow(e) {
                  var _this54 = this;

                  return this.match(14) ? e.every(function (s) {
                    return _this54.isAssignable(s, !0);
                  }) : _get(_getPrototypeOf(_class4.prototype), "shouldParseArrow", this).call(this, e);
                }
              }, {
                key: "shouldParseAsyncArrow",
                value: function shouldParseAsyncArrow() {
                  return this.match(14) || _get(_getPrototypeOf(_class4.prototype), "shouldParseAsyncArrow", this).call(this);
                }
              }, {
                key: "canHaveLeadingDecorator",
                value: function canHaveLeadingDecorator() {
                  return _get(_getPrototypeOf(_class4.prototype), "canHaveLeadingDecorator", this).call(this) || this.isAbstractClass();
                }
              }, {
                key: "jsxParseOpeningElementAfterName",
                value: function jsxParseOpeningElementAfterName(e) {
                  var _this55 = this;

                  if (this.match(47) || this.match(51)) {
                    var s = this.tsTryParseAndCatch(function () {
                      return _this55.tsParseTypeArgumentsInExpression();
                    });
                    s && (e.typeParameters = s);
                  }

                  return _get(_getPrototypeOf(_class4.prototype), "jsxParseOpeningElementAfterName", this).call(this, e);
                }
              }, {
                key: "getGetterSetterExpectedParamCount",
                value: function getGetterSetterExpectedParamCount(e) {
                  var s = _get(_getPrototypeOf(_class4.prototype), "getGetterSetterExpectedParamCount", this).call(this, e),
                      a = this.getObjectOrClassMethodParams(e)[0];

                  return a && this.isThisParam(a) ? s + 1 : s;
                }
              }, {
                key: "parseCatchClauseParam",
                value: function parseCatchClauseParam() {
                  var e = _get(_getPrototypeOf(_class4.prototype), "parseCatchClauseParam", this).call(this),
                      s = this.tsTryParseTypeAnnotation();

                  return s && (e.typeAnnotation = s, this.resetEndLocation(e)), e;
                }
              }, {
                key: "tsInAmbientContext",
                value: function tsInAmbientContext(e) {
                  var s = this.state.isAmbientContext;
                  this.state.isAmbientContext = !0;

                  try {
                    return e();
                  } finally {
                    this.state.isAmbientContext = s;
                  }
                }
              }, {
                key: "parseClass",
                value: function parseClass(e, s, i) {
                  var a = this.state.inAbstractClass;
                  this.state.inAbstractClass = !!e["abstract"];

                  try {
                    return _get(_getPrototypeOf(_class4.prototype), "parseClass", this).call(this, e, s, i);
                  } finally {
                    this.state.inAbstractClass = a;
                  }
                }
              }, {
                key: "tsParseAbstractDeclaration",
                value: function tsParseAbstractDeclaration(e, s) {
                  if (this.match(80)) return e["abstract"] = !0, this.maybeTakeDecorators(s, this.parseClass(e, !0, !1));

                  if (this.isContextual(127)) {
                    if (!this.hasFollowingLineBreak()) return e["abstract"] = !0, this.raise(I.NonClassMethodPropertyHasAbstractModifer, {
                      at: e
                    }), this.tsParseInterfaceDeclaration(e);
                  } else this.unexpected(null, 80);
                }
              }, {
                key: "parseMethod",
                value: function parseMethod(e, s, i, a, n, o, u) {
                  var c = _get(_getPrototypeOf(_class4.prototype), "parseMethod", this).call(this, e, s, i, a, n, o, u);

                  if (c["abstract"] && (this.hasPlugin("estree") ? !!c.value.body : !!c.body)) {
                    var g = c.key;
                    this.raise(I.AbstractMethodHasImplementation, {
                      at: c,
                      methodName: g.type === "Identifier" && !c.computed ? g.name : "[".concat(this.input.slice(g.start, g.end), "]")
                    });
                  }

                  return c;
                }
              }, {
                key: "tsParseTypeParameterName",
                value: function tsParseTypeParameterName() {
                  return this.parseIdentifier().name;
                }
              }, {
                key: "shouldParseAsAmbientContext",
                value: function shouldParseAsAmbientContext() {
                  return !!this.getPluginOption("typescript", "dts");
                }
              }, {
                key: "parse",
                value: function parse() {
                  return this.shouldParseAsAmbientContext() && (this.state.isAmbientContext = !0), _get(_getPrototypeOf(_class4.prototype), "parse", this).call(this);
                }
              }, {
                key: "getExpression",
                value: function getExpression() {
                  return this.shouldParseAsAmbientContext() && (this.state.isAmbientContext = !0), _get(_getPrototypeOf(_class4.prototype), "getExpression", this).call(this);
                }
              }, {
                key: "parseExportSpecifier",
                value: function parseExportSpecifier(e, s, i, a) {
                  return !s && a ? (this.parseTypeOnlyImportExportSpecifier(e, !1, i), this.finishNode(e, "ExportSpecifier")) : (e.exportKind = "value", _get(_getPrototypeOf(_class4.prototype), "parseExportSpecifier", this).call(this, e, s, i, a));
                }
              }, {
                key: "parseImportSpecifier",
                value: function parseImportSpecifier(e, s, i, a, n) {
                  return !s && a ? (this.parseTypeOnlyImportExportSpecifier(e, !0, i), this.finishNode(e, "ImportSpecifier")) : (e.importKind = "value", _get(_getPrototypeOf(_class4.prototype), "parseImportSpecifier", this).call(this, e, s, i, a, i ? Sr : Ve));
                }
              }, {
                key: "parseTypeOnlyImportExportSpecifier",
                value: function parseTypeOnlyImportExportSpecifier(e, s, i) {
                  var a = s ? "imported" : "local",
                      n = s ? "local" : "exported",
                      o = e[a],
                      u,
                      c = !1,
                      y = !0,
                      g = o.loc.start;

                  if (this.isContextual(93)) {
                    var C = this.parseIdentifier();

                    if (this.isContextual(93)) {
                      var M = this.parseIdentifier();
                      te(this.state.type) ? (c = !0, o = C, u = s ? this.parseIdentifier() : this.parseModuleExportName(), y = !1) : (u = M, y = !1);
                    } else te(this.state.type) ? (y = !1, u = s ? this.parseIdentifier() : this.parseModuleExportName()) : (c = !0, o = C);
                  } else te(this.state.type) && (c = !0, s ? (o = this.parseIdentifier(!0), this.isContextual(93) || this.checkReservedWord(o.name, o.loc.start, !0, !0)) : o = this.parseModuleExportName());

                  c && i && this.raise(s ? I.TypeModifierIsUsedInTypeImports : I.TypeModifierIsUsedInTypeExports, {
                    at: g
                  }), e[a] = o, e[n] = u;
                  var T = s ? "importKind" : "exportKind";
                  e[T] = c ? "type" : "value", y && this.eatContextual(93) && (e[n] = s ? this.parseIdentifier() : this.parseModuleExportName()), e[n] || (e[n] = me(e[a])), s && this.checkIdentifier(e[n], c ? Sr : Ve);
                }
              }]);

              return _class4;
            }(t)
          );
        };

        function ch(t) {
          if (t.type !== "MemberExpression") return !1;
          var r = t.computed,
              e = t.property;
          return r && e.type !== "StringLiteral" && (e.type !== "TemplateLiteral" || e.expressions.length > 0) ? !1 : Vr(t.object);
        }

        function ph(t, r) {
          var e;
          var s = t.type;
          if ((e = t.extra) != null && e.parenthesized) return !1;

          if (r) {
            if (s === "Literal") {
              var i = t.value;
              if (typeof i == "string" || typeof i == "boolean") return !0;
            }
          } else if (s === "StringLiteral" || s === "BooleanLiteral") return !0;

          return !!(zr(t, r) || fh(t, r) || s === "TemplateLiteral" && t.expressions.length === 0 || ch(t));
        }

        function zr(t, r) {
          return r ? t.type === "Literal" && (typeof t.value == "number" || "bigint" in t) : t.type === "NumericLiteral" || t.type === "BigIntLiteral";
        }

        function fh(t, r) {
          if (t.type === "UnaryExpression") {
            var e = t.operator,
                s = t.argument;
            if (e === "-" && zr(s, r)) return !0;
          }

          return !1;
        }

        function Vr(t) {
          return t.type === "Identifier" ? !0 : t.type !== "MemberExpression" || t.computed ? !1 : Vr(t.object);
        }

        var Kr = pe(_templateObject5())({
          ClassNameIsRequired: "A class name is required.",
          UnexpectedSpace: "Unexpected space in placeholder."
        }),
            dh = function dh(t) {
          return (
            /*#__PURE__*/
            function (_t7) {
              _inherits(_class5, _t7);

              function _class5() {
                _classCallCheck(this, _class5);

                return _possibleConstructorReturn(this, _getPrototypeOf(_class5).apply(this, arguments));
              }

              _createClass(_class5, [{
                key: "parsePlaceholder",
                value: function parsePlaceholder(e) {
                  if (this.match(142)) {
                    var s = this.startNode();
                    return this.next(), this.assertNoSpace(), s.name = _get(_getPrototypeOf(_class5.prototype), "parseIdentifier", this).call(this, !0), this.assertNoSpace(), this.expect(142), this.finishPlaceholder(s, e);
                  }
                }
              }, {
                key: "finishPlaceholder",
                value: function finishPlaceholder(e, s) {
                  var i = !!(e.expectedNode && e.type === "Placeholder");
                  return e.expectedNode = s, i ? e : this.finishNode(e, "Placeholder");
                }
              }, {
                key: "getTokenFromCode",
                value: function getTokenFromCode(e) {
                  e === 37 && this.input.charCodeAt(this.state.pos + 1) === 37 ? this.finishOp(142, 2) : _get(_getPrototypeOf(_class5.prototype), "getTokenFromCode", this).call(this, e);
                }
              }, {
                key: "parseExprAtom",
                value: function parseExprAtom(e) {
                  return this.parsePlaceholder("Expression") || _get(_getPrototypeOf(_class5.prototype), "parseExprAtom", this).call(this, e);
                }
              }, {
                key: "parseIdentifier",
                value: function parseIdentifier(e) {
                  return this.parsePlaceholder("Identifier") || _get(_getPrototypeOf(_class5.prototype), "parseIdentifier", this).call(this, e);
                }
              }, {
                key: "checkReservedWord",
                value: function checkReservedWord(e, s, i, a) {
                  e !== void 0 && _get(_getPrototypeOf(_class5.prototype), "checkReservedWord", this).call(this, e, s, i, a);
                }
              }, {
                key: "parseBindingAtom",
                value: function parseBindingAtom() {
                  return this.parsePlaceholder("Pattern") || _get(_getPrototypeOf(_class5.prototype), "parseBindingAtom", this).call(this);
                }
              }, {
                key: "isValidLVal",
                value: function isValidLVal(e, s, i) {
                  return e === "Placeholder" || _get(_getPrototypeOf(_class5.prototype), "isValidLVal", this).call(this, e, s, i);
                }
              }, {
                key: "toAssignable",
                value: function toAssignable(e, s) {
                  e && e.type === "Placeholder" && e.expectedNode === "Expression" ? e.expectedNode = "Pattern" : _get(_getPrototypeOf(_class5.prototype), "toAssignable", this).call(this, e, s);
                }
              }, {
                key: "chStartsBindingIdentifier",
                value: function chStartsBindingIdentifier(e, s) {
                  return !!(_get(_getPrototypeOf(_class5.prototype), "chStartsBindingIdentifier", this).call(this, e, s) || this.lookahead().type === 142);
                }
              }, {
                key: "verifyBreakContinue",
                value: function verifyBreakContinue(e, s) {
                  e.label && e.label.type === "Placeholder" || _get(_getPrototypeOf(_class5.prototype), "verifyBreakContinue", this).call(this, e, s);
                }
              }, {
                key: "parseExpressionStatement",
                value: function parseExpressionStatement(e, s) {
                  if (s.type !== "Placeholder" || s.extra && s.extra.parenthesized) return _get(_getPrototypeOf(_class5.prototype), "parseExpressionStatement", this).call(this, e, s);

                  if (this.match(14)) {
                    var i = e;
                    return i.label = this.finishPlaceholder(s, "Identifier"), this.next(), i.body = _get(_getPrototypeOf(_class5.prototype), "parseStatementOrSloppyAnnexBFunctionDeclaration", this).call(this), this.finishNode(i, "LabeledStatement");
                  }

                  return this.semicolon(), e.name = s.name, this.finishPlaceholder(e, "Statement");
                }
              }, {
                key: "parseBlock",
                value: function parseBlock(e, s, i) {
                  return this.parsePlaceholder("BlockStatement") || _get(_getPrototypeOf(_class5.prototype), "parseBlock", this).call(this, e, s, i);
                }
              }, {
                key: "parseFunctionId",
                value: function parseFunctionId(e) {
                  return this.parsePlaceholder("Identifier") || _get(_getPrototypeOf(_class5.prototype), "parseFunctionId", this).call(this, e);
                }
              }, {
                key: "parseClass",
                value: function parseClass(e, s, i) {
                  var a = s ? "ClassDeclaration" : "ClassExpression";
                  this.next();
                  var n = this.state.strict,
                      o = this.parsePlaceholder("Identifier");
                  if (o) {
                    if (this.match(81) || this.match(142) || this.match(5)) e.id = o;else {
                      if (i || !s) return e.id = null, e.body = this.finishPlaceholder(o, "ClassBody"), this.finishNode(e, a);
                      throw this.raise(Kr.ClassNameIsRequired, {
                        at: this.state.startLoc
                      });
                    }
                  } else this.parseClassId(e, s, i);
                  return _get(_getPrototypeOf(_class5.prototype), "parseClassSuper", this).call(this, e), e.body = this.parsePlaceholder("ClassBody") || _get(_getPrototypeOf(_class5.prototype), "parseClassBody", this).call(this, !!e.superClass, n), this.finishNode(e, a);
                }
              }, {
                key: "parseExport",
                value: function parseExport(e, s) {
                  var i = this.parsePlaceholder("Identifier");
                  if (!i) return _get(_getPrototypeOf(_class5.prototype), "parseExport", this).call(this, e, s);
                  if (!this.isContextual(97) && !this.match(12)) return e.specifiers = [], e.source = null, e.declaration = this.finishPlaceholder(i, "Declaration"), this.finishNode(e, "ExportNamedDeclaration");
                  this.expectPlugin("exportDefaultFrom");
                  var a = this.startNode();
                  return a.exported = i, e.specifiers = [this.finishNode(a, "ExportDefaultSpecifier")], _get(_getPrototypeOf(_class5.prototype), "parseExport", this).call(this, e, s);
                }
              }, {
                key: "isExportDefaultSpecifier",
                value: function isExportDefaultSpecifier() {
                  if (this.match(65)) {
                    var e = this.nextTokenStart();
                    if (this.isUnparsedContextual(e, "from") && this.input.startsWith(xe(142), this.nextTokenStartSince(e + 4))) return !0;
                  }

                  return _get(_getPrototypeOf(_class5.prototype), "isExportDefaultSpecifier", this).call(this);
                }
              }, {
                key: "maybeParseExportDefaultSpecifier",
                value: function maybeParseExportDefaultSpecifier(e) {
                  return e.specifiers && e.specifiers.length > 0 ? !0 : _get(_getPrototypeOf(_class5.prototype), "maybeParseExportDefaultSpecifier", this).call(this, e);
                }
              }, {
                key: "checkExport",
                value: function checkExport(e) {
                  var s = e.specifiers;
                  s != null && s.length && (e.specifiers = s.filter(function (i) {
                    return i.exported.type === "Placeholder";
                  })), _get(_getPrototypeOf(_class5.prototype), "checkExport", this).call(this, e), e.specifiers = s;
                }
              }, {
                key: "parseImport",
                value: function parseImport(e) {
                  var s = this.parsePlaceholder("Identifier");
                  if (!s) return _get(_getPrototypeOf(_class5.prototype), "parseImport", this).call(this, e);
                  if (e.specifiers = [], !this.isContextual(97) && !this.match(12)) return e.source = this.finishPlaceholder(s, "StringLiteral"), this.semicolon(), this.finishNode(e, "ImportDeclaration");
                  var i = this.startNodeAtNode(s);
                  return i.local = s, e.specifiers.push(this.finishNode(i, "ImportDefaultSpecifier")), this.eat(12) && (this.maybeParseStarImportSpecifier(e) || this.parseNamedImportSpecifiers(e)), this.expectContextual(97), e.source = this.parseImportSource(), this.semicolon(), this.finishNode(e, "ImportDeclaration");
                }
              }, {
                key: "parseImportSource",
                value: function parseImportSource() {
                  return this.parsePlaceholder("StringLiteral") || _get(_getPrototypeOf(_class5.prototype), "parseImportSource", this).call(this);
                }
              }, {
                key: "assertNoSpace",
                value: function assertNoSpace() {
                  this.state.start > this.state.lastTokEndLoc.index && this.raise(Kr.UnexpectedSpace, {
                    at: this.state.lastTokEndLoc
                  });
                }
              }]);

              return _class5;
            }(t)
          );
        },
            mh = function mh(t) {
          return (
            /*#__PURE__*/
            function (_t8) {
              _inherits(_class6, _t8);

              function _class6() {
                _classCallCheck(this, _class6);

                return _possibleConstructorReturn(this, _getPrototypeOf(_class6).apply(this, arguments));
              }

              _createClass(_class6, [{
                key: "parseV8Intrinsic",
                value: function parseV8Intrinsic() {
                  if (this.match(54)) {
                    var e = this.state.startLoc,
                        s = this.startNode();

                    if (this.next(), q(this.state.type)) {
                      var i = this.parseIdentifierName(),
                          a = this.createIdentifier(s, i);
                      if (a.type = "V8IntrinsicIdentifier", this.match(10)) return a;
                    }

                    this.unexpected(e);
                  }
                }
              }, {
                key: "parseExprAtom",
                value: function parseExprAtom(e) {
                  return this.parseV8Intrinsic() || _get(_getPrototypeOf(_class6.prototype), "parseExprAtom", this).call(this, e);
                }
              }]);

              return _class6;
            }(t)
          );
        };

        function J(t, r) {
          var _ref3 = typeof r == "string" ? [r, {}] : r,
              _ref4 = _slicedToArray(_ref3, 2),
              e = _ref4[0],
              s = _ref4[1],
              i = Object.keys(s),
              a = i.length === 0;

          return t.some(function (n) {
            if (typeof n == "string") return a && n === e;
            {
              var _n6 = _slicedToArray(n, 2),
                  o = _n6[0],
                  u = _n6[1];

              if (o !== e) return !1;
              var _iteratorNormalCompletion12 = true;
              var _didIteratorError12 = false;
              var _iteratorError12 = undefined;

              try {
                for (var _iterator12 = i[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {
                  var c = _step12.value;
                  if (u[c] !== s[c]) return !1;
                }
              } catch (err) {
                _didIteratorError12 = true;
                _iteratorError12 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion12 && _iterator12["return"] != null) {
                    _iterator12["return"]();
                  }
                } finally {
                  if (_didIteratorError12) {
                    throw _iteratorError12;
                  }
                }
              }

              return !0;
            }
          });
        }

        function we(t, r, e) {
          var s = t.find(function (i) {
            return Array.isArray(i) ? i[0] === r : i === r;
          });
          return s && Array.isArray(s) && s.length > 1 ? s[1][e] : null;
        }

        var Wr = ["minimal", "fsharp", "hack", "smart"],
            Gr = ["^^", "@@", "^", "%", "#"],
            Jr = ["hash", "bar"];

        function yh(t) {
          if (J(t, "decorators")) {
            if (J(t, "decorators-legacy")) throw new Error("Cannot use the decorators and decorators-legacy plugin together");
            var r = we(t, "decorators", "decoratorsBeforeExport");
            if (r != null && typeof r != "boolean") throw new Error("'decoratorsBeforeExport' must be a boolean, if specified.");
            var e = we(t, "decorators", "allowCallParenthesized");
            if (e != null && typeof e != "boolean") throw new Error("'allowCallParenthesized' must be a boolean.");
          }

          if (J(t, "flow") && J(t, "typescript")) throw new Error("Cannot combine flow and typescript plugins.");
          if (J(t, "placeholders") && J(t, "v8intrinsic")) throw new Error("Cannot combine placeholders and v8intrinsic plugins.");

          if (J(t, "pipelineOperator")) {
            var _r3 = we(t, "pipelineOperator", "proposal");

            if (!Wr.includes(_r3)) {
              var s = Wr.map(function (i) {
                return "\"".concat(i, "\"");
              }).join(", ");
              throw new Error("\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ".concat(s, "."));
            }

            var _e7 = J(t, ["recordAndTuple", {
              syntaxType: "hash"
            }]);

            if (_r3 === "hack") {
              if (J(t, "placeholders")) throw new Error("Cannot combine placeholders plugin and Hack-style pipes.");
              if (J(t, "v8intrinsic")) throw new Error("Cannot combine v8intrinsic plugin and Hack-style pipes.");

              var _s15 = we(t, "pipelineOperator", "topicToken");

              if (!Gr.includes(_s15)) {
                var i = Gr.map(function (a) {
                  return "\"".concat(a, "\"");
                }).join(", ");
                throw new Error("\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ".concat(i, "."));
              }

              if (_s15 === "#" && _e7) throw new Error('Plugin conflict between `["pipelineOperator", { proposal: "hack", topicToken: "#" }]` and `["recordAndtuple", { syntaxType: "hash"}]`.');
            } else if (_r3 === "smart" && _e7) throw new Error('Plugin conflict between `["pipelineOperator", { proposal: "smart" }]` and `["recordAndtuple", { syntaxType: "hash"}]`.');
          }

          if (J(t, "moduleAttributes")) {
            if (J(t, "importAssertions")) throw new Error("Cannot combine importAssertions and moduleAttributes plugins.");
            if (we(t, "moduleAttributes", "version") !== "may-2020") throw new Error("The 'moduleAttributes' plugin requires a 'version' option, representing the last proposal update. Currently, the only supported value is 'may-2020'.");
          }

          if (J(t, "recordAndTuple") && we(t, "recordAndTuple", "syntaxType") != null && !Jr.includes(we(t, "recordAndTuple", "syntaxType"))) throw new Error("The 'syntaxType' option of the 'recordAndTuple' plugin must be one of: " + Jr.map(function (r) {
            return "'".concat(r, "'");
          }).join(", "));

          if (J(t, "asyncDoExpressions") && !J(t, "doExpressions")) {
            var _r4 = new Error("'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.");

            throw _r4.missingPlugins = "doExpressions", _r4;
          }
        }

        var Xr = {
          estree: el,
          jsx: th,
          flow: Zl,
          typescript: uh,
          v8intrinsic: mh,
          placeholders: dh
        },
            xh = Object.keys(Xr),
            gh =
        /*#__PURE__*/
        function (_ah) {
          _inherits(gh, _ah);

          function gh() {
            _classCallCheck(this, gh);

            return _possibleConstructorReturn(this, _getPrototypeOf(gh).apply(this, arguments));
          }

          _createClass(gh, [{
            key: "checkProto",
            value: function checkProto(t, r, e, s) {
              if (t.type === "SpreadElement" || this.isObjectMethod(t) || t.computed || t.shorthand) return;
              var i = t.key;

              if ((i.type === "Identifier" ? i.name : i.value) === "__proto__") {
                if (r) {
                  this.raise(f.RecordNoProto, {
                    at: i
                  });
                  return;
                }

                e.used && (s ? s.doubleProtoLoc === null && (s.doubleProtoLoc = i.loc.start) : this.raise(f.DuplicateProto, {
                  at: i
                })), e.used = !0;
              }
            }
          }, {
            key: "shouldExitDescending",
            value: function shouldExitDescending(t, r) {
              return t.type === "ArrowFunctionExpression" && t.start === r;
            }
          }, {
            key: "getExpression",
            value: function getExpression() {
              this.enterInitialScopes(), this.nextToken();
              var t = this.parseExpression();
              return this.match(137) || this.unexpected(), this.finalizeRemainingComments(), t.comments = this.state.comments, t.errors = this.state.errors, this.options.tokens && (t.tokens = this.tokens), t;
            }
          }, {
            key: "parseExpression",
            value: function parseExpression(t, r) {
              var _this56 = this;

              return t ? this.disallowInAnd(function () {
                return _this56.parseExpressionBase(r);
              }) : this.allowInAnd(function () {
                return _this56.parseExpressionBase(r);
              });
            }
          }, {
            key: "parseExpressionBase",
            value: function parseExpressionBase(t) {
              var r = this.state.startLoc,
                  e = this.parseMaybeAssign(t);

              if (this.match(12)) {
                var s = this.startNodeAt(r);

                for (s.expressions = [e]; this.eat(12);) {
                  s.expressions.push(this.parseMaybeAssign(t));
                }

                return this.toReferencedList(s.expressions), this.finishNode(s, "SequenceExpression");
              }

              return e;
            }
          }, {
            key: "parseMaybeAssignDisallowIn",
            value: function parseMaybeAssignDisallowIn(t, r) {
              var _this57 = this;

              return this.disallowInAnd(function () {
                return _this57.parseMaybeAssign(t, r);
              });
            }
          }, {
            key: "parseMaybeAssignAllowIn",
            value: function parseMaybeAssignAllowIn(t, r) {
              var _this58 = this;

              return this.allowInAnd(function () {
                return _this58.parseMaybeAssign(t, r);
              });
            }
          }, {
            key: "setOptionalParametersError",
            value: function setOptionalParametersError(t, r) {
              var e;
              t.optionalParametersLoc = (e = r == null ? void 0 : r.loc) != null ? e : this.state.startLoc;
            }
          }, {
            key: "parseMaybeAssign",
            value: function parseMaybeAssign(t, r) {
              var e = this.state.startLoc;

              if (this.isContextual(106) && this.prodParam.hasYield) {
                var n = this.parseYield();
                return r && (n = r.call(this, n, e)), n;
              }

              var s;
              t ? s = !1 : (t = new vt(), s = !0);
              var i = this.state.type;
              (i === 10 || q(i)) && (this.state.potentialArrowAt = this.state.start);
              var a = this.parseMaybeConditional(t);

              if (r && (a = r.call(this, a, e)), Bo(this.state.type)) {
                var _n7 = this.startNodeAt(e),
                    o = this.state.value;

                if (_n7.operator = o, this.match(29)) {
                  this.toAssignable(a, !0), _n7.left = a;
                  var u = e.index;
                  t.doubleProtoLoc != null && t.doubleProtoLoc.index >= u && (t.doubleProtoLoc = null), t.shorthandAssignLoc != null && t.shorthandAssignLoc.index >= u && (t.shorthandAssignLoc = null), t.privateKeyLoc != null && t.privateKeyLoc.index >= u && (this.checkDestructuringPrivate(t), t.privateKeyLoc = null);
                } else _n7.left = a;

                return this.next(), _n7.right = this.parseMaybeAssign(), this.checkLVal(a, {
                  "in": this.finishNode(_n7, "AssignmentExpression")
                }), _n7;
              } else s && this.checkExpressionErrors(t, !0);

              return a;
            }
          }, {
            key: "parseMaybeConditional",
            value: function parseMaybeConditional(t) {
              var r = this.state.startLoc,
                  e = this.state.potentialArrowAt,
                  s = this.parseExprOps(t);
              return this.shouldExitDescending(s, e) ? s : this.parseConditional(s, r, t);
            }
          }, {
            key: "parseConditional",
            value: function parseConditional(t, r, e) {
              if (this.eat(17)) {
                var s = this.startNodeAt(r);
                return s.test = t, s.consequent = this.parseMaybeAssignAllowIn(), this.expect(14), s.alternate = this.parseMaybeAssign(), this.finishNode(s, "ConditionalExpression");
              }

              return t;
            }
          }, {
            key: "parseMaybeUnaryOrPrivate",
            value: function parseMaybeUnaryOrPrivate(t) {
              return this.match(136) ? this.parsePrivateName() : this.parseMaybeUnary(t);
            }
          }, {
            key: "parseExprOps",
            value: function parseExprOps(t) {
              var r = this.state.startLoc,
                  e = this.state.potentialArrowAt,
                  s = this.parseMaybeUnaryOrPrivate(t);
              return this.shouldExitDescending(s, e) ? s : this.parseExprOp(s, r, -1);
            }
          }, {
            key: "parseExprOp",
            value: function parseExprOp(t, r, e) {
              if (this.isPrivateName(t)) {
                var i = this.getPrivateNameSV(t);
                (e >= at(58) || !this.prodParam.hasIn || !this.match(58)) && this.raise(f.PrivateInExpectedIn, {
                  at: t,
                  identifierName: i
                }), this.classScope.usePrivateName(i, t.loc.start);
              }

              var s = this.state.type;

              if (_o(s) && (this.prodParam.hasIn || !this.match(58))) {
                var _i16 = at(s);

                if (_i16 > e) {
                  if (s === 39) {
                    if (this.expectPlugin("pipelineOperator"), this.state.inFSharpPipelineDirectBody) return t;
                    this.checkPipelineAtInfixOperator(t, r);
                  }

                  var a = this.startNodeAt(r);
                  a.left = t, a.operator = this.state.value;
                  var n = s === 41 || s === 42,
                      o = s === 40;
                  if (o && (_i16 = at(42)), this.next(), s === 39 && this.hasPlugin(["pipelineOperator", {
                    proposal: "minimal"
                  }]) && this.state.type === 96 && this.prodParam.hasAwait) throw this.raise(f.UnexpectedAwaitAfterPipelineBody, {
                    at: this.state.startLoc
                  });
                  a.right = this.parseExprOpRightExpr(s, _i16);
                  var u = this.finishNode(a, n || o ? "LogicalExpression" : "BinaryExpression"),
                      c = this.state.type;
                  if (o && (c === 41 || c === 42) || n && c === 40) throw this.raise(f.MixingCoalesceWithLogical, {
                    at: this.state.startLoc
                  });
                  return this.parseExprOp(u, r, e);
                }
              }

              return t;
            }
          }, {
            key: "parseExprOpRightExpr",
            value: function parseExprOpRightExpr(t, r) {
              var _this59 = this;

              var e = this.state.startLoc;

              switch (t) {
                case 39:
                  switch (this.getPluginOption("pipelineOperator", "proposal")) {
                    case "hack":
                      return this.withTopicBindingContext(function () {
                        return _this59.parseHackPipeBody();
                      });

                    case "smart":
                      return this.withTopicBindingContext(function () {
                        if (_this59.prodParam.hasYield && _this59.isContextual(106)) throw _this59.raise(f.PipeBodyIsTighter, {
                          at: _this59.state.startLoc
                        });
                        return _this59.parseSmartPipelineBodyInStyle(_this59.parseExprOpBaseRightExpr(t, r), e);
                      });

                    case "fsharp":
                      return this.withSoloAwaitPermittingContext(function () {
                        return _this59.parseFSharpPipelineBody(r);
                      });
                  }

                default:
                  return this.parseExprOpBaseRightExpr(t, r);
              }
            }
          }, {
            key: "parseExprOpBaseRightExpr",
            value: function parseExprOpBaseRightExpr(t, r) {
              var e = this.state.startLoc;
              return this.parseExprOp(this.parseMaybeUnaryOrPrivate(), e, $o(t) ? r - 1 : r);
            }
          }, {
            key: "parseHackPipeBody",
            value: function parseHackPipeBody() {
              var t;
              var r = this.state.startLoc,
                  e = this.parseMaybeAssign();
              return Go.has(e.type) && !((t = e.extra) != null && t.parenthesized) && this.raise(f.PipeUnparenthesizedBody, {
                at: r,
                type: e.type
              }), this.topicReferenceWasUsedInCurrentContext() || this.raise(f.PipeTopicUnused, {
                at: r
              }), e;
            }
          }, {
            key: "checkExponentialAfterUnary",
            value: function checkExponentialAfterUnary(t) {
              this.match(57) && this.raise(f.UnexpectedTokenUnaryExponentiation, {
                at: t.argument
              });
            }
          }, {
            key: "parseMaybeUnary",
            value: function parseMaybeUnary(t, r) {
              var e = this.state.startLoc,
                  s = this.isContextual(96);

              if (s && this.isAwaitAllowed()) {
                this.next();
                var o = this.parseAwait(e);
                return r || this.checkExponentialAfterUnary(o), o;
              }

              var i = this.match(34),
                  a = this.startNode();

              if (jo(this.state.type)) {
                a.operator = this.state.value, a.prefix = !0, this.match(72) && this.expectPlugin("throwExpressions");

                var _o4 = this.match(89);

                if (this.next(), a.argument = this.parseMaybeUnary(null, !0), this.checkExpressionErrors(t, !0), this.state.strict && _o4) {
                  var u = a.argument;
                  u.type === "Identifier" ? this.raise(f.StrictDelete, {
                    at: a
                  }) : this.hasPropertyAsPrivateName(u) && this.raise(f.DeletePrivateField, {
                    at: a
                  });
                }

                if (!i) return r || this.checkExponentialAfterUnary(a), this.finishNode(a, "UnaryExpression");
              }

              var n = this.parseUpdate(a, i, t);

              if (s) {
                var _o5 = this.state.type;
                if ((this.hasPlugin("v8intrinsic") ? He(_o5) : He(_o5) && !this.match(54)) && !this.isAmbiguousAwait()) return this.raiseOverwrite(f.AwaitNotInAsyncContext, {
                  at: e
                }), this.parseAwait(e);
              }

              return n;
            }
          }, {
            key: "parseUpdate",
            value: function parseUpdate(t, r, e) {
              if (r) {
                var a = t;
                return this.checkLVal(a.argument, {
                  "in": this.finishNode(a, "UpdateExpression")
                }), t;
              }

              var s = this.state.startLoc,
                  i = this.parseExprSubscripts(e);
              if (this.checkExpressionErrors(e, !1)) return i;

              for (; Ro(this.state.type) && !this.canInsertSemicolon();) {
                var _a6 = this.startNodeAt(s);

                _a6.operator = this.state.value, _a6.prefix = !1, _a6.argument = i, this.next(), this.checkLVal(i, {
                  "in": i = this.finishNode(_a6, "UpdateExpression")
                });
              }

              return i;
            }
          }, {
            key: "parseExprSubscripts",
            value: function parseExprSubscripts(t) {
              var r = this.state.startLoc,
                  e = this.state.potentialArrowAt,
                  s = this.parseExprAtom(t);
              return this.shouldExitDescending(s, e) ? s : this.parseSubscripts(s, r);
            }
          }, {
            key: "parseSubscripts",
            value: function parseSubscripts(t, r, e) {
              var s = {
                optionalChainMember: !1,
                maybeAsyncArrow: this.atPossibleAsyncArrow(t),
                stop: !1
              };

              do {
                t = this.parseSubscript(t, r, e, s), s.maybeAsyncArrow = !1;
              } while (!s.stop);

              return t;
            }
          }, {
            key: "parseSubscript",
            value: function parseSubscript(t, r, e, s) {
              var i = this.state.type;
              if (!e && i === 15) return this.parseBind(t, r, e, s);
              if (nt(i)) return this.parseTaggedTemplateExpression(t, r, s);
              var a = !1;

              if (i === 18) {
                if (e && (this.raise(f.OptionalChainingNoNew, {
                  at: this.state.startLoc
                }), this.lookaheadCharCode() === 40)) return s.stop = !0, t;
                s.optionalChainMember = a = !0, this.next();
              }

              if (!e && this.match(10)) return this.parseCoverCallAndAsyncArrowHead(t, r, s, a);
              {
                var n = this.eat(0);
                return n || a || this.eat(16) ? this.parseMember(t, r, s, n, a) : (s.stop = !0, t);
              }
            }
          }, {
            key: "parseMember",
            value: function parseMember(t, r, e, s, i) {
              var a = this.startNodeAt(r);
              return a.object = t, a.computed = s, s ? (a.property = this.parseExpression(), this.expect(3)) : this.match(136) ? (t.type === "Super" && this.raise(f.SuperPrivateField, {
                at: r
              }), this.classScope.usePrivateName(this.state.value, this.state.startLoc), a.property = this.parsePrivateName()) : a.property = this.parseIdentifier(!0), e.optionalChainMember ? (a.optional = i, this.finishNode(a, "OptionalMemberExpression")) : this.finishNode(a, "MemberExpression");
            }
          }, {
            key: "parseBind",
            value: function parseBind(t, r, e, s) {
              var i = this.startNodeAt(r);
              return i.object = t, this.next(), i.callee = this.parseNoCallExpr(), s.stop = !0, this.parseSubscripts(this.finishNode(i, "BindExpression"), r, e);
            }
          }, {
            key: "parseCoverCallAndAsyncArrowHead",
            value: function parseCoverCallAndAsyncArrowHead(t, r, e, s) {
              var i = this.state.maybeInArrowParameters,
                  a = null;
              this.state.maybeInArrowParameters = !0, this.next();
              var n = this.startNodeAt(r);
              n.callee = t;
              var o = e.maybeAsyncArrow,
                  u = e.optionalChainMember;
              o && (this.expressionScope.enter($l()), a = new vt()), u && (n.optional = s), s ? n.arguments = this.parseCallExpressionArguments(11) : n.arguments = this.parseCallExpressionArguments(11, t.type === "Import", t.type !== "Super", n, a);
              var c = this.finishCallExpression(n, u);
              return o && this.shouldParseAsyncArrow() && !s ? (e.stop = !0, this.checkDestructuringPrivate(a), this.expressionScope.validateAsPattern(), this.expressionScope.exit(), c = this.parseAsyncArrowFromCallExpression(this.startNodeAt(r), c)) : (o && (this.checkExpressionErrors(a, !0), this.expressionScope.exit()), this.toReferencedArguments(c)), this.state.maybeInArrowParameters = i, c;
            }
          }, {
            key: "toReferencedArguments",
            value: function toReferencedArguments(t, r) {
              this.toReferencedListDeep(t.arguments, r);
            }
          }, {
            key: "parseTaggedTemplateExpression",
            value: function parseTaggedTemplateExpression(t, r, e) {
              var s = this.startNodeAt(r);
              return s.tag = t, s.quasi = this.parseTemplate(!0), e.optionalChainMember && this.raise(f.OptionalChainingNoTemplate, {
                at: r
              }), this.finishNode(s, "TaggedTemplateExpression");
            }
          }, {
            key: "atPossibleAsyncArrow",
            value: function atPossibleAsyncArrow(t) {
              return t.type === "Identifier" && t.name === "async" && this.state.lastTokEndLoc.index === t.end && !this.canInsertSemicolon() && t.end - t.start === 5 && t.start === this.state.potentialArrowAt;
            }
          }, {
            key: "finishCallExpression",
            value: function finishCallExpression(t, r) {
              if (t.callee.type === "Import") if (t.arguments.length === 2 && (this.hasPlugin("moduleAttributes") || this.expectPlugin("importAssertions")), t.arguments.length === 0 || t.arguments.length > 2) this.raise(f.ImportCallArity, {
                at: t,
                maxArgumentCount: this.hasPlugin("importAssertions") || this.hasPlugin("moduleAttributes") ? 2 : 1
              });else {
                var _iteratorNormalCompletion13 = true;
                var _didIteratorError13 = false;
                var _iteratorError13 = undefined;

                try {
                  for (var _iterator13 = t.arguments[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {
                    var e = _step13.value;
                    e.type === "SpreadElement" && this.raise(f.ImportCallSpreadArgument, {
                      at: e
                    });
                  }
                } catch (err) {
                  _didIteratorError13 = true;
                  _iteratorError13 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion13 && _iterator13["return"] != null) {
                      _iterator13["return"]();
                    }
                  } finally {
                    if (_didIteratorError13) {
                      throw _iteratorError13;
                    }
                  }
                }
              }
              return this.finishNode(t, r ? "OptionalCallExpression" : "CallExpression");
            }
          }, {
            key: "parseCallExpressionArguments",
            value: function parseCallExpressionArguments(t, r, e, s, i) {
              var a = [],
                  n = !0,
                  o = this.state.inFSharpPipelineDirectBody;

              for (this.state.inFSharpPipelineDirectBody = !1; !this.eat(t);) {
                if (n) n = !1;else if (this.expect(12), this.match(t)) {
                  r && !this.hasPlugin("importAssertions") && !this.hasPlugin("moduleAttributes") && this.raise(f.ImportCallArgumentTrailingComma, {
                    at: this.state.lastTokStartLoc
                  }), s && this.addTrailingCommaExtraToNode(s), this.next();
                  break;
                }
                a.push(this.parseExprListItem(!1, i, e));
              }

              return this.state.inFSharpPipelineDirectBody = o, a;
            }
          }, {
            key: "shouldParseAsyncArrow",
            value: function shouldParseAsyncArrow() {
              return this.match(19) && !this.canInsertSemicolon();
            }
          }, {
            key: "parseAsyncArrowFromCallExpression",
            value: function parseAsyncArrowFromCallExpression(t, r) {
              var e;
              return this.resetPreviousNodeTrailingComments(r), this.expect(19), this.parseArrowExpression(t, r.arguments, !0, (e = r.extra) == null ? void 0 : e.trailingCommaLoc), r.innerComments && Ke(t, r.innerComments), r.callee.trailingComments && Ke(t, r.callee.trailingComments), t;
            }
          }, {
            key: "parseNoCallExpr",
            value: function parseNoCallExpr() {
              var t = this.state.startLoc;
              return this.parseSubscripts(this.parseExprAtom(), t, !0);
            }
          }, {
            key: "parseExprAtom",
            value: function parseExprAtom(t) {
              var r,
                  e = null,
                  s = this.state.type;

              switch (s) {
                case 79:
                  return this.parseSuper();

                case 83:
                  return r = this.startNode(), this.next(), this.match(16) ? this.parseImportMetaProperty(r) : (this.match(10) || this.raise(f.UnsupportedImport, {
                    at: this.state.lastTokStartLoc
                  }), this.finishNode(r, "Import"));

                case 78:
                  return r = this.startNode(), this.next(), this.finishNode(r, "ThisExpression");

                case 90:
                  return this.parseDo(this.startNode(), !1);

                case 56:
                case 31:
                  return this.readRegexp(), this.parseRegExpLiteral(this.state.value);

                case 132:
                  return this.parseNumericLiteral(this.state.value);

                case 133:
                  return this.parseBigIntLiteral(this.state.value);

                case 134:
                  return this.parseDecimalLiteral(this.state.value);

                case 131:
                  return this.parseStringLiteral(this.state.value);

                case 84:
                  return this.parseNullLiteral();

                case 85:
                  return this.parseBooleanLiteral(!0);

                case 86:
                  return this.parseBooleanLiteral(!1);

                case 10:
                  {
                    var i = this.state.potentialArrowAt === this.state.start;
                    return this.parseParenAndDistinguishExpression(i);
                  }

                case 2:
                case 1:
                  return this.parseArrayLike(this.state.type === 2 ? 4 : 3, !1, !0);

                case 0:
                  return this.parseArrayLike(3, !0, !1, t);

                case 6:
                case 7:
                  return this.parseObjectLike(this.state.type === 6 ? 9 : 8, !1, !0);

                case 5:
                  return this.parseObjectLike(8, !1, !1, t);

                case 68:
                  return this.parseFunctionOrFunctionSent();

                case 26:
                  e = this.parseDecorators();

                case 80:
                  return this.parseClass(this.maybeTakeDecorators(e, this.startNode()), !1);

                case 77:
                  return this.parseNewOrNewTarget();

                case 25:
                case 24:
                  return this.parseTemplate(!1);

                case 15:
                  {
                    r = this.startNode(), this.next(), r.object = null;

                    var _i17 = r.callee = this.parseNoCallExpr();

                    if (_i17.type === "MemberExpression") return this.finishNode(r, "BindExpression");
                    throw this.raise(f.UnsupportedBind, {
                      at: _i17
                    });
                  }

                case 136:
                  return this.raise(f.PrivateInExpectedIn, {
                    at: this.state.startLoc,
                    identifierName: this.state.value
                  }), this.parsePrivateName();

                case 33:
                  return this.parseTopicReferenceThenEqualsSign(54, "%");

                case 32:
                  return this.parseTopicReferenceThenEqualsSign(44, "^");

                case 37:
                case 38:
                  return this.parseTopicReference("hack");

                case 44:
                case 54:
                case 27:
                  {
                    var _i18 = this.getPluginOption("pipelineOperator", "proposal");

                    if (_i18) return this.parseTopicReference(_i18);
                    this.unexpected();
                    break;
                  }

                case 47:
                  {
                    var _i19 = this.input.codePointAt(this.nextTokenStart());

                    fe(_i19) || _i19 === 62 ? this.expectOnePlugin(["jsx", "flow", "typescript"]) : this.unexpected();
                    break;
                  }

                default:
                  if (q(s)) {
                    if (this.isContextual(125) && this.lookaheadCharCode() === 123 && !this.hasFollowingLineBreak()) return this.parseModuleExpression();

                    var _i20 = this.state.potentialArrowAt === this.state.start,
                        a = this.state.containsEsc,
                        n = this.parseIdentifier();

                    if (!a && n.name === "async" && !this.canInsertSemicolon()) {
                      var o = this.state.type;
                      if (o === 68) return this.resetPreviousNodeTrailingComments(n), this.next(), this.parseAsyncFunctionExpression(this.startNodeAtNode(n));
                      if (q(o)) return this.lookaheadCharCode() === 61 ? this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(n)) : n;
                      if (o === 90) return this.resetPreviousNodeTrailingComments(n), this.parseDo(this.startNodeAtNode(n), !0);
                    }

                    return _i20 && this.match(19) && !this.canInsertSemicolon() ? (this.next(), this.parseArrowExpression(this.startNodeAtNode(n), [n], !1)) : n;
                  } else this.unexpected();

              }
            }
          }, {
            key: "parseTopicReferenceThenEqualsSign",
            value: function parseTopicReferenceThenEqualsSign(t, r) {
              var e = this.getPluginOption("pipelineOperator", "proposal");
              if (e) return this.state.type = t, this.state.value = r, this.state.pos--, this.state.end--, this.state.endLoc = Y(this.state.endLoc, -1), this.parseTopicReference(e);
              this.unexpected();
            }
          }, {
            key: "parseTopicReference",
            value: function parseTopicReference(t) {
              var r = this.startNode(),
                  e = this.state.startLoc,
                  s = this.state.type;
              return this.next(), this.finishTopicReference(r, e, t, s);
            }
          }, {
            key: "finishTopicReference",
            value: function finishTopicReference(t, r, e, s) {
              if (this.testTopicReferenceConfiguration(e, r, s)) {
                var i = e === "smart" ? "PipelinePrimaryTopicReference" : "TopicReference";
                return this.topicReferenceIsAllowedInCurrentContext() || this.raise(e === "smart" ? f.PrimaryTopicNotAllowed : f.PipeTopicUnbound, {
                  at: r
                }), this.registerTopicReference(), this.finishNode(t, i);
              } else throw this.raise(f.PipeTopicUnconfiguredToken, {
                at: r,
                token: xe(s)
              });
            }
          }, {
            key: "testTopicReferenceConfiguration",
            value: function testTopicReferenceConfiguration(t, r, e) {
              switch (t) {
                case "hack":
                  return this.hasPlugin(["pipelineOperator", {
                    topicToken: xe(e)
                  }]);

                case "smart":
                  return e === 27;

                default:
                  throw this.raise(f.PipeTopicRequiresHackPipes, {
                    at: r
                  });
              }
            }
          }, {
            key: "parseAsyncArrowUnaryFunction",
            value: function parseAsyncArrowUnaryFunction(t) {
              this.prodParam.enter(Tt(!0, this.prodParam.hasYield));
              var r = [this.parseIdentifier()];
              return this.prodParam.exit(), this.hasPrecedingLineBreak() && this.raise(f.LineTerminatorBeforeArrow, {
                at: this.state.curPosition()
              }), this.expect(19), this.parseArrowExpression(t, r, !0);
            }
          }, {
            key: "parseDo",
            value: function parseDo(t, r) {
              this.expectPlugin("doExpressions"), r && this.expectPlugin("asyncDoExpressions"), t.async = r, this.next();
              var e = this.state.labels;
              return this.state.labels = [], r ? (this.prodParam.enter(At), t.body = this.parseBlock(), this.prodParam.exit()) : t.body = this.parseBlock(), this.state.labels = e, this.finishNode(t, "DoExpression");
            }
          }, {
            key: "parseSuper",
            value: function parseSuper() {
              var t = this.startNode();
              return this.next(), this.match(10) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod ? this.raise(f.SuperNotAllowed, {
                at: t
              }) : !this.scope.allowSuper && !this.options.allowSuperOutsideMethod && this.raise(f.UnexpectedSuper, {
                at: t
              }), !this.match(10) && !this.match(0) && !this.match(16) && this.raise(f.UnsupportedSuper, {
                at: t
              }), this.finishNode(t, "Super");
            }
          }, {
            key: "parsePrivateName",
            value: function parsePrivateName() {
              var t = this.startNode(),
                  r = this.startNodeAt(Y(this.state.startLoc, 1)),
                  e = this.state.value;
              return this.next(), t.id = this.createIdentifier(r, e), this.finishNode(t, "PrivateName");
            }
          }, {
            key: "parseFunctionOrFunctionSent",
            value: function parseFunctionOrFunctionSent() {
              var t = this.startNode();

              if (this.next(), this.prodParam.hasYield && this.match(16)) {
                var r = this.createIdentifier(this.startNodeAtNode(t), "function");
                return this.next(), this.match(102) ? this.expectPlugin("functionSent") : this.hasPlugin("functionSent") || this.unexpected(), this.parseMetaProperty(t, r, "sent");
              }

              return this.parseFunction(t);
            }
          }, {
            key: "parseMetaProperty",
            value: function parseMetaProperty(t, r, e) {
              t.meta = r;
              var s = this.state.containsEsc;
              return t.property = this.parseIdentifier(!0), (t.property.name !== e || s) && this.raise(f.UnsupportedMetaProperty, {
                at: t.property,
                target: r.name,
                onlyValidPropertyName: e
              }), this.finishNode(t, "MetaProperty");
            }
          }, {
            key: "parseImportMetaProperty",
            value: function parseImportMetaProperty(t) {
              var r = this.createIdentifier(this.startNodeAtNode(t), "import");
              return this.next(), this.isContextual(100) && (this.inModule || this.raise(f.ImportMetaOutsideModule, {
                at: r
              }), this.sawUnambiguousESM = !0), this.parseMetaProperty(t, r, "meta");
            }
          }, {
            key: "parseLiteralAtNode",
            value: function parseLiteralAtNode(t, r, e) {
              return this.addExtra(e, "rawValue", t), this.addExtra(e, "raw", this.input.slice(e.start, this.state.end)), e.value = t, this.next(), this.finishNode(e, r);
            }
          }, {
            key: "parseLiteral",
            value: function parseLiteral(t, r) {
              var e = this.startNode();
              return this.parseLiteralAtNode(t, r, e);
            }
          }, {
            key: "parseStringLiteral",
            value: function parseStringLiteral(t) {
              return this.parseLiteral(t, "StringLiteral");
            }
          }, {
            key: "parseNumericLiteral",
            value: function parseNumericLiteral(t) {
              return this.parseLiteral(t, "NumericLiteral");
            }
          }, {
            key: "parseBigIntLiteral",
            value: function parseBigIntLiteral(t) {
              return this.parseLiteral(t, "BigIntLiteral");
            }
          }, {
            key: "parseDecimalLiteral",
            value: function parseDecimalLiteral(t) {
              return this.parseLiteral(t, "DecimalLiteral");
            }
          }, {
            key: "parseRegExpLiteral",
            value: function parseRegExpLiteral(t) {
              var r = this.parseLiteral(t.value, "RegExpLiteral");
              return r.pattern = t.pattern, r.flags = t.flags, r;
            }
          }, {
            key: "parseBooleanLiteral",
            value: function parseBooleanLiteral(t) {
              var r = this.startNode();
              return r.value = t, this.next(), this.finishNode(r, "BooleanLiteral");
            }
          }, {
            key: "parseNullLiteral",
            value: function parseNullLiteral() {
              var t = this.startNode();
              return this.next(), this.finishNode(t, "NullLiteral");
            }
          }, {
            key: "parseParenAndDistinguishExpression",
            value: function parseParenAndDistinguishExpression(t) {
              var r = this.state.startLoc,
                  e;
              this.next(), this.expressionScope.enter(Ul());
              var s = this.state.maybeInArrowParameters,
                  i = this.state.inFSharpPipelineDirectBody;
              this.state.maybeInArrowParameters = !0, this.state.inFSharpPipelineDirectBody = !1;
              var a = this.state.startLoc,
                  n = [],
                  o = new vt(),
                  u = !0,
                  c,
                  y;

              for (; !this.match(11);) {
                if (u) u = !1;else if (this.expect(12, o.optionalParametersLoc === null ? null : o.optionalParametersLoc), this.match(11)) {
                  y = this.state.startLoc;
                  break;
                }

                if (this.match(21)) {
                  var C = this.state.startLoc;
                  if (c = this.state.startLoc, n.push(this.parseParenItem(this.parseRestBinding(), C)), !this.checkCommaAfterRest(41)) break;
                } else n.push(this.parseMaybeAssignAllowIn(o, this.parseParenItem));
              }

              var g = this.state.lastTokEndLoc;
              this.expect(11), this.state.maybeInArrowParameters = s, this.state.inFSharpPipelineDirectBody = i;
              var T = this.startNodeAt(r);
              return t && this.shouldParseArrow(n) && (T = this.parseArrow(T)) ? (this.checkDestructuringPrivate(o), this.expressionScope.validateAsPattern(), this.expressionScope.exit(), this.parseArrowExpression(T, n, !1), T) : (this.expressionScope.exit(), n.length || this.unexpected(this.state.lastTokStartLoc), y && this.unexpected(y), c && this.unexpected(c), this.checkExpressionErrors(o, !0), this.toReferencedListDeep(n, !0), n.length > 1 ? (e = this.startNodeAt(a), e.expressions = n, this.finishNode(e, "SequenceExpression"), this.resetEndLocation(e, g)) : e = n[0], this.wrapParenthesis(r, e));
            }
          }, {
            key: "wrapParenthesis",
            value: function wrapParenthesis(t, r) {
              if (!this.options.createParenthesizedExpressions) return this.addExtra(r, "parenthesized", !0), this.addExtra(r, "parenStart", t.index), this.takeSurroundingComments(r, t.index, this.state.lastTokEndLoc.index), r;
              var e = this.startNodeAt(t);
              return e.expression = r, this.finishNode(e, "ParenthesizedExpression");
            }
          }, {
            key: "shouldParseArrow",
            value: function shouldParseArrow(t) {
              return !this.canInsertSemicolon();
            }
          }, {
            key: "parseArrow",
            value: function parseArrow(t) {
              if (this.eat(19)) return t;
            }
          }, {
            key: "parseParenItem",
            value: function parseParenItem(t, r) {
              return t;
            }
          }, {
            key: "parseNewOrNewTarget",
            value: function parseNewOrNewTarget() {
              var t = this.startNode();

              if (this.next(), this.match(16)) {
                var r = this.createIdentifier(this.startNodeAtNode(t), "new");
                this.next();
                var e = this.parseMetaProperty(t, r, "target");
                return !this.scope.inNonArrowFunction && !this.scope.inClass && !this.options.allowNewTargetOutsideFunction && this.raise(f.UnexpectedNewTarget, {
                  at: e
                }), e;
              }

              return this.parseNew(t);
            }
          }, {
            key: "parseNew",
            value: function parseNew(t) {
              if (this.parseNewCallee(t), this.eat(10)) {
                var r = this.parseExprList(11);
                this.toReferencedList(r), t.arguments = r;
              } else t.arguments = [];

              return this.finishNode(t, "NewExpression");
            }
          }, {
            key: "parseNewCallee",
            value: function parseNewCallee(t) {
              t.callee = this.parseNoCallExpr(), t.callee.type === "Import" && this.raise(f.ImportCallNotNewExpression, {
                at: t.callee
              });
            }
          }, {
            key: "parseTemplateElement",
            value: function parseTemplateElement(t) {
              var _this$state3 = this.state,
                  r = _this$state3.start,
                  e = _this$state3.startLoc,
                  s = _this$state3.end,
                  i = _this$state3.value,
                  a = r + 1,
                  n = this.startNodeAt(Y(e, 1));
              i === null && (t || this.raise(f.InvalidEscapeSequenceTemplate, {
                at: Y(this.state.firstInvalidTemplateEscapePos, 1)
              }));
              var o = this.match(24),
                  u = o ? -1 : -2,
                  c = s + u;
              n.value = {
                raw: this.input.slice(a, c).replace(/\r\n?/g, "\n"),
                cooked: i === null ? null : i.slice(1, u)
              }, n.tail = o, this.next();
              var y = this.finishNode(n, "TemplateElement");
              return this.resetEndLocation(y, Y(this.state.lastTokEndLoc, u)), y;
            }
          }, {
            key: "parseTemplate",
            value: function parseTemplate(t) {
              var r = this.startNode();
              r.expressions = [];
              var e = this.parseTemplateElement(t);

              for (r.quasis = [e]; !e.tail;) {
                r.expressions.push(this.parseTemplateSubstitution()), this.readTemplateContinuation(), r.quasis.push(e = this.parseTemplateElement(t));
              }

              return this.finishNode(r, "TemplateLiteral");
            }
          }, {
            key: "parseTemplateSubstitution",
            value: function parseTemplateSubstitution() {
              return this.parseExpression();
            }
          }, {
            key: "parseObjectLike",
            value: function parseObjectLike(t, r, e, s) {
              e && this.expectPlugin("recordAndTuple");
              var i = this.state.inFSharpPipelineDirectBody;
              this.state.inFSharpPipelineDirectBody = !1;
              var a = Object.create(null),
                  n = !0,
                  o = this.startNode();

              for (o.properties = [], this.next(); !this.match(t);) {
                if (n) n = !1;else if (this.expect(12), this.match(t)) {
                  this.addTrailingCommaExtraToNode(o);
                  break;
                }
                var c = void 0;
                r ? c = this.parseBindingProperty() : (c = this.parsePropertyDefinition(s), this.checkProto(c, e, a, s)), e && !this.isObjectProperty(c) && c.type !== "SpreadElement" && this.raise(f.InvalidRecordProperty, {
                  at: c
                }), c.shorthand && this.addExtra(c, "shorthand", !0), o.properties.push(c);
              }

              this.next(), this.state.inFSharpPipelineDirectBody = i;
              var u = "ObjectExpression";
              return r ? u = "ObjectPattern" : e && (u = "RecordExpression"), this.finishNode(o, u);
            }
          }, {
            key: "addTrailingCommaExtraToNode",
            value: function addTrailingCommaExtraToNode(t) {
              this.addExtra(t, "trailingComma", this.state.lastTokStart), this.addExtra(t, "trailingCommaLoc", this.state.lastTokStartLoc, !1);
            }
          }, {
            key: "maybeAsyncOrAccessorProp",
            value: function maybeAsyncOrAccessorProp(t) {
              return !t.computed && t.key.type === "Identifier" && (this.isLiteralPropertyName() || this.match(0) || this.match(55));
            }
          }, {
            key: "parsePropertyDefinition",
            value: function parsePropertyDefinition(t) {
              var r = [];
              if (this.match(26)) for (this.hasPlugin("decorators") && this.raise(f.UnsupportedPropertyDecorator, {
                at: this.state.startLoc
              }); this.match(26);) {
                r.push(this.parseDecorator());
              }
              var e = this.startNode(),
                  s = !1,
                  i = !1,
                  a;
              if (this.match(21)) return r.length && this.unexpected(), this.parseSpread();
              r.length && (e.decorators = r, r = []), e.method = !1, t && (a = this.state.startLoc);
              var n = this.eat(55);
              this.parsePropertyNamePrefixOperator(e);
              var o = this.state.containsEsc,
                  u = this.parsePropertyName(e, t);

              if (!n && !o && this.maybeAsyncOrAccessorProp(e)) {
                var c = u.name;
                c === "async" && !this.hasPrecedingLineBreak() && (s = !0, this.resetPreviousNodeTrailingComments(u), n = this.eat(55), this.parsePropertyName(e)), (c === "get" || c === "set") && (i = !0, this.resetPreviousNodeTrailingComments(u), e.kind = c, this.match(55) && (n = !0, this.raise(f.AccessorIsGenerator, {
                  at: this.state.curPosition(),
                  kind: c
                }), this.next()), this.parsePropertyName(e));
              }

              return this.parseObjPropValue(e, a, n, s, !1, i, t);
            }
          }, {
            key: "getGetterSetterExpectedParamCount",
            value: function getGetterSetterExpectedParamCount(t) {
              return t.kind === "get" ? 0 : 1;
            }
          }, {
            key: "getObjectOrClassMethodParams",
            value: function getObjectOrClassMethodParams(t) {
              return t.params;
            }
          }, {
            key: "checkGetterSetterParams",
            value: function checkGetterSetterParams(t) {
              var r;
              var e = this.getGetterSetterExpectedParamCount(t),
                  s = this.getObjectOrClassMethodParams(t);
              s.length !== e && this.raise(t.kind === "get" ? f.BadGetterArity : f.BadSetterArity, {
                at: t
              }), t.kind === "set" && ((r = s[s.length - 1]) == null ? void 0 : r.type) === "RestElement" && this.raise(f.BadSetterRestParameter, {
                at: t
              });
            }
          }, {
            key: "parseObjectMethod",
            value: function parseObjectMethod(t, r, e, s, i) {
              if (i) {
                var a = this.parseMethod(t, r, !1, !1, !1, "ObjectMethod");
                return this.checkGetterSetterParams(a), a;
              }

              if (e || r || this.match(10)) return s && this.unexpected(), t.kind = "method", t.method = !0, this.parseMethod(t, r, e, !1, !1, "ObjectMethod");
            }
          }, {
            key: "parseObjectProperty",
            value: function parseObjectProperty(t, r, e, s) {
              if (t.shorthand = !1, this.eat(14)) return t.value = e ? this.parseMaybeDefault(this.state.startLoc) : this.parseMaybeAssignAllowIn(s), this.finishNode(t, "ObjectProperty");

              if (!t.computed && t.key.type === "Identifier") {
                if (this.checkReservedWord(t.key.name, t.key.loc.start, !0, !1), e) t.value = this.parseMaybeDefault(r, me(t.key));else if (this.match(29)) {
                  var i = this.state.startLoc;
                  s != null ? s.shorthandAssignLoc === null && (s.shorthandAssignLoc = i) : this.raise(f.InvalidCoverInitializedName, {
                    at: i
                  }), t.value = this.parseMaybeDefault(r, me(t.key));
                } else t.value = me(t.key);
                return t.shorthand = !0, this.finishNode(t, "ObjectProperty");
              }
            }
          }, {
            key: "parseObjPropValue",
            value: function parseObjPropValue(t, r, e, s, i, a, n) {
              var o = this.parseObjectMethod(t, e, s, i, a) || this.parseObjectProperty(t, r, i, n);
              return o || this.unexpected(), o;
            }
          }, {
            key: "parsePropertyName",
            value: function parsePropertyName(t, r) {
              if (this.eat(0)) t.computed = !0, t.key = this.parseMaybeAssignAllowIn(), this.expect(3);else {
                var _this$state4 = this.state,
                    e = _this$state4.type,
                    s = _this$state4.value,
                    i;
                if (te(e)) i = this.parseIdentifier(!0);else switch (e) {
                  case 132:
                    i = this.parseNumericLiteral(s);
                    break;

                  case 131:
                    i = this.parseStringLiteral(s);
                    break;

                  case 133:
                    i = this.parseBigIntLiteral(s);
                    break;

                  case 134:
                    i = this.parseDecimalLiteral(s);
                    break;

                  case 136:
                    {
                      var a = this.state.startLoc;
                      r != null ? r.privateKeyLoc === null && (r.privateKeyLoc = a) : this.raise(f.UnexpectedPrivateField, {
                        at: a
                      }), i = this.parsePrivateName();
                      break;
                    }

                  default:
                    this.unexpected();
                }
                t.key = i, e !== 136 && (t.computed = !1);
              }
              return t.key;
            }
          }, {
            key: "initFunction",
            value: function initFunction(t, r) {
              t.id = null, t.generator = !1, t.async = r;
            }
          }, {
            key: "parseMethod",
            value: function parseMethod(t, r, e, s, i, a) {
              var n = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : !1;
              this.initFunction(t, e), t.generator = r, this.scope.enter(de | ht | (n ? Ee : 0) | (i ? Pr : 0)), this.prodParam.enter(Tt(e, t.generator)), this.parseFunctionParams(t, s);
              var o = this.parseFunctionBodyAndFinish(t, a, !0);
              return this.prodParam.exit(), this.scope.exit(), o;
            }
          }, {
            key: "parseArrayLike",
            value: function parseArrayLike(t, r, e, s) {
              e && this.expectPlugin("recordAndTuple");
              var i = this.state.inFSharpPipelineDirectBody;
              this.state.inFSharpPipelineDirectBody = !1;
              var a = this.startNode();
              return this.next(), a.elements = this.parseExprList(t, !e, s, a), this.state.inFSharpPipelineDirectBody = i, this.finishNode(a, e ? "TupleExpression" : "ArrayExpression");
            }
          }, {
            key: "parseArrowExpression",
            value: function parseArrowExpression(t, r, e, s) {
              this.scope.enter(de | Gt);
              var i = Tt(e, !1);
              !this.match(5) && this.prodParam.hasIn && (i |= _e), this.prodParam.enter(i), this.initFunction(t, e);
              var a = this.state.maybeInArrowParameters;
              return r && (this.state.maybeInArrowParameters = !0, this.setArrowFunctionParameters(t, r, s)), this.state.maybeInArrowParameters = !1, this.parseFunctionBody(t, !0), this.prodParam.exit(), this.scope.exit(), this.state.maybeInArrowParameters = a, this.finishNode(t, "ArrowFunctionExpression");
            }
          }, {
            key: "setArrowFunctionParameters",
            value: function setArrowFunctionParameters(t, r, e) {
              this.toAssignableList(r, e, !1), t.params = r;
            }
          }, {
            key: "parseFunctionBodyAndFinish",
            value: function parseFunctionBodyAndFinish(t, r) {
              var e = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;
              return this.parseFunctionBody(t, !1, e), this.finishNode(t, r);
            }
          }, {
            key: "parseFunctionBody",
            value: function parseFunctionBody(t, r) {
              var _this60 = this;

              var e = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1,
                  s = r && !this.match(5);
              if (this.expressionScope.enter(_r()), s) t.body = this.parseMaybeAssign(), this.checkParams(t, !1, r, !1);else {
                var i = this.state.strict,
                    a = this.state.labels;
                this.state.labels = [], this.prodParam.enter(this.prodParam.currentFlags() | jr), t.body = this.parseBlock(!0, !1, function (n) {
                  var o = !_this60.isSimpleParamList(t.params);
                  n && o && _this60.raise(f.IllegalLanguageModeDirective, {
                    at: (t.kind === "method" || t.kind === "constructor") && t.key ? t.key.loc.end : t
                  });
                  var u = !i && _this60.state.strict;
                  _this60.checkParams(t, !_this60.state.strict && !r && !e && !o, r, u), _this60.state.strict && t.id && _this60.checkIdentifier(t.id, dl, u);
                }), this.prodParam.exit(), this.state.labels = a;
              }
              this.expressionScope.exit();
            }
          }, {
            key: "isSimpleParameter",
            value: function isSimpleParameter(t) {
              return t.type === "Identifier";
            }
          }, {
            key: "isSimpleParamList",
            value: function isSimpleParamList(t) {
              for (var r = 0, e = t.length; r < e; r++) {
                if (!this.isSimpleParameter(t[r])) return !1;
              }

              return !0;
            }
          }, {
            key: "checkParams",
            value: function checkParams(t, r, e) {
              var s = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !0,
                  i = !r && new Set(),
                  a = {
                type: "FormalParameters"
              };
              var _iteratorNormalCompletion14 = true;
              var _didIteratorError14 = false;
              var _iteratorError14 = undefined;

              try {
                for (var _iterator14 = t.params[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {
                  var n = _step14.value;
                  this.checkLVal(n, {
                    "in": a,
                    binding: mt,
                    checkClashes: i,
                    strictModeChanged: s
                  });
                }
              } catch (err) {
                _didIteratorError14 = true;
                _iteratorError14 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion14 && _iterator14["return"] != null) {
                    _iterator14["return"]();
                  }
                } finally {
                  if (_didIteratorError14) {
                    throw _iteratorError14;
                  }
                }
              }
            }
          }, {
            key: "parseExprList",
            value: function parseExprList(t, r, e, s) {
              var i = [],
                  a = !0;

              for (; !this.eat(t);) {
                if (a) a = !1;else if (this.expect(12), this.match(t)) {
                  s && this.addTrailingCommaExtraToNode(s), this.next();
                  break;
                }
                i.push(this.parseExprListItem(r, e));
              }

              return i;
            }
          }, {
            key: "parseExprListItem",
            value: function parseExprListItem(t, r, e) {
              var s;
              if (this.match(12)) t || this.raise(f.UnexpectedToken, {
                at: this.state.curPosition(),
                unexpected: ","
              }), s = null;else if (this.match(21)) {
                var i = this.state.startLoc;
                s = this.parseParenItem(this.parseSpread(r), i);
              } else if (this.match(17)) {
                this.expectPlugin("partialApplication"), e || this.raise(f.UnexpectedArgumentPlaceholder, {
                  at: this.state.startLoc
                });

                var _i21 = this.startNode();

                this.next(), s = this.finishNode(_i21, "ArgumentPlaceholder");
              } else s = this.parseMaybeAssignAllowIn(r, this.parseParenItem);
              return s;
            }
          }, {
            key: "parseIdentifier",
            value: function parseIdentifier(t) {
              var r = this.startNode(),
                  e = this.parseIdentifierName(t);
              return this.createIdentifier(r, e);
            }
          }, {
            key: "createIdentifier",
            value: function createIdentifier(t, r) {
              return t.name = r, t.loc.identifierName = r, this.finishNode(t, "Identifier");
            }
          }, {
            key: "parseIdentifierName",
            value: function parseIdentifierName(t) {
              var r,
                  _this$state5 = this.state,
                  e = _this$state5.startLoc,
                  s = _this$state5.type;
              te(s) ? r = this.state.value : this.unexpected();
              var i = ue(s);
              return t ? i && this.replaceToken(130) : this.checkReservedWord(r, e, i, !1), this.next(), r;
            }
          }, {
            key: "checkReservedWord",
            value: function checkReservedWord(t, r, e, s) {
              if (t.length > 10 || !ul(t)) return;

              if (e && ol(t)) {
                this.raise(f.UnexpectedKeyword, {
                  at: r,
                  keyword: t
                });
                return;
              }

              if ((this.state.strict ? s ? xr : mr : dr)(t, this.inModule)) {
                this.raise(f.UnexpectedReservedWord, {
                  at: r,
                  reservedWord: t
                });
                return;
              } else if (t === "yield") {
                if (this.prodParam.hasYield) {
                  this.raise(f.YieldBindingIdentifier, {
                    at: r
                  });
                  return;
                }
              } else if (t === "await") {
                if (this.prodParam.hasAwait) {
                  this.raise(f.AwaitBindingIdentifier, {
                    at: r
                  });
                  return;
                }

                if (this.scope.inStaticBlock) {
                  this.raise(f.AwaitBindingIdentifierInStaticBlock, {
                    at: r
                  });
                  return;
                }

                this.expressionScope.recordAsyncArrowParametersError({
                  at: r
                });
              } else if (t === "arguments" && this.scope.inClassAndNotInNonArrowFunction) {
                this.raise(f.ArgumentsInClass, {
                  at: r
                });
                return;
              }
            }
          }, {
            key: "isAwaitAllowed",
            value: function isAwaitAllowed() {
              return !!(this.prodParam.hasAwait || this.options.allowAwaitOutsideFunction && !this.scope.inFunction);
            }
          }, {
            key: "parseAwait",
            value: function parseAwait(t) {
              var r = this.startNodeAt(t);
              return this.expressionScope.recordParameterInitializerError(f.AwaitExpressionFormalParameter, {
                at: r
              }), this.eat(55) && this.raise(f.ObsoleteAwaitStar, {
                at: r
              }), !this.scope.inFunction && !this.options.allowAwaitOutsideFunction && (this.isAmbiguousAwait() ? this.ambiguousScriptDifferentAst = !0 : this.sawUnambiguousESM = !0), this.state.soloAwait || (r.argument = this.parseMaybeUnary(null, !0)), this.finishNode(r, "AwaitExpression");
            }
          }, {
            key: "isAmbiguousAwait",
            value: function isAmbiguousAwait() {
              if (this.hasPrecedingLineBreak()) return !0;
              var t = this.state.type;
              return t === 53 || t === 10 || t === 0 || nt(t) || t === 101 && !this.state.containsEsc || t === 135 || t === 56 || this.hasPlugin("v8intrinsic") && t === 54;
            }
          }, {
            key: "parseYield",
            value: function parseYield() {
              var t = this.startNode();
              this.expressionScope.recordParameterInitializerError(f.YieldInParameter, {
                at: t
              }), this.next();
              var r = !1,
                  e = null;
              if (!this.hasPrecedingLineBreak()) switch (r = this.eat(55), this.state.type) {
                case 13:
                case 137:
                case 8:
                case 11:
                case 3:
                case 9:
                case 14:
                case 12:
                  if (!r) break;

                default:
                  e = this.parseMaybeAssign();
              }
              return t.delegate = r, t.argument = e, this.finishNode(t, "YieldExpression");
            }
          }, {
            key: "checkPipelineAtInfixOperator",
            value: function checkPipelineAtInfixOperator(t, r) {
              this.hasPlugin(["pipelineOperator", {
                proposal: "smart"
              }]) && t.type === "SequenceExpression" && this.raise(f.PipelineHeadSequenceExpression, {
                at: r
              });
            }
          }, {
            key: "parseSmartPipelineBodyInStyle",
            value: function parseSmartPipelineBodyInStyle(t, r) {
              if (this.isSimpleReference(t)) {
                var e = this.startNodeAt(r);
                return e.callee = t, this.finishNode(e, "PipelineBareFunction");
              } else {
                var _e8 = this.startNodeAt(r);

                return this.checkSmartPipeTopicBodyEarlyErrors(r), _e8.expression = t, this.finishNode(_e8, "PipelineTopicExpression");
              }
            }
          }, {
            key: "isSimpleReference",
            value: function isSimpleReference(t) {
              switch (t.type) {
                case "MemberExpression":
                  return !t.computed && this.isSimpleReference(t.object);

                case "Identifier":
                  return !0;

                default:
                  return !1;
              }
            }
          }, {
            key: "checkSmartPipeTopicBodyEarlyErrors",
            value: function checkSmartPipeTopicBodyEarlyErrors(t) {
              if (this.match(19)) throw this.raise(f.PipelineBodyNoArrow, {
                at: this.state.startLoc
              });
              this.topicReferenceWasUsedInCurrentContext() || this.raise(f.PipelineTopicUnused, {
                at: t
              });
            }
          }, {
            key: "withTopicBindingContext",
            value: function withTopicBindingContext(t) {
              var r = this.state.topicContext;
              this.state.topicContext = {
                maxNumOfResolvableTopics: 1,
                maxTopicIndex: null
              };

              try {
                return t();
              } finally {
                this.state.topicContext = r;
              }
            }
          }, {
            key: "withSmartMixTopicForbiddingContext",
            value: function withSmartMixTopicForbiddingContext(t) {
              if (this.hasPlugin(["pipelineOperator", {
                proposal: "smart"
              }])) {
                var r = this.state.topicContext;
                this.state.topicContext = {
                  maxNumOfResolvableTopics: 0,
                  maxTopicIndex: null
                };

                try {
                  return t();
                } finally {
                  this.state.topicContext = r;
                }
              } else return t();
            }
          }, {
            key: "withSoloAwaitPermittingContext",
            value: function withSoloAwaitPermittingContext(t) {
              var r = this.state.soloAwait;
              this.state.soloAwait = !0;

              try {
                return t();
              } finally {
                this.state.soloAwait = r;
              }
            }
          }, {
            key: "allowInAnd",
            value: function allowInAnd(t) {
              var r = this.prodParam.currentFlags();

              if (_e & ~r) {
                this.prodParam.enter(r | _e);

                try {
                  return t();
                } finally {
                  this.prodParam.exit();
                }
              }

              return t();
            }
          }, {
            key: "disallowInAnd",
            value: function disallowInAnd(t) {
              var r = this.prodParam.currentFlags();

              if (_e & r) {
                this.prodParam.enter(r & ~_e);

                try {
                  return t();
                } finally {
                  this.prodParam.exit();
                }
              }

              return t();
            }
          }, {
            key: "registerTopicReference",
            value: function registerTopicReference() {
              this.state.topicContext.maxTopicIndex = 0;
            }
          }, {
            key: "topicReferenceIsAllowedInCurrentContext",
            value: function topicReferenceIsAllowedInCurrentContext() {
              return this.state.topicContext.maxNumOfResolvableTopics >= 1;
            }
          }, {
            key: "topicReferenceWasUsedInCurrentContext",
            value: function topicReferenceWasUsedInCurrentContext() {
              return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;
            }
          }, {
            key: "parseFSharpPipelineBody",
            value: function parseFSharpPipelineBody(t) {
              var r = this.state.startLoc;
              this.state.potentialArrowAt = this.state.start;
              var e = this.state.inFSharpPipelineDirectBody;
              this.state.inFSharpPipelineDirectBody = !0;
              var s = this.parseExprOp(this.parseMaybeUnaryOrPrivate(), r, t);
              return this.state.inFSharpPipelineDirectBody = e, s;
            }
          }, {
            key: "parseModuleExpression",
            value: function parseModuleExpression() {
              this.expectPlugin("moduleBlocks");
              var t = this.startNode();
              this.next(), this.match(5) || this.unexpected(null, 5);
              var r = this.startNodeAt(this.state.endLoc);
              this.next();
              var e = this.initializeScopes(!0);
              this.enterInitialScopes();

              try {
                t.body = this.parseProgram(r, 8, "module");
              } finally {
                e();
              }

              return this.finishNode(t, "ModuleExpression");
            }
          }, {
            key: "parsePropertyNamePrefixOperator",
            value: function parsePropertyNamePrefixOperator(t) {}
          }]);

          return gh;
        }(ah),
            cs = {
          kind: "loop"
        },
            Ph = {
          kind: "switch"
        },
            Ah = /(?:[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/,
            ps = new RegExp("in(?:stanceof)?", "y");

        function Th(t, r) {
          for (var e = 0; e < t.length; e++) {
            var s = t[e],
                i = s.type;

            if (typeof i == "number") {
              {
                if (i === 136) {
                  var a = s.loc,
                      n = s.start,
                      o = s.value,
                      u = s.end,
                      c = n + 1,
                      y = Y(a.start, 1);
                  t.splice(e, 1, new Ae({
                    type: ce(27),
                    value: "#",
                    start: n,
                    end: c,
                    startLoc: a.start,
                    endLoc: y
                  }), new Ae({
                    type: ce(130),
                    value: o,
                    start: c,
                    end: u,
                    startLoc: y,
                    endLoc: a.end
                  })), e++;
                  continue;
                }

                if (nt(i)) {
                  var _a7 = s.loc,
                      _n8 = s.start,
                      _o6 = s.value,
                      _u5 = s.end,
                      _c5 = _n8 + 1,
                      _y5 = Y(_a7.start, 1),
                      g = void 0;

                  r.charCodeAt(_n8) === 96 ? g = new Ae({
                    type: ce(22),
                    value: "`",
                    start: _n8,
                    end: _c5,
                    startLoc: _a7.start,
                    endLoc: _y5
                  }) : g = new Ae({
                    type: ce(8),
                    value: "}",
                    start: _n8,
                    end: _c5,
                    startLoc: _a7.start,
                    endLoc: _y5
                  });
                  var T = void 0,
                      C = void 0,
                      M = void 0,
                      j = void 0;
                  i === 24 ? (C = _u5 - 1, M = Y(_a7.end, -1), T = _o6 === null ? null : _o6.slice(1, -1), j = new Ae({
                    type: ce(22),
                    value: "`",
                    start: C,
                    end: _u5,
                    startLoc: M,
                    endLoc: _a7.end
                  })) : (C = _u5 - 2, M = Y(_a7.end, -2), T = _o6 === null ? null : _o6.slice(1, -2), j = new Ae({
                    type: ce(23),
                    value: "${",
                    start: C,
                    end: _u5,
                    startLoc: M,
                    endLoc: _a7.end
                  })), t.splice(e, 1, g, new Ae({
                    type: ce(20),
                    value: T,
                    start: _c5,
                    end: C,
                    startLoc: _y5,
                    endLoc: M
                  }), j), e += 2;
                  continue;
                }
              }
              s.type = ce(i);
            }
          }

          return t;
        }

        var vh =
        /*#__PURE__*/
        function (_gh) {
          _inherits(vh, _gh);

          function vh() {
            _classCallCheck(this, vh);

            return _possibleConstructorReturn(this, _getPrototypeOf(vh).apply(this, arguments));
          }

          _createClass(vh, [{
            key: "parseTopLevel",
            value: function parseTopLevel(t, r) {
              return t.program = this.parseProgram(r), t.comments = this.state.comments, this.options.tokens && (t.tokens = Th(this.tokens, this.input)), this.finishNode(t, "File");
            }
          }, {
            key: "parseProgram",
            value: function parseProgram(t) {
              var r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 137,
                  e = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.options.sourceType;

              if (t.sourceType = e, t.interpreter = this.parseInterpreterDirective(), this.parseBlockBody(t, !0, !0, r), this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {
                for (var _i22 = 0, _Array$from2 = Array.from(this.scope.undefinedExports); _i22 < _Array$from2.length; _i22++) {
                  var _Array$from2$_i = _slicedToArray(_Array$from2[_i22], 2),
                      i = _Array$from2$_i[0],
                      a = _Array$from2$_i[1];

                  this.raise(f.ModuleExportUndefined, {
                    at: a,
                    localName: i
                  });
                }
              }

              var s;
              return r === 137 ? s = this.finishNode(t, "Program") : s = this.finishNodeAt(t, "Program", Y(this.state.startLoc, -1)), s;
            }
          }, {
            key: "stmtToDirective",
            value: function stmtToDirective(t) {
              var r = t;
              r.type = "Directive", r.value = r.expression, delete r.expression;
              var e = r.value,
                  s = e.value,
                  i = this.input.slice(e.start, e.end),
                  a = e.value = i.slice(1, -1);
              return this.addExtra(e, "raw", i), this.addExtra(e, "rawValue", a), this.addExtra(e, "expressionValue", s), e.type = "DirectiveLiteral", r;
            }
          }, {
            key: "parseInterpreterDirective",
            value: function parseInterpreterDirective() {
              if (!this.match(28)) return null;
              var t = this.startNode();
              return t.value = this.state.value, this.next(), this.finishNode(t, "InterpreterDirective");
            }
          }, {
            key: "isLet",
            value: function isLet() {
              return this.isContextual(99) ? this.hasFollowingBindingAtom() : !1;
            }
          }, {
            key: "chStartsBindingIdentifier",
            value: function chStartsBindingIdentifier(t, r) {
              if (fe(t)) {
                if (ps.lastIndex = r, ps.test(this.input)) {
                  var e = this.codePointAtPos(ps.lastIndex);
                  if (!De(e) && e !== 92) return !1;
                }

                return !0;
              } else return t === 92;
            }
          }, {
            key: "chStartsBindingPattern",
            value: function chStartsBindingPattern(t) {
              return t === 91 || t === 123;
            }
          }, {
            key: "hasFollowingBindingAtom",
            value: function hasFollowingBindingAtom() {
              var t = this.nextTokenStart(),
                  r = this.codePointAtPos(t);
              return this.chStartsBindingPattern(r) || this.chStartsBindingIdentifier(r, t);
            }
          }, {
            key: "hasFollowingBindingIdentifier",
            value: function hasFollowingBindingIdentifier() {
              var t = this.nextTokenStart(),
                  r = this.codePointAtPos(t);
              return this.chStartsBindingIdentifier(r, t);
            }
          }, {
            key: "startsUsingForOf",
            value: function startsUsingForOf() {
              var t = this.lookahead();
              return t.type === 101 && !t.containsEsc ? !1 : (this.expectPlugin("explicitResourceManagement"), !0);
            }
          }, {
            key: "parseModuleItem",
            value: function parseModuleItem() {
              return this.parseStatementLike(15);
            }
          }, {
            key: "parseStatementListItem",
            value: function parseStatementListItem() {
              return this.parseStatementLike(6 | (!this.options.annexB || this.state.strict ? 0 : 8));
            }
          }, {
            key: "parseStatementOrSloppyAnnexBFunctionDeclaration",
            value: function parseStatementOrSloppyAnnexBFunctionDeclaration() {
              var t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1,
                  r = 0;
              return this.options.annexB && !this.state.strict && (r |= 4, t && (r |= 8)), this.parseStatementLike(r);
            }
          }, {
            key: "parseStatement",
            value: function parseStatement() {
              return this.parseStatementLike(0);
            }
          }, {
            key: "parseStatementLike",
            value: function parseStatementLike(t) {
              var r = null;
              return this.match(26) && (r = this.parseDecorators(!0)), this.parseStatementContent(t, r);
            }
          }, {
            key: "parseStatementContent",
            value: function parseStatementContent(t, r) {
              var e = this.state.type,
                  s = this.startNode(),
                  i = !!(t & 2),
                  a = !!(t & 4),
                  n = t & 1;

              switch (e) {
                case 60:
                  return this.parseBreakContinueStatement(s, !0);

                case 63:
                  return this.parseBreakContinueStatement(s, !1);

                case 64:
                  return this.parseDebuggerStatement(s);

                case 90:
                  return this.parseDoWhileStatement(s);

                case 91:
                  return this.parseForStatement(s);

                case 68:
                  if (this.lookaheadCharCode() === 46) break;
                  return a || this.raise(this.state.strict ? f.StrictFunction : this.options.annexB ? f.SloppyFunctionAnnexB : f.SloppyFunction, {
                    at: this.state.startLoc
                  }), this.parseFunctionStatement(s, !1, !i && a);

                case 80:
                  return i || this.unexpected(), this.parseClass(this.maybeTakeDecorators(r, s), !0);

                case 69:
                  return this.parseIfStatement(s);

                case 70:
                  return this.parseReturnStatement(s);

                case 71:
                  return this.parseSwitchStatement(s);

                case 72:
                  return this.parseThrowStatement(s);

                case 73:
                  return this.parseTryStatement(s);

                case 105:
                  if (this.hasFollowingLineBreak() || this.state.containsEsc || !this.hasFollowingBindingIdentifier()) break;
                  return this.expectPlugin("explicitResourceManagement"), !this.scope.inModule && this.scope.inTopLevel ? this.raise(f.UnexpectedUsingDeclaration, {
                    at: this.state.startLoc
                  }) : i || this.raise(f.UnexpectedLexicalDeclaration, {
                    at: this.state.startLoc
                  }), this.parseVarStatement(s, "using");

                case 99:
                  {
                    if (this.state.containsEsc) break;
                    var c = this.nextTokenStart(),
                        y = this.codePointAtPos(c);
                    if (y !== 91 && (!i && this.hasFollowingLineBreak() || !this.chStartsBindingIdentifier(y, c) && y !== 123)) break;
                  }

                case 75:
                  i || this.raise(f.UnexpectedLexicalDeclaration, {
                    at: this.state.startLoc
                  });

                case 74:
                  {
                    var _c6 = this.state.value;
                    return this.parseVarStatement(s, _c6);
                  }

                case 92:
                  return this.parseWhileStatement(s);

                case 76:
                  return this.parseWithStatement(s);

                case 5:
                  return this.parseBlock();

                case 13:
                  return this.parseEmptyStatement(s);

                case 83:
                  {
                    var _c7 = this.lookaheadCharCode();

                    if (_c7 === 40 || _c7 === 46) break;
                  }

                case 82:
                  {
                    !this.options.allowImportExportEverywhere && !n && this.raise(f.UnexpectedImportExport, {
                      at: this.state.startLoc
                    }), this.next();

                    var _c8;

                    return e === 83 ? (_c8 = this.parseImport(s), _c8.type === "ImportDeclaration" && (!_c8.importKind || _c8.importKind === "value") && (this.sawUnambiguousESM = !0)) : (_c8 = this.parseExport(s, r), (_c8.type === "ExportNamedDeclaration" && (!_c8.exportKind || _c8.exportKind === "value") || _c8.type === "ExportAllDeclaration" && (!_c8.exportKind || _c8.exportKind === "value") || _c8.type === "ExportDefaultDeclaration") && (this.sawUnambiguousESM = !0)), this.assertModuleNodeAllowed(_c8), _c8;
                  }

                default:
                  if (this.isAsyncFunction()) return i || this.raise(f.AsyncFunctionInSingleStatementContext, {
                    at: this.state.startLoc
                  }), this.next(), this.parseFunctionStatement(s, !0, !i && a);
              }

              var o = this.state.value,
                  u = this.parseExpression();
              return q(e) && u.type === "Identifier" && this.eat(14) ? this.parseLabeledStatement(s, o, u, t) : this.parseExpressionStatement(s, u, r);
            }
          }, {
            key: "assertModuleNodeAllowed",
            value: function assertModuleNodeAllowed(t) {
              !this.options.allowImportExportEverywhere && !this.inModule && this.raise(f.ImportOutsideModule, {
                at: t
              });
            }
          }, {
            key: "decoratorsEnabledBeforeExport",
            value: function decoratorsEnabledBeforeExport() {
              return this.hasPlugin("decorators-legacy") ? !0 : this.hasPlugin("decorators") && this.getPluginOption("decorators", "decoratorsBeforeExport") !== !1;
            }
          }, {
            key: "maybeTakeDecorators",
            value: function maybeTakeDecorators(t, r, e) {
              var _r$decorators;

              return t && (r.decorators && r.decorators.length > 0 ? (typeof this.getPluginOption("decorators", "decoratorsBeforeExport") != "boolean" && this.raise(f.DecoratorsBeforeAfterExport, {
                at: r.decorators[0]
              }), (_r$decorators = r.decorators).unshift.apply(_r$decorators, _toConsumableArray(t))) : r.decorators = t, this.resetStartLocationFromNode(r, t[0]), e && this.resetStartLocationFromNode(e, r)), r;
            }
          }, {
            key: "canHaveLeadingDecorator",
            value: function canHaveLeadingDecorator() {
              return this.match(80);
            }
          }, {
            key: "parseDecorators",
            value: function parseDecorators(t) {
              var r = [];

              do {
                r.push(this.parseDecorator());
              } while (this.match(26));

              if (this.match(82)) t || this.unexpected(), this.decoratorsEnabledBeforeExport() || this.raise(f.DecoratorExportClass, {
                at: this.state.startLoc
              });else if (!this.canHaveLeadingDecorator()) throw this.raise(f.UnexpectedLeadingDecorator, {
                at: this.state.startLoc
              });
              return r;
            }
          }, {
            key: "parseDecorator",
            value: function parseDecorator() {
              this.expectOnePlugin(["decorators", "decorators-legacy"]);
              var t = this.startNode();

              if (this.next(), this.hasPlugin("decorators")) {
                var r = this.state.startLoc,
                    e;

                if (this.match(10)) {
                  var s = this.state.startLoc;
                  this.next(), e = this.parseExpression(), this.expect(11), e = this.wrapParenthesis(s, e);
                  var i = this.state.startLoc;
                  t.expression = this.parseMaybeDecoratorArguments(e), this.getPluginOption("decorators", "allowCallParenthesized") === !1 && t.expression !== e && this.raise(f.DecoratorArgumentsOutsideParentheses, {
                    at: i
                  });
                } else {
                  for (e = this.parseIdentifier(!1); this.eat(16);) {
                    var _s16 = this.startNodeAt(r);

                    _s16.object = e, this.match(136) ? (this.classScope.usePrivateName(this.state.value, this.state.startLoc), _s16.property = this.parsePrivateName()) : _s16.property = this.parseIdentifier(!0), _s16.computed = !1, e = this.finishNode(_s16, "MemberExpression");
                  }

                  t.expression = this.parseMaybeDecoratorArguments(e);
                }
              } else t.expression = this.parseExprSubscripts();

              return this.finishNode(t, "Decorator");
            }
          }, {
            key: "parseMaybeDecoratorArguments",
            value: function parseMaybeDecoratorArguments(t) {
              if (this.eat(10)) {
                var r = this.startNodeAtNode(t);
                return r.callee = t, r.arguments = this.parseCallExpressionArguments(11, !1), this.toReferencedList(r.arguments), this.finishNode(r, "CallExpression");
              }

              return t;
            }
          }, {
            key: "parseBreakContinueStatement",
            value: function parseBreakContinueStatement(t, r) {
              return this.next(), this.isLineTerminator() ? t.label = null : (t.label = this.parseIdentifier(), this.semicolon()), this.verifyBreakContinue(t, r), this.finishNode(t, r ? "BreakStatement" : "ContinueStatement");
            }
          }, {
            key: "verifyBreakContinue",
            value: function verifyBreakContinue(t, r) {
              var e;

              for (e = 0; e < this.state.labels.length; ++e) {
                var s = this.state.labels[e];
                if ((t.label == null || s.name === t.label.name) && (s.kind != null && (r || s.kind === "loop") || t.label && r)) break;
              }

              if (e === this.state.labels.length) {
                var _s17 = r ? "BreakStatement" : "ContinueStatement";

                this.raise(f.IllegalBreakContinue, {
                  at: t,
                  type: _s17
                });
              }
            }
          }, {
            key: "parseDebuggerStatement",
            value: function parseDebuggerStatement(t) {
              return this.next(), this.semicolon(), this.finishNode(t, "DebuggerStatement");
            }
          }, {
            key: "parseHeaderExpression",
            value: function parseHeaderExpression() {
              this.expect(10);
              var t = this.parseExpression();
              return this.expect(11), t;
            }
          }, {
            key: "parseDoWhileStatement",
            value: function parseDoWhileStatement(t) {
              var _this61 = this;

              return this.next(), this.state.labels.push(cs), t.body = this.withSmartMixTopicForbiddingContext(function () {
                return _this61.parseStatement();
              }), this.state.labels.pop(), this.expect(92), t.test = this.parseHeaderExpression(), this.eat(13), this.finishNode(t, "DoWhileStatement");
            }
          }, {
            key: "parseForStatement",
            value: function parseForStatement(t) {
              this.next(), this.state.labels.push(cs);
              var r = null;
              if (this.isAwaitAllowed() && this.eatContextual(96) && (r = this.state.lastTokStartLoc), this.scope.enter(Fe), this.expect(10), this.match(13)) return r !== null && this.unexpected(r), this.parseFor(t, null);
              var e = this.isContextual(99),
                  s = this.isContextual(105) && !this.hasFollowingLineBreak(),
                  i = e && this.hasFollowingBindingAtom() || s && this.hasFollowingBindingIdentifier() && this.startsUsingForOf();

              if (this.match(74) || this.match(75) || i) {
                var c = this.startNode(),
                    y = this.state.value;
                this.next(), this.parseVar(c, !0, y);
                var g = this.finishNode(c, "VariableDeclaration"),
                    T = this.match(58);
                return T && s && this.raise(f.ForInUsing, {
                  at: g
                }), (T || this.isContextual(101)) && g.declarations.length === 1 ? this.parseForIn(t, g, r) : (r !== null && this.unexpected(r), this.parseFor(t, g));
              }

              var a = this.isContextual(95),
                  n = new vt(),
                  o = this.parseExpression(!0, n),
                  u = this.isContextual(101);

              if (u && (e && this.raise(f.ForOfLet, {
                at: o
              }), r === null && a && o.type === "Identifier" && this.raise(f.ForOfAsync, {
                at: o
              })), u || this.match(58)) {
                this.checkDestructuringPrivate(n), this.toAssignable(o, !0);

                var _c9 = u ? "ForOfStatement" : "ForInStatement";

                return this.checkLVal(o, {
                  "in": {
                    type: _c9
                  }
                }), this.parseForIn(t, o, r);
              } else this.checkExpressionErrors(n, !0);

              return r !== null && this.unexpected(r), this.parseFor(t, o);
            }
          }, {
            key: "parseFunctionStatement",
            value: function parseFunctionStatement(t, r, e) {
              return this.next(), this.parseFunction(t, 1 | (e ? 2 : 0) | (r ? 8 : 0));
            }
          }, {
            key: "parseIfStatement",
            value: function parseIfStatement(t) {
              return this.next(), t.test = this.parseHeaderExpression(), t.consequent = this.parseStatementOrSloppyAnnexBFunctionDeclaration(), t.alternate = this.eat(66) ? this.parseStatementOrSloppyAnnexBFunctionDeclaration() : null, this.finishNode(t, "IfStatement");
            }
          }, {
            key: "parseReturnStatement",
            value: function parseReturnStatement(t) {
              return !this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction && this.raise(f.IllegalReturn, {
                at: this.state.startLoc
              }), this.next(), this.isLineTerminator() ? t.argument = null : (t.argument = this.parseExpression(), this.semicolon()), this.finishNode(t, "ReturnStatement");
            }
          }, {
            key: "parseSwitchStatement",
            value: function parseSwitchStatement(t) {
              this.next(), t.discriminant = this.parseHeaderExpression();
              var r = t.cases = [];
              this.expect(5), this.state.labels.push(Ph), this.scope.enter(Fe);
              var e;

              for (var s; !this.match(8);) {
                if (this.match(61) || this.match(65)) {
                  var i = this.match(61);
                  e && this.finishNode(e, "SwitchCase"), r.push(e = this.startNode()), e.consequent = [], this.next(), i ? e.test = this.parseExpression() : (s && this.raise(f.MultipleDefaultsInSwitch, {
                    at: this.state.lastTokStartLoc
                  }), s = !0, e.test = null), this.expect(14);
                } else e ? e.consequent.push(this.parseStatementListItem()) : this.unexpected();
              }

              return this.scope.exit(), e && this.finishNode(e, "SwitchCase"), this.next(), this.state.labels.pop(), this.finishNode(t, "SwitchStatement");
            }
          }, {
            key: "parseThrowStatement",
            value: function parseThrowStatement(t) {
              return this.next(), this.hasPrecedingLineBreak() && this.raise(f.NewlineAfterThrow, {
                at: this.state.lastTokEndLoc
              }), t.argument = this.parseExpression(), this.semicolon(), this.finishNode(t, "ThrowStatement");
            }
          }, {
            key: "parseCatchClauseParam",
            value: function parseCatchClauseParam() {
              var t = this.parseBindingAtom();
              return this.scope.enter(this.options.annexB && t.type === "Identifier" ? gr : 0), this.checkLVal(t, {
                "in": {
                  type: "CatchClause"
                },
                binding: cl
              }), t;
            }
          }, {
            key: "parseTryStatement",
            value: function parseTryStatement(t) {
              var _this62 = this;

              if (this.next(), t.block = this.parseBlock(), t.handler = null, this.match(62)) {
                var r = this.startNode();
                this.next(), this.match(10) ? (this.expect(10), r.param = this.parseCatchClauseParam(), this.expect(11)) : (r.param = null, this.scope.enter(Fe)), r.body = this.withSmartMixTopicForbiddingContext(function () {
                  return _this62.parseBlock(!1, !1);
                }), this.scope.exit(), t.handler = this.finishNode(r, "CatchClause");
              }

              return t.finalizer = this.eat(67) ? this.parseBlock() : null, !t.handler && !t.finalizer && this.raise(f.NoCatchOrFinally, {
                at: t
              }), this.finishNode(t, "TryStatement");
            }
          }, {
            key: "parseVarStatement",
            value: function parseVarStatement(t, r) {
              var e = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;
              return this.next(), this.parseVar(t, !1, r, e), this.semicolon(), this.finishNode(t, "VariableDeclaration");
            }
          }, {
            key: "parseWhileStatement",
            value: function parseWhileStatement(t) {
              var _this63 = this;

              return this.next(), t.test = this.parseHeaderExpression(), this.state.labels.push(cs), t.body = this.withSmartMixTopicForbiddingContext(function () {
                return _this63.parseStatement();
              }), this.state.labels.pop(), this.finishNode(t, "WhileStatement");
            }
          }, {
            key: "parseWithStatement",
            value: function parseWithStatement(t) {
              var _this64 = this;

              return this.state.strict && this.raise(f.StrictWith, {
                at: this.state.startLoc
              }), this.next(), t.object = this.parseHeaderExpression(), t.body = this.withSmartMixTopicForbiddingContext(function () {
                return _this64.parseStatement();
              }), this.finishNode(t, "WithStatement");
            }
          }, {
            key: "parseEmptyStatement",
            value: function parseEmptyStatement(t) {
              return this.next(), this.finishNode(t, "EmptyStatement");
            }
          }, {
            key: "parseLabeledStatement",
            value: function parseLabeledStatement(t, r, e, s) {
              var _iteratorNormalCompletion15 = true;
              var _didIteratorError15 = false;
              var _iteratorError15 = undefined;

              try {
                for (var _iterator15 = this.state.labels[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {
                  var _a8 = _step15.value;
                  _a8.name === r && this.raise(f.LabelRedeclaration, {
                    at: e,
                    labelName: r
                  });
                }
              } catch (err) {
                _didIteratorError15 = true;
                _iteratorError15 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion15 && _iterator15["return"] != null) {
                    _iterator15["return"]();
                  }
                } finally {
                  if (_didIteratorError15) {
                    throw _iteratorError15;
                  }
                }
              }

              var i = Mo(this.state.type) ? "loop" : this.match(71) ? "switch" : null;

              for (var a = this.state.labels.length - 1; a >= 0; a--) {
                var n = this.state.labels[a];
                if (n.statementStart === t.start) n.statementStart = this.state.start, n.kind = i;else break;
              }

              return this.state.labels.push({
                name: r,
                kind: i,
                statementStart: this.state.start
              }), t.body = s & 8 ? this.parseStatementOrSloppyAnnexBFunctionDeclaration(!0) : this.parseStatement(), this.state.labels.pop(), t.label = e, this.finishNode(t, "LabeledStatement");
            }
          }, {
            key: "parseExpressionStatement",
            value: function parseExpressionStatement(t, r, e) {
              return t.expression = r, this.semicolon(), this.finishNode(t, "ExpressionStatement");
            }
          }, {
            key: "parseBlock",
            value: function parseBlock() {
              var t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1,
                  r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0,
                  e = arguments.length > 2 ? arguments[2] : void 0,
                  s = this.startNode();
              return t && this.state.strictErrors.clear(), this.expect(5), r && this.scope.enter(Fe), this.parseBlockBody(s, t, !1, 8, e), r && this.scope.exit(), this.finishNode(s, "BlockStatement");
            }
          }, {
            key: "isValidDirective",
            value: function isValidDirective(t) {
              return t.type === "ExpressionStatement" && t.expression.type === "StringLiteral" && !t.expression.extra.parenthesized;
            }
          }, {
            key: "parseBlockBody",
            value: function parseBlockBody(t, r, e, s, i) {
              var a = t.body = [],
                  n = t.directives = [];
              this.parseBlockOrModuleBlockBody(a, r ? n : void 0, e, s, i);
            }
          }, {
            key: "parseBlockOrModuleBlockBody",
            value: function parseBlockOrModuleBlockBody(t, r, e, s, i) {
              var a = this.state.strict,
                  n = !1,
                  o = !1;

              for (; !this.match(s);) {
                var u = e ? this.parseModuleItem() : this.parseStatementListItem();

                if (r && !o) {
                  if (this.isValidDirective(u)) {
                    var c = this.stmtToDirective(u);
                    r.push(c), !n && c.value.value === "use strict" && (n = !0, this.setStrict(!0));
                    continue;
                  }

                  o = !0, this.state.strictErrors.clear();
                }

                t.push(u);
              }

              i && i.call(this, n), a || this.setStrict(!1), this.next();
            }
          }, {
            key: "parseFor",
            value: function parseFor(t, r) {
              var _this65 = this;

              return t.init = r, this.semicolon(!1), t.test = this.match(13) ? null : this.parseExpression(), this.semicolon(!1), t.update = this.match(11) ? null : this.parseExpression(), this.expect(11), t.body = this.withSmartMixTopicForbiddingContext(function () {
                return _this65.parseStatement();
              }), this.scope.exit(), this.state.labels.pop(), this.finishNode(t, "ForStatement");
            }
          }, {
            key: "parseForIn",
            value: function parseForIn(t, r, e) {
              var _this66 = this;

              var s = this.match(58);
              return this.next(), s ? e !== null && this.unexpected(e) : t["await"] = e !== null, r.type === "VariableDeclaration" && r.declarations[0].init != null && (!s || !this.options.annexB || this.state.strict || r.kind !== "var" || r.declarations[0].id.type !== "Identifier") && this.raise(f.ForInOfLoopInitializer, {
                at: r,
                type: s ? "ForInStatement" : "ForOfStatement"
              }), r.type === "AssignmentPattern" && this.raise(f.InvalidLhs, {
                at: r,
                ancestor: {
                  type: "ForStatement"
                }
              }), t.left = r, t.right = s ? this.parseExpression() : this.parseMaybeAssignAllowIn(), this.expect(11), t.body = this.withSmartMixTopicForbiddingContext(function () {
                return _this66.parseStatement();
              }), this.scope.exit(), this.state.labels.pop(), this.finishNode(t, s ? "ForInStatement" : "ForOfStatement");
            }
          }, {
            key: "parseVar",
            value: function parseVar(t, r, e) {
              var s = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !1,
                  i = t.declarations = [];

              for (t.kind = e;;) {
                var a = this.startNode();
                if (this.parseVarId(a, e), a.init = this.eat(29) ? r ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn() : null, a.init === null && !s && (a.id.type !== "Identifier" && !(r && (this.match(58) || this.isContextual(101))) ? this.raise(f.DeclarationMissingInitializer, {
                  at: this.state.lastTokEndLoc,
                  kind: "destructuring"
                }) : e === "const" && !(this.match(58) || this.isContextual(101)) && this.raise(f.DeclarationMissingInitializer, {
                  at: this.state.lastTokEndLoc,
                  kind: "const"
                })), i.push(this.finishNode(a, "VariableDeclarator")), !this.eat(12)) break;
              }

              return t;
            }
          }, {
            key: "parseVarId",
            value: function parseVarId(t, r) {
              r === "using" && !this.inModule && this.match(96) && this.raise(f.AwaitInUsingBinding, {
                at: this.state.startLoc
              });
              var e = this.parseBindingAtom();
              this.checkLVal(e, {
                "in": {
                  type: "VariableDeclarator"
                },
                binding: r === "var" ? mt : Be
              }), t.id = e;
            }
          }, {
            key: "parseAsyncFunctionExpression",
            value: function parseAsyncFunctionExpression(t) {
              return this.parseFunction(t, 8);
            }
          }, {
            key: "parseFunction",
            value: function parseFunction(t) {
              var _this67 = this;

              var r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0,
                  e = r & 2,
                  s = !!(r & 1),
                  i = s && !(r & 4),
                  a = !!(r & 8);
              this.initFunction(t, a), this.match(55) && (e && this.raise(f.GeneratorInSingleStatementContext, {
                at: this.state.startLoc
              }), this.next(), t.generator = !0), s && (t.id = this.parseFunctionId(i));
              var n = this.state.maybeInArrowParameters;
              return this.state.maybeInArrowParameters = !1, this.scope.enter(de), this.prodParam.enter(Tt(a, t.generator)), s || (t.id = this.parseFunctionId()), this.parseFunctionParams(t, !1), this.withSmartMixTopicForbiddingContext(function () {
                _this67.parseFunctionBodyAndFinish(t, s ? "FunctionDeclaration" : "FunctionExpression");
              }), this.prodParam.exit(), this.scope.exit(), s && !e && this.registerFunctionStatementId(t), this.state.maybeInArrowParameters = n, t;
            }
          }, {
            key: "parseFunctionId",
            value: function parseFunctionId(t) {
              return t || q(this.state.type) ? this.parseIdentifier() : null;
            }
          }, {
            key: "parseFunctionParams",
            value: function parseFunctionParams(t, r) {
              this.expect(10), this.expressionScope.enter(ql()), t.params = this.parseBindingList(11, 41, 2 | (r ? 4 : 0)), this.expressionScope.exit();
            }
          }, {
            key: "registerFunctionStatementId",
            value: function registerFunctionStatementId(t) {
              t.id && this.scope.declareName(t.id.name, !this.options.annexB || this.state.strict || t.generator || t.async ? this.scope.treatFunctionsAsVar ? mt : Be : Er, t.id.loc.start);
            }
          }, {
            key: "parseClass",
            value: function parseClass(t, r, e) {
              this.next();
              var s = this.state.strict;
              return this.state.strict = !0, this.parseClassId(t, r, e), this.parseClassSuper(t), t.body = this.parseClassBody(!!t.superClass, s), this.finishNode(t, r ? "ClassDeclaration" : "ClassExpression");
            }
          }, {
            key: "isClassProperty",
            value: function isClassProperty() {
              return this.match(29) || this.match(13) || this.match(8);
            }
          }, {
            key: "isClassMethod",
            value: function isClassMethod() {
              return this.match(10);
            }
          }, {
            key: "isNonstaticConstructor",
            value: function isNonstaticConstructor(t) {
              return !t.computed && !t["static"] && (t.key.name === "constructor" || t.key.value === "constructor");
            }
          }, {
            key: "parseClassBody",
            value: function parseClassBody(t, r) {
              var _this68 = this;

              this.classScope.enter();
              var e = {
                hadConstructor: !1,
                hadSuperClass: t
              },
                  s = [],
                  i = this.startNode();
              if (i.body = [], this.expect(5), this.withSmartMixTopicForbiddingContext(function () {
                for (; !_this68.match(8);) {
                  if (_this68.eat(13)) {
                    if (s.length > 0) throw _this68.raise(f.DecoratorSemicolon, {
                      at: _this68.state.lastTokEndLoc
                    });
                    continue;
                  }

                  if (_this68.match(26)) {
                    s.push(_this68.parseDecorator());
                    continue;
                  }

                  var a = _this68.startNode();

                  s.length && (a.decorators = s, _this68.resetStartLocationFromNode(a, s[0]), s = []), _this68.parseClassMember(i, a, e), a.kind === "constructor" && a.decorators && a.decorators.length > 0 && _this68.raise(f.DecoratorConstructor, {
                    at: a
                  });
                }
              }), this.state.strict = r, this.next(), s.length) throw this.raise(f.TrailingDecorator, {
                at: this.state.startLoc
              });
              return this.classScope.exit(), this.finishNode(i, "ClassBody");
            }
          }, {
            key: "parseClassMemberFromModifier",
            value: function parseClassMemberFromModifier(t, r) {
              var e = this.parseIdentifier(!0);

              if (this.isClassMethod()) {
                var s = r;
                return s.kind = "method", s.computed = !1, s.key = e, s["static"] = !1, this.pushClassMethod(t, s, !1, !1, !1, !1), !0;
              } else if (this.isClassProperty()) {
                var _s18 = r;
                return _s18.computed = !1, _s18.key = e, _s18["static"] = !1, t.body.push(this.parseClassProperty(_s18)), !0;
              }

              return this.resetPreviousNodeTrailingComments(e), !1;
            }
          }, {
            key: "parseClassMember",
            value: function parseClassMember(t, r, e) {
              var s = this.isContextual(104);

              if (s) {
                if (this.parseClassMemberFromModifier(t, r)) return;

                if (this.eat(5)) {
                  this.parseClassStaticBlock(t, r);
                  return;
                }
              }

              this.parseClassMemberWithIsStatic(t, r, e, s);
            }
          }, {
            key: "parseClassMemberWithIsStatic",
            value: function parseClassMemberWithIsStatic(t, r, e, s) {
              var i = r,
                  a = r,
                  n = r,
                  o = r,
                  u = r,
                  c = i,
                  y = i;

              if (r["static"] = s, this.parsePropertyNamePrefixOperator(r), this.eat(55)) {
                c.kind = "method";
                var j = this.match(136);

                if (this.parseClassElementName(c), j) {
                  this.pushClassPrivateMethod(t, a, !0, !1);
                  return;
                }

                this.isNonstaticConstructor(i) && this.raise(f.ConstructorIsGenerator, {
                  at: i.key
                }), this.pushClassMethod(t, i, !0, !1, !1, !1);
                return;
              }

              var g = q(this.state.type) && !this.state.containsEsc,
                  T = this.match(136),
                  C = this.parseClassElementName(r),
                  M = this.state.startLoc;

              if (this.parsePostMemberNameModifiers(y), this.isClassMethod()) {
                if (c.kind = "method", T) {
                  this.pushClassPrivateMethod(t, a, !1, !1);
                  return;
                }

                var _j = this.isNonstaticConstructor(i),
                    K = !1;

                _j && (i.kind = "constructor", e.hadConstructor && !this.hasPlugin("typescript") && this.raise(f.DuplicateConstructor, {
                  at: C
                }), _j && this.hasPlugin("typescript") && r.override && this.raise(f.OverrideOnConstructor, {
                  at: C
                }), e.hadConstructor = !0, K = e.hadSuperClass), this.pushClassMethod(t, i, !1, !1, _j, K);
              } else if (this.isClassProperty()) T ? this.pushClassPrivateProperty(t, o) : this.pushClassProperty(t, n);else if (g && C.name === "async" && !this.isLineTerminator()) {
                this.resetPreviousNodeTrailingComments(C);

                var _j2 = this.eat(55);

                y.optional && this.unexpected(M), c.kind = "method";

                var _K = this.match(136);

                this.parseClassElementName(c), this.parsePostMemberNameModifiers(y), _K ? this.pushClassPrivateMethod(t, a, _j2, !0) : (this.isNonstaticConstructor(i) && this.raise(f.ConstructorIsAsync, {
                  at: i.key
                }), this.pushClassMethod(t, i, _j2, !0, !1, !1));
              } else if (g && (C.name === "get" || C.name === "set") && !(this.match(55) && this.isLineTerminator())) {
                this.resetPreviousNodeTrailingComments(C), c.kind = C.name;

                var _j3 = this.match(136);

                this.parseClassElementName(i), _j3 ? this.pushClassPrivateMethod(t, a, !1, !1) : (this.isNonstaticConstructor(i) && this.raise(f.ConstructorIsAccessor, {
                  at: i.key
                }), this.pushClassMethod(t, i, !1, !1, !1, !1)), this.checkGetterSetterParams(i);
              } else if (g && C.name === "accessor" && !this.isLineTerminator()) {
                this.expectPlugin("decoratorAutoAccessors"), this.resetPreviousNodeTrailingComments(C);

                var _j4 = this.match(136);

                this.parseClassElementName(n), this.pushClassAccessorProperty(t, u, _j4);
              } else this.isLineTerminator() ? T ? this.pushClassPrivateProperty(t, o) : this.pushClassProperty(t, n) : this.unexpected();
            }
          }, {
            key: "parseClassElementName",
            value: function parseClassElementName(t) {
              var _this$state6 = this.state,
                  r = _this$state6.type,
                  e = _this$state6.value;

              if ((r === 130 || r === 131) && t["static"] && e === "prototype" && this.raise(f.StaticPrototype, {
                at: this.state.startLoc
              }), r === 136) {
                e === "constructor" && this.raise(f.ConstructorClassPrivateField, {
                  at: this.state.startLoc
                });
                var s = this.parsePrivateName();
                return t.key = s, s;
              }

              return this.parsePropertyName(t);
            }
          }, {
            key: "parseClassStaticBlock",
            value: function parseClassStaticBlock(t, r) {
              var e;
              this.scope.enter(Ee | ut | ht);
              var s = this.state.labels;
              this.state.labels = [], this.prodParam.enter(Me);
              var i = r.body = [];
              this.parseBlockOrModuleBlockBody(i, void 0, !1, 8), this.prodParam.exit(), this.scope.exit(), this.state.labels = s, t.body.push(this.finishNode(r, "StaticBlock")), (e = r.decorators) != null && e.length && this.raise(f.DecoratorStaticBlock, {
                at: r
              });
            }
          }, {
            key: "pushClassProperty",
            value: function pushClassProperty(t, r) {
              !r.computed && (r.key.name === "constructor" || r.key.value === "constructor") && this.raise(f.ConstructorClassField, {
                at: r.key
              }), t.body.push(this.parseClassProperty(r));
            }
          }, {
            key: "pushClassPrivateProperty",
            value: function pushClassPrivateProperty(t, r) {
              var e = this.parseClassPrivateProperty(r);
              t.body.push(e), this.classScope.declarePrivateName(this.getPrivateNameSV(e.key), ss, e.key.loc.start);
            }
          }, {
            key: "pushClassAccessorProperty",
            value: function pushClassAccessorProperty(t, r, e) {
              if (!e && !r.computed) {
                var i = r.key;
                (i.name === "constructor" || i.value === "constructor") && this.raise(f.ConstructorClassField, {
                  at: i
                });
              }

              var s = this.parseClassAccessorProperty(r);
              t.body.push(s), e && this.classScope.declarePrivateName(this.getPrivateNameSV(s.key), ss, s.key.loc.start);
            }
          }, {
            key: "pushClassMethod",
            value: function pushClassMethod(t, r, e, s, i, a) {
              t.body.push(this.parseMethod(r, e, s, i, a, "ClassMethod", !0));
            }
          }, {
            key: "pushClassPrivateMethod",
            value: function pushClassPrivateMethod(t, r, e, s) {
              var i = this.parseMethod(r, e, s, !1, !1, "ClassPrivateMethod", !0);
              t.body.push(i);
              var a = i.kind === "get" ? i["static"] ? gl : Al : i.kind === "set" ? i["static"] ? Pl : Tl : ss;
              this.declareClassPrivateMethodInScope(i, a);
            }
          }, {
            key: "declareClassPrivateMethodInScope",
            value: function declareClassPrivateMethodInScope(t, r) {
              this.classScope.declarePrivateName(this.getPrivateNameSV(t.key), r, t.key.loc.start);
            }
          }, {
            key: "parsePostMemberNameModifiers",
            value: function parsePostMemberNameModifiers(t) {}
          }, {
            key: "parseClassPrivateProperty",
            value: function parseClassPrivateProperty(t) {
              return this.parseInitializer(t), this.semicolon(), this.finishNode(t, "ClassPrivateProperty");
            }
          }, {
            key: "parseClassProperty",
            value: function parseClassProperty(t) {
              return this.parseInitializer(t), this.semicolon(), this.finishNode(t, "ClassProperty");
            }
          }, {
            key: "parseClassAccessorProperty",
            value: function parseClassAccessorProperty(t) {
              return this.parseInitializer(t), this.semicolon(), this.finishNode(t, "ClassAccessorProperty");
            }
          }, {
            key: "parseInitializer",
            value: function parseInitializer(t) {
              this.scope.enter(Ee | ht), this.expressionScope.enter(_r()), this.prodParam.enter(Me), t.value = this.eat(29) ? this.parseMaybeAssignAllowIn() : null, this.expressionScope.exit(), this.prodParam.exit(), this.scope.exit();
            }
          }, {
            key: "parseClassId",
            value: function parseClassId(t, r, e) {
              var s = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : vr;
              if (q(this.state.type)) t.id = this.parseIdentifier(), r && this.declareNameFromIdentifier(t.id, s);else if (e || !r) t.id = null;else throw this.raise(f.MissingClassName, {
                at: this.state.startLoc
              });
            }
          }, {
            key: "parseClassSuper",
            value: function parseClassSuper(t) {
              t.superClass = this.eat(81) ? this.parseExprSubscripts() : null;
            }
          }, {
            key: "parseExport",
            value: function parseExport(t, r) {
              var e = this.maybeParseExportDefaultSpecifier(t),
                  s = !e || this.eat(12),
                  i = s && this.eatExportStar(t),
                  a = i && this.maybeParseExportNamespaceSpecifier(t),
                  n = s && (!a || this.eat(12)),
                  o = e || i;

              if (i && !a) {
                if (e && this.unexpected(), r) throw this.raise(f.UnsupportedDecoratorExport, {
                  at: t
                });
                return this.parseExportFrom(t, !0), this.finishNode(t, "ExportAllDeclaration");
              }

              var u = this.maybeParseExportNamedSpecifiers(t);
              e && s && !i && !u && this.unexpected(null, 5), a && n && this.unexpected(null, 97);
              var c;

              if (o || u) {
                if (c = !1, r) throw this.raise(f.UnsupportedDecoratorExport, {
                  at: t
                });
                this.parseExportFrom(t, o);
              } else c = this.maybeParseExportDeclaration(t);

              if (o || u || c) {
                var y;
                var g = t;
                if (this.checkExport(g, !0, !1, !!g.source), ((y = g.declaration) == null ? void 0 : y.type) === "ClassDeclaration") this.maybeTakeDecorators(r, g.declaration, g);else if (r) throw this.raise(f.UnsupportedDecoratorExport, {
                  at: t
                });
                return this.finishNode(g, "ExportNamedDeclaration");
              }

              if (this.eat(65)) {
                var _g = t,
                    T = this.parseExportDefaultExpression();
                if (_g.declaration = T, T.type === "ClassDeclaration") this.maybeTakeDecorators(r, T, _g);else if (r) throw this.raise(f.UnsupportedDecoratorExport, {
                  at: t
                });
                return this.checkExport(_g, !0, !0), this.finishNode(_g, "ExportDefaultDeclaration");
              }

              this.unexpected(null, 5);
            }
          }, {
            key: "eatExportStar",
            value: function eatExportStar(t) {
              return this.eat(55);
            }
          }, {
            key: "maybeParseExportDefaultSpecifier",
            value: function maybeParseExportDefaultSpecifier(t) {
              if (this.isExportDefaultSpecifier()) {
                this.expectPlugin("exportDefaultFrom");
                var r = this.startNode();
                return r.exported = this.parseIdentifier(!0), t.specifiers = [this.finishNode(r, "ExportDefaultSpecifier")], !0;
              }

              return !1;
            }
          }, {
            key: "maybeParseExportNamespaceSpecifier",
            value: function maybeParseExportNamespaceSpecifier(t) {
              if (this.isContextual(93)) {
                t.specifiers || (t.specifiers = []);
                var r = this.startNodeAt(this.state.lastTokStartLoc);
                return this.next(), r.exported = this.parseModuleExportName(), t.specifiers.push(this.finishNode(r, "ExportNamespaceSpecifier")), !0;
              }

              return !1;
            }
          }, {
            key: "maybeParseExportNamedSpecifiers",
            value: function maybeParseExportNamedSpecifiers(t) {
              if (this.match(5)) {
                var _t$specifiers;

                t.specifiers || (t.specifiers = []);
                var r = t.exportKind === "type";
                return (_t$specifiers = t.specifiers).push.apply(_t$specifiers, _toConsumableArray(this.parseExportSpecifiers(r))), t.source = null, t.declaration = null, this.hasPlugin("importAssertions") && (t.assertions = []), !0;
              }

              return !1;
            }
          }, {
            key: "maybeParseExportDeclaration",
            value: function maybeParseExportDeclaration(t) {
              return this.shouldParseExportDeclaration() ? (t.specifiers = [], t.source = null, this.hasPlugin("importAssertions") && (t.assertions = []), t.declaration = this.parseExportDeclaration(t), !0) : !1;
            }
          }, {
            key: "isAsyncFunction",
            value: function isAsyncFunction() {
              if (!this.isContextual(95)) return !1;
              var t = this.nextTokenStart();
              return !as.test(this.input.slice(this.state.pos, t)) && this.isUnparsedContextual(t, "function");
            }
          }, {
            key: "parseExportDefaultExpression",
            value: function parseExportDefaultExpression() {
              var t = this.startNode();
              if (this.match(68)) return this.next(), this.parseFunction(t, 5);
              if (this.isAsyncFunction()) return this.next(), this.next(), this.parseFunction(t, 13);
              if (this.match(80)) return this.parseClass(t, !0, !0);
              if (this.match(26)) return this.hasPlugin("decorators") && this.getPluginOption("decorators", "decoratorsBeforeExport") === !0 && this.raise(f.DecoratorBeforeExport, {
                at: this.state.startLoc
              }), this.parseClass(this.maybeTakeDecorators(this.parseDecorators(!1), this.startNode()), !0, !0);
              if (this.match(75) || this.match(74) || this.isLet()) throw this.raise(f.UnsupportedDefaultExport, {
                at: this.state.startLoc
              });
              var r = this.parseMaybeAssignAllowIn();
              return this.semicolon(), r;
            }
          }, {
            key: "parseExportDeclaration",
            value: function parseExportDeclaration(t) {
              return this.match(80) ? this.parseClass(this.startNode(), !0, !1) : this.parseStatementListItem();
            }
          }, {
            key: "isExportDefaultSpecifier",
            value: function isExportDefaultSpecifier() {
              var t = this.state.type;

              if (q(t)) {
                if (t === 95 && !this.state.containsEsc || t === 99) return !1;

                if ((t === 128 || t === 127) && !this.state.containsEsc) {
                  var _this$lookahead = this.lookahead(),
                      s = _this$lookahead.type;

                  if (q(s) && s !== 97 || s === 5) return this.expectOnePlugin(["flow", "typescript"]), !1;
                }
              } else if (!this.match(65)) return !1;

              var r = this.nextTokenStart(),
                  e = this.isUnparsedContextual(r, "from");
              if (this.input.charCodeAt(r) === 44 || q(this.state.type) && e) return !0;

              if (this.match(65) && e) {
                var _s19 = this.input.charCodeAt(this.nextTokenStartSince(r + 4));

                return _s19 === 34 || _s19 === 39;
              }

              return !1;
            }
          }, {
            key: "parseExportFrom",
            value: function parseExportFrom(t, r) {
              if (this.eatContextual(97)) {
                t.source = this.parseImportSource(), this.checkExport(t);
                var e = this.maybeParseImportAssertions();
                e && (t.assertions = e, this.checkJSONModuleImport(t));
              } else r && this.unexpected();

              this.semicolon();
            }
          }, {
            key: "shouldParseExportDeclaration",
            value: function shouldParseExportDeclaration() {
              var t = this.state.type;
              return t === 26 && (this.expectOnePlugin(["decorators", "decorators-legacy"]), this.hasPlugin("decorators")) ? (this.getPluginOption("decorators", "decoratorsBeforeExport") === !0 && this.raise(f.DecoratorBeforeExport, {
                at: this.state.startLoc
              }), !0) : t === 74 || t === 75 || t === 68 || t === 80 || this.isLet() || this.isAsyncFunction();
            }
          }, {
            key: "checkExport",
            value: function checkExport(t, r, e, s) {
              if (r) {
                if (e) {
                  if (this.checkDuplicateExports(t, "default"), this.hasPlugin("exportDefaultFrom")) {
                    var i;
                    var a = t.declaration;
                    a.type === "Identifier" && a.name === "from" && a.end - a.start === 4 && !((i = a.extra) != null && i.parenthesized) && this.raise(f.ExportDefaultFromAsIdentifier, {
                      at: a
                    });
                  }
                } else if (t.specifiers && t.specifiers.length) {
                  var _iteratorNormalCompletion16 = true;
                  var _didIteratorError16 = false;
                  var _iteratorError16 = undefined;

                  try {
                    for (var _iterator16 = t.specifiers[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {
                      var _a9 = _step16.value;
                      var n = _a9.exported,
                          o = n.type === "Identifier" ? n.name : n.value;

                      if (this.checkDuplicateExports(_a9, o), !s && _a9.local) {
                        var u = _a9.local;
                        u.type !== "Identifier" ? this.raise(f.ExportBindingIsString, {
                          at: _a9,
                          localName: u.value,
                          exportName: o
                        }) : (this.checkReservedWord(u.name, u.loc.start, !0, !1), this.scope.checkLocalExport(u));
                      }
                    }
                  } catch (err) {
                    _didIteratorError16 = true;
                    _iteratorError16 = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion16 && _iterator16["return"] != null) {
                        _iterator16["return"]();
                      }
                    } finally {
                      if (_didIteratorError16) {
                        throw _iteratorError16;
                      }
                    }
                  }
                } else if (t.declaration) {
                  if (t.declaration.type === "FunctionDeclaration" || t.declaration.type === "ClassDeclaration") {
                    var _a10 = t.declaration.id;
                    if (!_a10) throw new Error("Assertion failure");
                    this.checkDuplicateExports(t, _a10.name);
                  } else if (t.declaration.type === "VariableDeclaration") {
                    var _iteratorNormalCompletion17 = true;
                    var _didIteratorError17 = false;
                    var _iteratorError17 = undefined;

                    try {
                      for (var _iterator17 = t.declaration.declarations[Symbol.iterator](), _step17; !(_iteratorNormalCompletion17 = (_step17 = _iterator17.next()).done); _iteratorNormalCompletion17 = true) {
                        var _a11 = _step17.value;
                        this.checkDeclaration(_a11.id);
                      }
                    } catch (err) {
                      _didIteratorError17 = true;
                      _iteratorError17 = err;
                    } finally {
                      try {
                        if (!_iteratorNormalCompletion17 && _iterator17["return"] != null) {
                          _iterator17["return"]();
                        }
                      } finally {
                        if (_didIteratorError17) {
                          throw _iteratorError17;
                        }
                      }
                    }
                  }
                }
              }
            }
          }, {
            key: "checkDeclaration",
            value: function checkDeclaration(t) {
              if (t.type === "Identifier") this.checkDuplicateExports(t, t.name);else if (t.type === "ObjectPattern") {
                var _iteratorNormalCompletion18 = true;
                var _didIteratorError18 = false;
                var _iteratorError18 = undefined;

                try {
                  for (var _iterator18 = t.properties[Symbol.iterator](), _step18; !(_iteratorNormalCompletion18 = (_step18 = _iterator18.next()).done); _iteratorNormalCompletion18 = true) {
                    var r = _step18.value;
                    this.checkDeclaration(r);
                  }
                } catch (err) {
                  _didIteratorError18 = true;
                  _iteratorError18 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion18 && _iterator18["return"] != null) {
                      _iterator18["return"]();
                    }
                  } finally {
                    if (_didIteratorError18) {
                      throw _iteratorError18;
                    }
                  }
                }
              } else if (t.type === "ArrayPattern") {
                var _iteratorNormalCompletion19 = true;
                var _didIteratorError19 = false;
                var _iteratorError19 = undefined;

                try {
                  for (var _iterator19 = t.elements[Symbol.iterator](), _step19; !(_iteratorNormalCompletion19 = (_step19 = _iterator19.next()).done); _iteratorNormalCompletion19 = true) {
                    var _r5 = _step19.value;
                    _r5 && this.checkDeclaration(_r5);
                  }
                } catch (err) {
                  _didIteratorError19 = true;
                  _iteratorError19 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion19 && _iterator19["return"] != null) {
                      _iterator19["return"]();
                    }
                  } finally {
                    if (_didIteratorError19) {
                      throw _iteratorError19;
                    }
                  }
                }
              } else t.type === "ObjectProperty" ? this.checkDeclaration(t.value) : t.type === "RestElement" ? this.checkDeclaration(t.argument) : t.type === "AssignmentPattern" && this.checkDeclaration(t.left);
            }
          }, {
            key: "checkDuplicateExports",
            value: function checkDuplicateExports(t, r) {
              this.exportedIdentifiers.has(r) && (r === "default" ? this.raise(f.DuplicateDefaultExport, {
                at: t
              }) : this.raise(f.DuplicateExport, {
                at: t,
                exportName: r
              })), this.exportedIdentifiers.add(r);
            }
          }, {
            key: "parseExportSpecifiers",
            value: function parseExportSpecifiers(t) {
              var r = [],
                  e = !0;

              for (this.expect(5); !this.eat(8);) {
                if (e) e = !1;else if (this.expect(12), this.eat(8)) break;
                var s = this.isContextual(128),
                    i = this.match(131),
                    a = this.startNode();
                a.local = this.parseModuleExportName(), r.push(this.parseExportSpecifier(a, i, t, s));
              }

              return r;
            }
          }, {
            key: "parseExportSpecifier",
            value: function parseExportSpecifier(t, r, e, s) {
              return this.eatContextual(93) ? t.exported = this.parseModuleExportName() : r ? t.exported = Kl(t.local) : t.exported || (t.exported = me(t.local)), this.finishNode(t, "ExportSpecifier");
            }
          }, {
            key: "parseModuleExportName",
            value: function parseModuleExportName() {
              if (this.match(131)) {
                var t = this.parseStringLiteral(this.state.value),
                    r = t.value.match(Ah);
                return r && this.raise(f.ModuleExportNameHasLoneSurrogate, {
                  at: t,
                  surrogateCharCode: r[0].charCodeAt(0)
                }), t;
              }

              return this.parseIdentifier(!0);
            }
          }, {
            key: "isJSONModuleImport",
            value: function isJSONModuleImport(t) {
              return t.assertions != null ? t.assertions.some(function (r) {
                var e = r.key,
                    s = r.value;
                return s.value === "json" && (e.type === "Identifier" ? e.name === "type" : e.value === "type");
              }) : !1;
            }
          }, {
            key: "checkImportReflection",
            value: function checkImportReflection(t) {
              if (t.module) {
                var r;
                (t.specifiers.length !== 1 || t.specifiers[0].type !== "ImportDefaultSpecifier") && this.raise(f.ImportReflectionNotBinding, {
                  at: t.specifiers[0].loc.start
                }), ((r = t.assertions) == null ? void 0 : r.length) > 0 && this.raise(f.ImportReflectionHasAssertion, {
                  at: t.specifiers[0].loc.start
                });
              }
            }
          }, {
            key: "checkJSONModuleImport",
            value: function checkJSONModuleImport(t) {
              if (this.isJSONModuleImport(t) && t.type !== "ExportAllDeclaration") {
                var r = t.specifiers;

                if (r != null) {
                  var e = r.find(function (s) {
                    var i;
                    if (s.type === "ExportSpecifier" ? i = s.local : s.type === "ImportSpecifier" && (i = s.imported), i !== void 0) return i.type === "Identifier" ? i.name !== "default" : i.value !== "default";
                  });
                  e !== void 0 && this.raise(f.ImportJSONBindingNotDefault, {
                    at: e.loc.start
                  });
                }
              }
            }
          }, {
            key: "parseMaybeImportReflection",
            value: function parseMaybeImportReflection(t) {
              var r = !1;

              if (this.isContextual(125)) {
                var e = this.lookahead(),
                    s = e.type;
                q(s) ? (s !== 97 || this.input.charCodeAt(this.nextTokenStartSince(e.end)) === 102) && (r = !0) : s !== 12 && (r = !0);
              }

              r ? (this.expectPlugin("importReflection"), this.next(), t.module = !0) : this.hasPlugin("importReflection") && (t.module = !1);
            }
          }, {
            key: "parseImport",
            value: function parseImport(t) {
              if (t.specifiers = [], !this.match(131)) {
                this.parseMaybeImportReflection(t);
                var s = !this.maybeParseDefaultImportSpecifier(t) || this.eat(12),
                    i = s && this.maybeParseStarImportSpecifier(t);
                s && !i && this.parseNamedImportSpecifiers(t), this.expectContextual(97);
              }

              t.source = this.parseImportSource();
              var r = this.maybeParseImportAssertions();
              if (r) t.assertions = r;else {
                var e = this.maybeParseModuleAttributes();
                e && (t.attributes = e);
              }
              return this.checkImportReflection(t), this.checkJSONModuleImport(t), this.semicolon(), this.finishNode(t, "ImportDeclaration");
            }
          }, {
            key: "parseImportSource",
            value: function parseImportSource() {
              return this.match(131) || this.unexpected(), this.parseExprAtom();
            }
          }, {
            key: "shouldParseDefaultImport",
            value: function shouldParseDefaultImport(t) {
              return q(this.state.type);
            }
          }, {
            key: "parseImportSpecifierLocal",
            value: function parseImportSpecifierLocal(t, r, e) {
              r.local = this.parseIdentifier(), t.specifiers.push(this.finishImportSpecifier(r, e));
            }
          }, {
            key: "finishImportSpecifier",
            value: function finishImportSpecifier(t, r) {
              var e = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : Be;
              return this.checkLVal(t.local, {
                "in": {
                  type: r
                },
                binding: e
              }), this.finishNode(t, r);
            }
          }, {
            key: "parseAssertEntries",
            value: function parseAssertEntries() {
              var t = [],
                  r = new Set();

              do {
                if (this.match(8)) break;
                var e = this.startNode(),
                    s = this.state.value;
                if (r.has(s) && this.raise(f.ModuleAttributesWithDuplicateKeys, {
                  at: this.state.startLoc,
                  key: s
                }), r.add(s), this.match(131) ? e.key = this.parseStringLiteral(s) : e.key = this.parseIdentifier(!0), this.expect(14), !this.match(131)) throw this.raise(f.ModuleAttributeInvalidValue, {
                  at: this.state.startLoc
                });
                e.value = this.parseStringLiteral(this.state.value), t.push(this.finishNode(e, "ImportAttribute"));
              } while (this.eat(12));

              return t;
            }
          }, {
            key: "maybeParseModuleAttributes",
            value: function maybeParseModuleAttributes() {
              if (this.match(76) && !this.hasPrecedingLineBreak()) this.expectPlugin("moduleAttributes"), this.next();else return this.hasPlugin("moduleAttributes") ? [] : null;
              var t = [],
                  r = new Set();

              do {
                var e = this.startNode();
                if (e.key = this.parseIdentifier(!0), e.key.name !== "type" && this.raise(f.ModuleAttributeDifferentFromType, {
                  at: e.key
                }), r.has(e.key.name) && this.raise(f.ModuleAttributesWithDuplicateKeys, {
                  at: e.key,
                  key: e.key.name
                }), r.add(e.key.name), this.expect(14), !this.match(131)) throw this.raise(f.ModuleAttributeInvalidValue, {
                  at: this.state.startLoc
                });
                e.value = this.parseStringLiteral(this.state.value), this.finishNode(e, "ImportAttribute"), t.push(e);
              } while (this.eat(12));

              return t;
            }
          }, {
            key: "maybeParseImportAssertions",
            value: function maybeParseImportAssertions() {
              if (this.isContextual(94) && !this.hasPrecedingLineBreak()) this.expectPlugin("importAssertions"), this.next();else return this.hasPlugin("importAssertions") ? [] : null;
              this.eat(5);
              var t = this.parseAssertEntries();
              return this.eat(8), t;
            }
          }, {
            key: "maybeParseDefaultImportSpecifier",
            value: function maybeParseDefaultImportSpecifier(t) {
              return this.shouldParseDefaultImport(t) ? (this.parseImportSpecifierLocal(t, this.startNode(), "ImportDefaultSpecifier"), !0) : !1;
            }
          }, {
            key: "maybeParseStarImportSpecifier",
            value: function maybeParseStarImportSpecifier(t) {
              if (this.match(55)) {
                var r = this.startNode();
                return this.next(), this.expectContextual(93), this.parseImportSpecifierLocal(t, r, "ImportNamespaceSpecifier"), !0;
              }

              return !1;
            }
          }, {
            key: "parseNamedImportSpecifiers",
            value: function parseNamedImportSpecifiers(t) {
              var r = !0;

              for (this.expect(5); !this.eat(8);) {
                if (r) r = !1;else {
                  if (this.eat(14)) throw this.raise(f.DestructureNamedImport, {
                    at: this.state.startLoc
                  });
                  if (this.expect(12), this.eat(8)) break;
                }
                var e = this.startNode(),
                    s = this.match(131),
                    i = this.isContextual(128);
                e.imported = this.parseModuleExportName();
                var a = this.parseImportSpecifier(e, s, t.importKind === "type" || t.importKind === "typeof", i, void 0);
                t.specifiers.push(a);
              }
            }
          }, {
            key: "parseImportSpecifier",
            value: function parseImportSpecifier(t, r, e, s, i) {
              if (this.eatContextual(93)) t.local = this.parseIdentifier();else {
                var a = t.imported;
                if (r) throw this.raise(f.ImportBindingIsString, {
                  at: t,
                  importName: a.value
                });
                this.checkReservedWord(a.name, t.loc.start, !0, !0), t.local || (t.local = me(a));
              }
              return this.finishImportSpecifier(t, "ImportSpecifier", i);
            }
          }, {
            key: "isThisParam",
            value: function isThisParam(t) {
              return t.type === "Identifier" && t.name === "this";
            }
          }]);

          return vh;
        }(gh),
            Yr =
        /*#__PURE__*/
        function (_vh) {
          _inherits(Yr, _vh);

          function Yr(t, r) {
            var _this69;

            _classCallCheck(this, Yr);

            t = p(t), _this69 = _possibleConstructorReturn(this, _getPrototypeOf(Yr).call(this, t, r)), _this69.options = t, _this69.initializeScopes(), _this69.plugins = Eh(_this69.options.plugins), _this69.filename = t.sourceFilename;
            return _this69;
          }

          _createClass(Yr, [{
            key: "getScopeHandler",
            value: function getScopeHandler() {
              return is;
            }
          }, {
            key: "parse",
            value: function parse() {
              this.enterInitialScopes();
              var t = this.startNode(),
                  r = this.startNode();
              return this.nextToken(), t.errors = null, this.parseTopLevel(t, r), t.errors = this.state.errors, t;
            }
          }]);

          return Yr;
        }(vh);

        function Eh(t) {
          var r = new Map();
          var _iteratorNormalCompletion20 = true;
          var _didIteratorError20 = false;
          var _iteratorError20 = undefined;

          try {
            for (var _iterator20 = t[Symbol.iterator](), _step20; !(_iteratorNormalCompletion20 = (_step20 = _iterator20.next()).done); _iteratorNormalCompletion20 = true) {
              var e = _step20.value;

              var _ref5 = Array.isArray(e) ? e : [e, {}],
                  _ref6 = _slicedToArray(_ref5, 2),
                  s = _ref6[0],
                  i = _ref6[1];

              r.has(s) || r.set(s, i || {});
            }
          } catch (err) {
            _didIteratorError20 = true;
            _iteratorError20 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion20 && _iterator20["return"] != null) {
                _iterator20["return"]();
              }
            } finally {
              if (_didIteratorError20) {
                throw _iteratorError20;
              }
            }
          }

          return r;
        }

        function Ch(t, r) {
          var e;

          if (((e = r) == null ? void 0 : e.sourceType) === "unambiguous") {
            r = Object.assign({}, r);

            try {
              r.sourceType = "module";
              var s = Xe(r, t),
                  i = s.parse();
              if (s.sawUnambiguousESM) return i;
              if (s.ambiguousScriptDifferentAst) try {
                return r.sourceType = "script", Xe(r, t).parse();
              } catch (_unused16) {} else i.program.sourceType = "script";
              return i;
            } catch (s) {
              try {
                return r.sourceType = "script", Xe(r, t).parse();
              } catch (_unused17) {}

              throw s;
            }
          } else return Xe(r, t).parse();
        }

        function bh(t, r) {
          var e = Xe(r, t);
          return e.options.strictMode && (e.state.strict = !0), e.getExpression();
        }

        function Sh(t) {
          var r = {};

          for (var _i23 = 0, _Object$keys4 = Object.keys(t); _i23 < _Object$keys4.length; _i23++) {
            var e = _Object$keys4[_i23];
            r[e] = ce(t[e]);
          }

          return r;
        }

        var wh = Sh(Z);

        function Xe(t, r) {
          var e = Yr;
          return t != null && t.plugins && (yh(t.plugins), e = Ih(t.plugins)), new e(t, r);
        }

        var Qr = {};

        function Ih(t) {
          var r = xh.filter(function (i) {
            return J(t, i);
          }),
              e = r.join("/"),
              s = Qr[e];

          if (!s) {
            s = Yr;
            var _iteratorNormalCompletion21 = true;
            var _didIteratorError21 = false;
            var _iteratorError21 = undefined;

            try {
              for (var _iterator21 = r[Symbol.iterator](), _step21; !(_iteratorNormalCompletion21 = (_step21 = _iterator21.next()).done); _iteratorNormalCompletion21 = true) {
                var i = _step21.value;
                s = Xr[i](s);
              }
            } catch (err) {
              _didIteratorError21 = true;
              _iteratorError21 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion21 && _iterator21["return"] != null) {
                  _iterator21["return"]();
                }
              } finally {
                if (_didIteratorError21) {
                  throw _iteratorError21;
                }
              }
            }

            Qr[e] = s;
          }

          return s;
        }

        l.parse = Ch, l.parseExpression = bh, l.tokTypes = wh;
      }
    }),
        Xf = $({
      "src/language-js/parse/json.js": function srcLanguageJsParseJsonJs(l, h) {
        "use strict";

        U();
        var p = Io(),
            d = lr(),
            x = ko(),
            P = Do();

        function m() {
          var w = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {},
              _w$allowComments = w.allowComments,
              L = _w$allowComments === void 0 ? !0 : _w$allowComments;
          return function (_) {
            var _Fo = Fo(),
                G = _Fo.parseExpression,
                N;

            try {
              N = G(_, {
                tokens: !0,
                ranges: !0
              });
            } catch (O) {
              throw P(O);
            }

            if (!L && p(N.comments)) throw v(N.comments[0], "Comment");
            return S(N), N;
          };
        }

        function v(w, L) {
          var _map = [w.loc.start, w.loc.end].map(function (G) {
            var N = G.line,
                O = G.column;
            return {
              line: N,
              column: O + 1
            };
          }),
              _map2 = _slicedToArray(_map, 2),
              A = _map2[0],
              _ = _map2[1];

          return d("".concat(L, " is not allowed in JSON."), {
            start: A,
            end: _
          });
        }

        function S(w) {
          switch (w.type) {
            case "ArrayExpression":
              var _iteratorNormalCompletion22 = true;
              var _didIteratorError22 = false;
              var _iteratorError22 = undefined;

              try {
                for (var _iterator22 = w.elements[Symbol.iterator](), _step22; !(_iteratorNormalCompletion22 = (_step22 = _iterator22.next()).done); _iteratorNormalCompletion22 = true) {
                  var L = _step22.value;
                  L !== null && S(L);
                }
              } catch (err) {
                _didIteratorError22 = true;
                _iteratorError22 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion22 && _iterator22["return"] != null) {
                    _iterator22["return"]();
                  }
                } finally {
                  if (_didIteratorError22) {
                    throw _iteratorError22;
                  }
                }
              }

              return;

            case "ObjectExpression":
              var _iteratorNormalCompletion23 = true;
              var _didIteratorError23 = false;
              var _iteratorError23 = undefined;

              try {
                for (var _iterator23 = w.properties[Symbol.iterator](), _step23; !(_iteratorNormalCompletion23 = (_step23 = _iterator23.next()).done); _iteratorNormalCompletion23 = true) {
                  var _L = _step23.value;
                  S(_L);
                }
              } catch (err) {
                _didIteratorError23 = true;
                _iteratorError23 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion23 && _iterator23["return"] != null) {
                    _iterator23["return"]();
                  }
                } finally {
                  if (_didIteratorError23) {
                    throw _iteratorError23;
                  }
                }
              }

              return;

            case "ObjectProperty":
              if (w.computed) throw v(w.key, "Computed key");
              if (w.shorthand) throw v(w.key, "Shorthand property");
              w.key.type !== "Identifier" && S(w.key), S(w.value);
              return;

            case "UnaryExpression":
              {
                var _L2 = w.operator,
                    A = w.argument;
                if (_L2 !== "+" && _L2 !== "-") throw v(w, "Operator '".concat(w.operator, "'"));
                if (A.type === "NumericLiteral" || A.type === "Identifier" && (A.name === "Infinity" || A.name === "NaN")) return;
                throw v(A, "Operator '".concat(_L2, "' before '").concat(A.type, "'"));
              }

            case "Identifier":
              if (w.name !== "Infinity" && w.name !== "NaN" && w.name !== "undefined") throw v(w, "Identifier '".concat(w.name, "'"));
              return;

            case "TemplateLiteral":
              if (p(w.expressions)) throw v(w.expressions[0], "'TemplateLiteral' with expression");
              var _iteratorNormalCompletion24 = true;
              var _didIteratorError24 = false;
              var _iteratorError24 = undefined;

              try {
                for (var _iterator24 = w.quasis[Symbol.iterator](), _step24; !(_iteratorNormalCompletion24 = (_step24 = _iterator24.next()).done); _iteratorNormalCompletion24 = true) {
                  var _L3 = _step24.value;
                  S(_L3);
                }
              } catch (err) {
                _didIteratorError24 = true;
                _iteratorError24 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion24 && _iterator24["return"] != null) {
                    _iterator24["return"]();
                  }
                } finally {
                  if (_didIteratorError24) {
                    throw _iteratorError24;
                  }
                }
              }

              return;

            case "NullLiteral":
            case "BooleanLiteral":
            case "NumericLiteral":
            case "StringLiteral":
            case "TemplateElement":
              return;

            default:
              throw v(w, "'".concat(w.type, "'"));
          }
        }

        var k = m(),
            F = {
          json: x({
            parse: k,
            hasPragma: function hasPragma() {
              return !0;
            }
          }),
          json5: x(k),
          "json-stringify": x({
            parse: m({
              allowComments: !1
            }),
            astFormat: "estree-json"
          })
        };
        h.exports = F;
      }
    });

    U();

    var Yf = kf(),
        Qf = po(),
        Zf = Of(),
        Ue = ko(),
        ed = Do(),
        td = Jf(),
        sd = Xf(),
        rd = {
      sourceType: "module",
      allowImportExportEverywhere: !0,
      allowReturnOutsideFunction: !0,
      allowSuperOutsideMethod: !0,
      allowUndeclaredExports: !0,
      errorRecovery: !0,
      createParenthesizedExpressions: !0,
      plugins: ["doExpressions", "exportDefaultFrom", "functionBind", "functionSent", "throwExpressions", "partialApplication", ["decorators", {
        decoratorsBeforeExport: !1
      }], "importAssertions", "decimal", "moduleBlocks", "asyncDoExpressions", "regexpUnicodeSets", "destructuringPrivate", "decoratorAutoAccessors"],
      tokens: !0,
      ranges: !0
    },
        id = ["recordAndTuple", {
      syntaxType: "hash"
    }],
        no = "v8intrinsic",
        oo = [["pipelineOperator", {
      proposal: "hack",
      topicToken: "%"
    }], ["pipelineOperator", {
      proposal: "minimal"
    }], ["pipelineOperator", {
      proposal: "fsharp"
    }]],
        he = function he(l) {
      var h = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : rd;
      return Object.assign(Object.assign({}, h), {}, {
        plugins: [].concat(_toConsumableArray(h.plugins), _toConsumableArray(l))
      });
    },
        ad = /@(?:no)?flow\b/;

    function nd(l, h) {
      if (h.filepath && h.filepath.endsWith(".js.flow")) return !0;
      var p = Qf(l);
      p && (l = l.slice(p.length));
      var d = Zf(l, 0);
      return d !== !1 && (l = l.slice(0, d)), ad.test(l);
    }

    function od(l, h, p) {
      var d = Fo()[l],
          x = d(h, p),
          P = x.errors.find(function (m) {
        return !fd.has(m.reasonCode);
      });
      if (P) throw P;
      return x;
    }

    function $e(l) {
      for (var h = arguments.length, p = new Array(h > 1 ? h - 1 : 0), d = 1; d < h; d++) {
        p[d - 1] = arguments[d];
      }

      return function (x, P) {
        var m = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        if ((m.parser === "babel" || m.parser === "__babel_estree") && nd(x, m)) return m.parser = "babel-flow", Lo(x, P, m);
        var v = p;
        m.__babelSourceType === "script" && (v = v.map(function (w) {
          return Object.assign(Object.assign({}, w), {}, {
            sourceType: "script"
          });
        })), /#[[{]/.test(x) && (v = v.map(function (w) {
          return he([id], w);
        }));
        var S = /%[A-Z]/.test(x);
        x.includes("|>") ? v = (S ? [].concat(oo, [no]) : oo).flatMap(function (L) {
          return v.map(function (A) {
            return he([L], A);
          });
        }) : S && (v = v.map(function (w) {
          return he([no], w);
        }));

        var _Yf = Yf.apply(void 0, _toConsumableArray(v.map(function (w) {
          return function () {
            return od(l, x, w);
          };
        }))),
            k = _Yf.result,
            F = _Yf.error;

        if (!k) throw ed(F);
        return m.originalText = x, td(k, m);
      };
    }

    var ld = $e("parse", he(["jsx", "flow"])),
        Lo = $e("parse", he(["jsx", ["flow", {
      all: !0,
      enums: !0
    }]])),
        hd = $e("parse", he(["jsx", "typescript"]), he(["typescript"])),
        ud = $e("parse", he(["jsx", "flow", "estree"])),
        cd = $e("parseExpression", he(["jsx"])),
        pd = $e("parseExpression", he(["typescript"])),
        fd = new Set(["StrictNumericEscape", "StrictWith", "StrictOctalLiteral", "StrictDelete", "StrictEvalArguments", "StrictEvalArgumentsBinding", "StrictFunction", "EmptyTypeArguments", "EmptyTypeParameters", "ConstructorHasTypeParameters", "UnsupportedParameterPropertyKind", "UnexpectedParameterModifier", "MixedLabeledAndUnlabeledElements", "InvalidTupleMemberLabel", "NonClassMethodPropertyHasAbstractModifer", "ReadonlyForMethodSignature", "ClassMethodHasDeclare", "ClassMethodHasReadonly", "InvalidModifierOnTypeMember", "DuplicateAccessibilityModifier", "IndexSignatureHasDeclare", "DecoratorExportClass", "ParamDupe", "InvalidDecimal", "RestTrailingComma", "UnsupportedParameterDecorator", "UnterminatedJsxContent", "UnexpectedReservedWord", "ModuleAttributesWithDuplicateKeys", "LineTerminatorBeforeArrow", "InvalidEscapeSequenceTemplate", "NonAbstractClassHasAbstractMethod", "UnsupportedPropertyDecorator", "OptionalTypeBeforeRequired", "PatternIsOptional", "OptionalBindingPattern", "DeclareClassFieldHasInitializer", "TypeImportCannotSpecifyDefaultAndNamed", "DeclareFunctionHasImplementation", "ConstructorClassField", "VarRedeclaration", "InvalidPrivateFieldResolution", "DuplicateExport"]),
        lo = Ue(ld),
        ho = Ue(hd),
        uo = Ue(cd),
        dd = Ue(pd);
    Oo.exports = {
      parsers: Object.assign(Object.assign({
        babel: lo,
        "babel-flow": Ue(Lo),
        "babel-ts": ho
      }, sd), {}, {
        __js_expression: uo,
        __vue_expression: uo,
        __vue_ts_expression: dd,
        __vue_event_binding: lo,
        __vue_ts_event_binding: ho,
        __babel_estree: Ue(ud)
      })
    };
  });
  return md();
});